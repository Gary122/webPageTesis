[{"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\index.js":"1","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\App.js":"2","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\TaskForm.js":"4","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\TaskList.js":"5","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Navbar.js":"6","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Georeference.js":"7","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\InicioPage.js":"8"},{"size":537,"mtime":1687222309352,"results":"9","hashOfConfig":"10"},{"size":810,"mtime":1686807331929,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1685974357000,"results":"12","hashOfConfig":"10"},{"size":13391,"mtime":1687897588911,"results":"13","hashOfConfig":"10"},{"size":11396,"mtime":1687265954121,"results":"14","hashOfConfig":"10"},{"size":2355,"mtime":1687236955069,"results":"15","hashOfConfig":"10"},{"size":15034,"mtime":1687592945066,"results":"16","hashOfConfig":"10"},{"size":11734,"mtime":1687038562936,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"c3mytq",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"21"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"21"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"21"},"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\index.js",[],[],[],"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\App.js",["47"],[],"import { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport Georeference from './components/Georeference'\nimport InicioPage from './components/InicioPage'\nimport Menu from \"./components/Navbar\"\nimport Box from '@mui/material/Box';\n\nexport default function App() {\n  \n  return (\n    <BrowserRouter>   \n      <Menu/>\n      <Box>\n        <Routes>\n          <Route path=\"/\" element={<TaskList />} />\n          <Route path=\"/inicio/geo\" element={<Georeference />} /> // Asegúrate de usar el mismo nombre aquí también\n          <Route path=\"/inicio/login\" element={<TaskForm />} />\n          <Route path=\"/inicio/iniciova\" element={<InicioPage />} />\n        </Routes>\n      </Box>\n    </BrowserRouter>\n  )\n}\n","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\TaskForm.js",["48","49"],[],"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\TaskList.js",[],[],"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Navbar.js",["50"],[],"import { AppBar, Box, Container, Toolbar, Typography } from \"@mui/material\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  navbarContainer: {\n    backgroundColor: '#fcfcfc',\n    color: '#333',\n    borderBottom: '1px solid #ddd',\n    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)', // Sombra en la parte inferior del navbar\n  },\n  navbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: '0 rem',\n  },\n  logo: {\n    fontSize: '1.6rem',\n    fontWeight: 'bold',\n    textDecoration: 'none',\n    color: '#333',\n    fontFamily: 'Helvetica Neue',\n  },\n\n  logoText: {\n    fontFamily: 'Helvetica Neue', // Tipo de letra para el texto del logo\n  },\n\n  navLinks: {\n    display: 'flex',\n    gap: '1rem',\n  },\n  navLink: {\n    fontSize: '1rem',\n    color: '#777777',\n    textDecoration: 'none',\n    padding: '0.5rem',\n    borderRadius: '0.25rem',\n    transition: 'background-color 0.3s ease',\n    fontFamily: 'Helvetica Neue', \n  },\n  navLinkHover: {\n    '&:hover': {\n      backgroundColor: '#eee',\n    },\n  },\n}));\n\nexport default function Navbar() {\n  const classes = useStyles();\n  const navigate = useNavigate();\n\n  return (\n    <div className={classes.navbarContainer}>\n      <AppBar position=\"static\" color=\"transparent\" elevation={0}>\n        <Container maxWidth=\"lg\">\n          <Toolbar className={classes.navbar}>\n            <Typography variant=\"h6\" component={Link} to=\"/\" className={classes.logo}>\n            <span className={classes.logoText}>Bio-Inka</span>\n            </Typography>\n            <Box className={classes.navLinks}>\n            <Link to=\"/inicio/iniciova\" className={`${classes.navLink} ${classes.navLinkHover}`}>Búsqueda</Link>\n              <Link to=\"/inicio/geo\" className={`${classes.navLink} ${classes.navLinkHover}`}>Georreferenciación</Link>\n              <Link to=\"/inicio/iniciova\" className={`${classes.navLink} ${classes.navLinkHover}`}>Destacados</Link>\n              <Link to=\"/inicio/about\" className={`${classes.navLink} ${classes.navLinkHover}`}>Acerca de nosotros</Link>\n              <Link to=\"/inicio/login\" className={`${classes.navLink} ${classes.navLinkHover}`}>Log-In</Link>\n            </Box>\n          </Toolbar>\n        </Container>\n      </AppBar>\n    </div>\n  );\n}\n","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Georeference.js",["51","52"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'; // Importa los componentes de react-leaflet\r\nimport 'leaflet/dist/leaflet.css'; // Importa el CSS de Leaflet\r\nimport { Icon } from 'leaflet';\r\n\r\nimport { styled } from \"@mui/system\";\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, Typography } from '@mui/material';\r\nimport bannerImage from '../imagenes/bannerInicio.jpg';  // Asegúrate de cambiar esto a la ruta correcta de tu imagen\r\nimport { Box, FormControl, InputLabel, Select, MenuItem, Typograph } from '@mui/material';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\ndocument.body.style.height = '100vh';\r\ndocument.getElementById('root').style.height = '100%';\r\n\r\nconst myIcon = new Icon({\r\n    iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-red.png',  // Reemplaza esto con la URL de tu propio icono\r\n    iconSize: [50, 82],  // Ajusta estos números para cambiar el tamaño de los iconos\r\n    iconAnchor: [25, 82],\r\n});\r\n\r\nconst ContentContainer = styled('div')({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '100%', // Esto hará que el contenedor tenga el 100% de la altura de la pantalla\r\n    boxSizing: 'border-box',\r\n});\r\n\r\nconst MapAndTableContainer = styled('div')({\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    height: '100vh', // Esto hará que el contenedor tenga el 50% de la altura de la pantalla\r\n    '@media (max-width:600px)': {\r\n        flexDirection: 'column',\r\n    },\r\n    width: '100%', // Asegura que el contenedor ocupa todo el ancho disponible\r\n    boxSizing: 'border-box', // Asegura que los márgenes y el relleno no añaden al ancho total\r\n});\r\n\r\n\r\n\r\nconst StyledBannerImage = styled('div')({\r\n    backgroundImage: `url(${bannerImage})`,\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center center',\r\n    height: '600px',\r\n    width: '100%',\r\n    opacity: 0.7,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '0 20px',\r\n    color: '#FFFFFF',\r\n    margin: '0 auto',\r\n});\r\n\r\nconst StyledForm = styled('form')({\r\n    background: 'rgba(255, 255, 255, 1)',  // Un fondo blanco con opacidad del 70%.\r\n    padding: '20px',\r\n    borderRadius: '10px',  // Bordes redondeados.\r\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.5)',  // Sombra para darle un poco de profundidad.\r\n    opacity: 0.8\r\n\r\n});\r\n\r\n\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)({\r\n    padding: '4px',\r\n});\r\n\r\nconst StyledTableHeaderCell = styled(TableCell)({\r\n    padding: '8px',\r\n    backgroundColor: '#3f51b5', // Color de fondo del encabezado\r\n    color: '#fff', // Color del texto del encabezado\r\n    fontSize: '1.1em', // Tamaño de la fuente del encabezado\r\n});\r\n\r\nconst StyledTableRow = styled(TableRow)({\r\n    '&:nth-of-type(odd)': {\r\n        backgroundColor: '#f4f6f8', // Puedes cambiar a cualquier color que te guste.\r\n    },\r\n    '&:hover': {\r\n        backgroundColor: 'lightgray',\r\n    },\r\n});\r\n\r\nconst StyledTableContainer = styled(TableContainer)({\r\n    borderRadius: '10px',  // Puedes ajustar el valor a tu gusto.\r\n    boxShadow: '0px 0px 10px 0px rgba(0,0,0,0.2)', // Sombra alrededor de la tabla.\r\n    overflow: 'auto', // Permite el desplazamiento cuando el contenido supera la altura máxima.\r\n    height: '100vh', // Ajusta esto a la altura que desees.\r\n});\r\n\r\nexport default function TaskList() {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const [tasks, setTasks] = useState([]);\r\n    const [countries, setCountries] = useState([]);\r\n    const [selectedCountry, setSelectedCountry] = useState('');\r\n    const [provinces, setProvinces] = useState([]);\r\n    const [selectedProvince, setSelectedProvince] = useState('');\r\n    const [isTableVisible, setIsTableVisible] = useState(false);\r\n\r\n\r\n    const loadTasks = async (province) => {\r\n        const response = await fetch(`http://localhost:4000/consult/${province}`);\r\n        \r\n        const data = await response.json();\r\n        if (data.message) {\r\n            setOpenDialog(true);\r\n            setIsTableVisible(false); // Ocultar la tabla si se abre el diálogo\r\n        } else {\r\n            setTasks(data);\r\n            setIsTableVisible(data.length > 0);\r\n        }\r\n    };\r\n\r\n    const handleCloseDialog = () => {\r\n        setOpenDialog(false);\r\n        setIsTableVisible(false); // Ocultar la tabla cuando se cierra el diálogo\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:4000/country')\r\n            .then(response => response.json())\r\n            .then(data => setCountries(data))\r\n            .catch(error => console.error('Error:', error));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedCountry !== '') {\r\n            fetch(`http://localhost:4000/stateByCountry/${selectedCountry}`)\r\n                .then(response => response.json())\r\n                .then(data => setProvinces(data))\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n    }, [selectedCountry]);\r\n\r\n    useEffect(() => {\r\n        if (selectedProvince) {\r\n            loadTasks(selectedProvince);\r\n        }\r\n    }, [selectedProvince]);\r\n\r\n    const handleCountryChange = (event) => {\r\n        setSelectedCountry(event.target.value);\r\n        setProvinces([]);\r\n        setSelectedProvince('');\r\n    };\r\n\r\n    const handleProvinceChange = (event) => {\r\n        setSelectedProvince(event.target.value);\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        if (selectedProvince) {\r\n            loadTasks(selectedProvince);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <ContentContainer>\r\n                <Box sx={{ width: '100%', fontSize: '1.2em', margin: '0', boxSizing: 'border-box' }}>\r\n\r\n                    <StyledForm>\r\n                        <Typography variant=\"h\" color=\"#000080\" gutterBottom component=\"div\">\r\n                            Fitrar por provincias\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                            <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n                                <InputLabel id=\"country-select-label\">País</InputLabel>\r\n                                <Select\r\n                                    labelId=\"country-select-label\"\r\n                                    value={selectedCountry}\r\n                                    onChange={handleCountryChange}\r\n                                >\r\n                                    {/* Aquí es donde mapeas los países para generar los elementos de menú */}\r\n                                    {countries.map((country, index) => (\r\n                                        <MenuItem key={index} value={country.pas_nombre.trim()}>\r\n                                            {country.pas_nombre.trim()}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n                                <InputLabel id=\"province-select-label\">Provincia</InputLabel>\r\n                                <Select\r\n                                    labelId=\"province-select-label\"\r\n                                    value={selectedProvince}\r\n                                    onChange={handleProvinceChange}\r\n                                >\r\n                                    {/* Y aquí es donde mapeas las provincias para generar los elementos de menú */}\r\n                                    {provinces && provinces.length > 0 ? (\r\n                                        provinces.map((province, index) => (\r\n                                            <MenuItem key={index} value={province.pro_nombre.trim()}>\r\n                                                {province.pro_nombre.trim()}\r\n                                            </MenuItem>\r\n                                        ))\r\n                                    ) : (\r\n                                        <MenuItem value=\"\">No hay provincias disponibles</MenuItem>\r\n                                    )}\r\n                                </Select>\r\n                                <Dialog\r\n                                    open={openDialog}\r\n                                    onClose={handleCloseDialog}\r\n                                    aria-labelledby=\"alert-dialog-title\"\r\n                                    aria-describedby=\"alert-dialog-description\"\r\n                                >\r\n                                    <DialogTitle id=\"alert-dialog-title\">{\"Advertencia\"}</DialogTitle>\r\n                                    <DialogContent>\r\n                                        <DialogContentText id=\"alert-dialog-description\">\r\n                                            No se encontraron datos para la provincia seleccionada.\r\n                                        </DialogContentText>\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleCloseDialog} color=\"primary\" autoFocus>\r\n                                            Aceptar\r\n                                        </Button>\r\n                                    </DialogActions>\r\n                                </Dialog>\r\n\r\n                            </FormControl>\r\n                            <Button variant=\"contained\" onClick={handleSearch}>Buscar</Button>\r\n                        </Box>\r\n\r\n                    </StyledForm>\r\n                </Box>\r\n                <MapAndTableContainer>\r\n                    <Box sx={{ width: { xs: '100%', sm: '50%' }, fontSize: '1.2em', boxSizing: 'border-box', height: '100%' }}>\r\n                        {tasks.length > 0 && (\r\n                            <MapContainer center={[tasks[0].loc_latitud, tasks[0].loc_longitud]} zoom={13} style={{ height: \"100%\", width: \"100%\" }}>\r\n                                <TileLayer\r\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                />\r\n                                {tasks.map((task, index) => (\r\n                                    <Marker key={index} position={[task.loc_latitud, task.loc_longitud]} icon={myIcon}>\r\n                                        <Popup>\r\n                                            {task.esp_nombre}\r\n                                        </Popup>\r\n                                    </Marker>\r\n                                ))}\r\n                            </MapContainer>\r\n                        )}\r\n                    </Box>\r\n\r\n                    {isTableVisible && (\r\n                        tasks.length > 0 ? (\r\n                            <StyledTableContainer component={Paper} sx={{ width: { xs: '100%', sm: '50%' }, margin: '0', boxSizing: 'border-box', height: '100%' }}>\r\n                                <Table aria-label=\"simple table\" stickyHeader>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <StyledTableHeaderCell>Especie</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Sexo</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Parque Nacional </StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Provincia</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Identificador</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Año identificado</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Colector</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Fecha colectado</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Metodo colectar</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Destino</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Latitud</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Longitud</StyledTableHeaderCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {tasks.map((task) => (\r\n                                            <StyledTableRow key={task.esp_nombre}>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{task.esp_nombre}</StyledTableCell>\r\n                                                <StyledTableCell>{task.esp_sexo}</StyledTableCell>\r\n                                                <StyledTableCell>{task.loc_parque_nacional}</StyledTableCell>\r\n                                                <StyledTableCell>{task.pro_nombre}</StyledTableCell>\r\n                                                <StyledTableCell>{task.ide_apellido}</StyledTableCell>\r\n                                                <StyledTableCell>{task.ide_anio}</StyledTableCell>\r\n                                                <StyledTableCell>{task.col_apellido}</StyledTableCell>\r\n                                                <StyledTableCell>{task.col_fecha}</StyledTableCell>\r\n                                                <StyledTableCell>{task.col_metodo}</StyledTableCell>\r\n                                                <StyledTableCell>{task.col_destino}</StyledTableCell>\r\n                                                <StyledTableCell>{task.loc_latitud}</StyledTableCell>\r\n                                                <StyledTableCell>{task.loc_longitud}</StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </StyledTableContainer>\r\n                        ) : (\r\n                            <Typography variant=\"h6\" color=\"error\"></Typography>\r\n                        )\r\n                    )}\r\n                </MapAndTableContainer>\r\n\r\n            </ContentContainer>\r\n\r\n\r\n        </>\r\n    );\r\n}","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\InicioPage.js",["53","54","55","56","57","58","59","60"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { styled } from \"@mui/system\";\r\nimport { Button, Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nconst StyledForm = styled('form')({\r\n  background: 'rgba(255, 255, 255, 1)',\r\n  padding: '20px',\r\n  borderRadius: '10px',\r\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.5)',\r\n  opacity: 0.8\r\n});\r\n\r\nexport default function TaxonomicList() {\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [setTaxonomic] = useState([]);\r\n\r\n  // Reino\r\n  const [reino, setReino] = useState([]);\r\n  const [selectedReino, setSelectedReino] = useState('');\r\n\r\n  // Filo\r\n  const [filos, setFilos] = useState([]);\r\n  const [selectedFilos, setSelectedFilos] = useState('');\r\n\r\n  // Clase\r\n  const [clases, setClases] = useState([]);\r\n  const [selectedClase, setSelectedClase] = useState('');\r\n\r\n  // Orden\r\n  const [ordenes, setOrdenes] = useState([]);\r\n  const [selectedOrden, setSelectedOrden] = useState('');\r\n\r\n  // Familia\r\n  const [familias, setFamilias] = useState([]);\r\n  const [selectedFamilia, setSelectedFamilia] = useState('');\r\n\r\n  // Genero\r\n  const [generos, setGeneros] = useState([]);\r\n  const [selectedGenero, setSelectedGenero] = useState('');\r\n\r\n  // Especie\r\n  const [especies, setEspecies] = useState([]);\r\n  const [selectedEspecie, setSelectedEspecie] = useState('');\r\n\r\n  const loadTaxos = async (especie) => {\r\n    const response = await fetch(`http://localhost:4000/consult/${especie}`);\r\n    const data = await response.json();\r\n    if (data.message) {\r\n      setOpenDialog(true);\r\n    } else {\r\n      setTaxonomic(data);\r\n    }\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:4000/taxonReino')\r\n      .then(response => response.json())\r\n      .then(data => setReino(data))\r\n      .catch(error => console.error('Error:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedReino !== '') {\r\n      fetch(`http://localhost:4000/taxonFiloByReino/${selectedReino}`)\r\n        .then(response => response.json())\r\n        .then(data => setFilos(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedReino]);\r\n\r\n  useEffect(() => {\r\n    if (selectedFilos !== '') {\r\n      fetch(`http://localhost:4000/taxonClaseByFilo/${selectedFilos}`)\r\n        .then(response => response.json())\r\n        .then(data => setClases(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedFilos]);\r\n\r\n  useEffect(() => {\r\n    if (selectedClase !== '') {\r\n      fetch(`http://localhost:4000/taxonOrdenByClase/${selectedClase}`)\r\n        .then(response => response.json())\r\n        .then(data => setOrdenes(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedClase]);\r\n\r\n  useEffect(() => {\r\n    if (selectedOrden !== '') {\r\n      fetch(`http://localhost:4000/taxonFamiliaByOrden/${selectedOrden}`)\r\n        .then(response => response.json())\r\n        .then(data => setFamilias(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedOrden]);\r\n\r\n  useEffect(() => {\r\n    if (selectedFamilia !== '') {\r\n      fetch(`http://localhost:4000/taxonGeneroByFamilia/${selectedFamilia}`)\r\n        .then(response => response.json())\r\n        .then(data => setGeneros(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedFamilia]);\r\n\r\n  useEffect(() => {\r\n    if (selectedGenero !== '') {\r\n      fetch(`http://localhost:4000/taxonEspecieByGenero/${selectedGenero}`)\r\n        .then(response => response.json())\r\n        .then(data => setEspecies(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedGenero]);\r\n\r\n  useEffect(() => {\r\n    if (selectedEspecie) {\r\n      loadTaxos(selectedEspecie);\r\n    }\r\n  }, [selectedEspecie]);\r\n\r\n  const handleReinoChange = (event) => {\r\n    setSelectedReino(event.target.value);\r\n    setFilos([]);\r\n    setSelectedFilos('');\r\n    setClases([]);\r\n    setSelectedClase('');\r\n    setOrdenes([]);\r\n    setSelectedOrden('');\r\n    setFamilias([]);\r\n    setSelectedFamilia('');\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleFiloChange = (event) => {\r\n    setSelectedFilos(event.target.value);\r\n    setClases([]);\r\n    setSelectedClase('');\r\n    setOrdenes([]);\r\n    setSelectedOrden('');\r\n    setFamilias([]);\r\n    setSelectedFamilia('');\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleClaseChange = (event) => {\r\n    setSelectedClase(event.target.value);\r\n    setOrdenes([]);\r\n    setSelectedOrden('');\r\n    setFamilias([]);\r\n    setSelectedFamilia('');\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleOrdenChange = (event) => {\r\n    setSelectedOrden(event.target.value);\r\n    setFamilias([]);\r\n    setSelectedFamilia('');\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleFamiliaChange = (event) => {\r\n    setSelectedFamilia(event.target.value);\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleGeneroChange = (event) => {\r\n    setSelectedGenero(event.target.value);\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleEspecieChange = (event) => {\r\n    setSelectedEspecie(event.target.value);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (selectedEspecie) {\r\n      loadTaxos(selectedEspecie);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledForm>\r\n        <Typography variant=\"h\" color=\"#000080\" gutterBottom component=\"div\">\r\n          Fitrar por provincias\r\n        </Typography>\r\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between', gap: '10px' }}>\r\n\r\n\r\n          {/* Tao reino*/}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"reino-select-label\">Reino</InputLabel>\r\n            <Select\r\n              labelId=\"reino-select-label\"\r\n              value={selectedReino}\r\n              onChange={handleReinoChange}\r\n            >\r\n              {reino.map((reino, index) => (\r\n                <MenuItem key={index} value={reino.rei_nombre.trim()}>\r\n                  {reino.rei_nombre.trim()}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n\r\n          </FormControl>\r\n\r\n          {/* Taxo filo */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"filo-select-label\">Filo</InputLabel>\r\n            <Select\r\n              labelId=\"filo-select-label\"\r\n              value={selectedFilos}\r\n              onChange={handleFiloChange}\r\n            >\r\n              {filos && filos.length > 0 ? (\r\n                filos.map((filo, index) => (\r\n                  <MenuItem key={index} value={filo.fil_nombre.trim()}>\r\n                    {filo.fil_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay filos disponobles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/*Taxo clase */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"clase-select-label\">Clase</InputLabel>\r\n            <Select\r\n              labelId=\"clase-select-label\"\r\n              value={selectedClase}\r\n              onChange={handleClaseChange}\r\n            >\r\n              {clases && clases.length > 0 ? (\r\n                clases.map((clase, index) => (\r\n                  <MenuItem key={index} value={clase.cla_nombre.trim()}>\r\n                    {clase.cla_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay clases disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Taxo orden*/}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"orden-select-label\">Orden</InputLabel>\r\n            <Select\r\n              labelId=\"orden-select-label\"\r\n              value={selectedOrden}\r\n              onChange={handleOrdenChange}\r\n            >\r\n              {ordenes && ordenes.length > 0 ? (\r\n                ordenes.map((orden, index) => (\r\n                  <MenuItem key={index} value={orden.ord_nombre.trim()}>\r\n                    {orden.ord_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay ordenes disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Taxo familia */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"familia-select-label\">Familia</InputLabel>\r\n            <Select\r\n              labelId=\"familia-select-label\"\r\n              value={selectedFamilia}\r\n              onChange={handleFamiliaChange}\r\n            >\r\n              {familias && familias.length > 0 ? (\r\n                familias.map((familia, index) => (\r\n                  <MenuItem key={index} value={familia.gen_nombre.trim()}>\r\n                    {familia.gen_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay familias disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Taxo genero */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"genero-select-label\">Genero</InputLabel>\r\n            <Select\r\n              labelId=\"genero-select-label\"\r\n              value={selectedGenero}\r\n              onChange={handleGeneroChange}\r\n            >\r\n              {generos && generos.length > 0 ? (\r\n                generos.map((genero, index) => (\r\n                  <MenuItem key={index} value={genero.gen_nombre.trim()}>\r\n                    {genero.gen_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay provincias disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Taxo especie */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"especie-select-label\">Especie</InputLabel>\r\n            <Select\r\n              labelId=\"especie-select-label\"\r\n              value={selectedEspecie}\r\n              onChange={handleEspecieChange}\r\n            >\r\n              {especies && especies.length > 0 ? (\r\n                especies.map((especie, index) => (\r\n                  <MenuItem key={index} value={especie.esp_nombre.trim()}>\r\n                    {especie.esp_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay especies disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>\r\n            Buscar\r\n          </Button>\r\n        </Box>\r\n      </StyledForm>\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"61","severity":1,"message":"62","line":17,"column":66,"nodeType":"63","messageId":"64","endLine":18,"endColumn":11},{"ruleId":"65","severity":1,"message":"66","line":7,"column":16,"nodeType":"67","messageId":"68","endLine":7,"endColumn":26},{"ruleId":"65","severity":1,"message":"69","line":8,"column":8,"nodeType":"67","messageId":"68","endLine":8,"endColumn":18},{"ruleId":"65","severity":1,"message":"70","line":52,"column":9,"nodeType":"67","messageId":"68","endLine":52,"endColumn":17},{"ruleId":"65","severity":1,"message":"71","line":9,"column":58,"nodeType":"67","messageId":"68","endLine":9,"endColumn":67},{"ruleId":"65","severity":1,"message":"72","line":47,"column":7,"nodeType":"67","messageId":"68","endLine":47,"endColumn":24},{"ruleId":"65","severity":1,"message":"73","line":5,"column":8,"nodeType":"67","messageId":"68","endLine":5,"endColumn":14},{"ruleId":"65","severity":1,"message":"74","line":6,"column":8,"nodeType":"67","messageId":"68","endLine":6,"endColumn":21},{"ruleId":"65","severity":1,"message":"75","line":7,"column":8,"nodeType":"67","messageId":"68","endLine":7,"endColumn":21},{"ruleId":"65","severity":1,"message":"76","line":8,"column":8,"nodeType":"67","messageId":"68","endLine":8,"endColumn":25},{"ruleId":"65","severity":1,"message":"77","line":9,"column":8,"nodeType":"67","messageId":"68","endLine":9,"endColumn":19},{"ruleId":"65","severity":1,"message":"78","line":20,"column":10,"nodeType":"67","messageId":"68","endLine":20,"endColumn":20},{"ruleId":"65","severity":1,"message":"79","line":61,"column":9,"nodeType":"67","messageId":"68","endLine":61,"endColumn":26},{"ruleId":"80","severity":1,"message":"81","line":130,"column":6,"nodeType":"82","endLine":130,"endColumn":23,"suggestions":"83"},"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces","no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'SearchIcon' is defined but never used.","'navigate' is assigned a value but never used.","'Typograph' is defined but never used.","'StyledBannerImage' is assigned a value but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'openDialog' is assigned a value but never used.","'handleCloseDialog' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadTaxos'. Either include it or remove the dependency array.","ArrayExpression",["84"],{"desc":"85","fix":"86"},"Update the dependencies array to be: [loadTaxos, selectedEspecie]",{"range":"87","text":"88"},[4144,4161],"[loadTaxos, selectedEspecie]"]