[{"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\index.js":"1","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\App.js":"2","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Navbar.js":"4","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Georeference.js":"5","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\BusquedaPais.js":"6","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Inicio.js":"7","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\BusquedaTaxon.js":"8","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\LogIn.js":"9","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Dashboard.js":"10","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Insertar.js":"11"},{"size":537,"mtime":1687222309352,"results":"12","hashOfConfig":"13"},{"size":1375,"mtime":1688456941613,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1685974357000,"results":"15","hashOfConfig":"13"},{"size":2313,"mtime":1688447920000,"results":"16","hashOfConfig":"13"},{"size":15034,"mtime":1687592945066,"results":"17","hashOfConfig":"13"},{"size":10910,"mtime":1688472916458,"results":"18","hashOfConfig":"13"},{"size":26512,"mtime":1688464235760,"results":"19","hashOfConfig":"13"},{"size":11734,"mtime":1693880957903,"results":"20","hashOfConfig":"13"},{"size":3029,"mtime":1688465825521,"results":"21","hashOfConfig":"13"},{"size":10603,"mtime":1688457236189,"results":"22","hashOfConfig":"13"},{"size":13703,"mtime":1694720998043,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"c3mytq",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"27"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"27"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"27"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\index.js",[],[],[],"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\App.js",[],[],"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Navbar.js",[],[],"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Georeference.js",["63","64"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'; // Importa los componentes de react-leaflet\r\nimport 'leaflet/dist/leaflet.css'; // Importa el CSS de Leaflet\r\nimport { Icon } from 'leaflet';\r\n\r\nimport { styled } from \"@mui/system\";\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, Typography } from '@mui/material';\r\nimport bannerImage from '../imagenes/bannerInicio.jpg';  // Asegúrate de cambiar esto a la ruta correcta de tu imagen\r\nimport { Box, FormControl, InputLabel, Select, MenuItem, Typograph } from '@mui/material';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\ndocument.body.style.height = '100vh';\r\ndocument.getElementById('root').style.height = '100%';\r\n\r\nconst myIcon = new Icon({\r\n    iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-red.png',  // Reemplaza esto con la URL de tu propio icono\r\n    iconSize: [50, 82],  // Ajusta estos números para cambiar el tamaño de los iconos\r\n    iconAnchor: [25, 82],\r\n});\r\n\r\nconst ContentContainer = styled('div')({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '100%', // Esto hará que el contenedor tenga el 100% de la altura de la pantalla\r\n    boxSizing: 'border-box',\r\n});\r\n\r\nconst MapAndTableContainer = styled('div')({\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    height: '100vh', // Esto hará que el contenedor tenga el 50% de la altura de la pantalla\r\n    '@media (max-width:600px)': {\r\n        flexDirection: 'column',\r\n    },\r\n    width: '100%', // Asegura que el contenedor ocupa todo el ancho disponible\r\n    boxSizing: 'border-box', // Asegura que los márgenes y el relleno no añaden al ancho total\r\n});\r\n\r\n\r\n\r\nconst StyledBannerImage = styled('div')({\r\n    backgroundImage: `url(${bannerImage})`,\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center center',\r\n    height: '600px',\r\n    width: '100%',\r\n    opacity: 0.7,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '0 20px',\r\n    color: '#FFFFFF',\r\n    margin: '0 auto',\r\n});\r\n\r\nconst StyledForm = styled('form')({\r\n    background: 'rgba(255, 255, 255, 1)',  // Un fondo blanco con opacidad del 70%.\r\n    padding: '20px',\r\n    borderRadius: '10px',  // Bordes redondeados.\r\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.5)',  // Sombra para darle un poco de profundidad.\r\n    opacity: 0.8\r\n\r\n});\r\n\r\n\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)({\r\n    padding: '4px',\r\n});\r\n\r\nconst StyledTableHeaderCell = styled(TableCell)({\r\n    padding: '8px',\r\n    backgroundColor: '#3f51b5', // Color de fondo del encabezado\r\n    color: '#fff', // Color del texto del encabezado\r\n    fontSize: '1.1em', // Tamaño de la fuente del encabezado\r\n});\r\n\r\nconst StyledTableRow = styled(TableRow)({\r\n    '&:nth-of-type(odd)': {\r\n        backgroundColor: '#f4f6f8', // Puedes cambiar a cualquier color que te guste.\r\n    },\r\n    '&:hover': {\r\n        backgroundColor: 'lightgray',\r\n    },\r\n});\r\n\r\nconst StyledTableContainer = styled(TableContainer)({\r\n    borderRadius: '10px',  // Puedes ajustar el valor a tu gusto.\r\n    boxShadow: '0px 0px 10px 0px rgba(0,0,0,0.2)', // Sombra alrededor de la tabla.\r\n    overflow: 'auto', // Permite el desplazamiento cuando el contenido supera la altura máxima.\r\n    height: '100vh', // Ajusta esto a la altura que desees.\r\n});\r\n\r\nexport default function TaskList() {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const [tasks, setTasks] = useState([]);\r\n    const [countries, setCountries] = useState([]);\r\n    const [selectedCountry, setSelectedCountry] = useState('');\r\n    const [provinces, setProvinces] = useState([]);\r\n    const [selectedProvince, setSelectedProvince] = useState('');\r\n    const [isTableVisible, setIsTableVisible] = useState(false);\r\n\r\n\r\n    const loadTasks = async (province) => {\r\n        const response = await fetch(`http://localhost:4000/consult/${province}`);\r\n        \r\n        const data = await response.json();\r\n        if (data.message) {\r\n            setOpenDialog(true);\r\n            setIsTableVisible(false); // Ocultar la tabla si se abre el diálogo\r\n        } else {\r\n            setTasks(data);\r\n            setIsTableVisible(data.length > 0);\r\n        }\r\n    };\r\n\r\n    const handleCloseDialog = () => {\r\n        setOpenDialog(false);\r\n        setIsTableVisible(false); // Ocultar la tabla cuando se cierra el diálogo\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:4000/country')\r\n            .then(response => response.json())\r\n            .then(data => setCountries(data))\r\n            .catch(error => console.error('Error:', error));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedCountry !== '') {\r\n            fetch(`http://localhost:4000/stateByCountry/${selectedCountry}`)\r\n                .then(response => response.json())\r\n                .then(data => setProvinces(data))\r\n                .catch(error => console.error('Error:', error));\r\n        }\r\n    }, [selectedCountry]);\r\n\r\n    useEffect(() => {\r\n        if (selectedProvince) {\r\n            loadTasks(selectedProvince);\r\n        }\r\n    }, [selectedProvince]);\r\n\r\n    const handleCountryChange = (event) => {\r\n        setSelectedCountry(event.target.value);\r\n        setProvinces([]);\r\n        setSelectedProvince('');\r\n    };\r\n\r\n    const handleProvinceChange = (event) => {\r\n        setSelectedProvince(event.target.value);\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        if (selectedProvince) {\r\n            loadTasks(selectedProvince);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <ContentContainer>\r\n                <Box sx={{ width: '100%', fontSize: '1.2em', margin: '0', boxSizing: 'border-box' }}>\r\n\r\n                    <StyledForm>\r\n                        <Typography variant=\"h\" color=\"#000080\" gutterBottom component=\"div\">\r\n                            Fitrar por provincias\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                            <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n                                <InputLabel id=\"country-select-label\">País</InputLabel>\r\n                                <Select\r\n                                    labelId=\"country-select-label\"\r\n                                    value={selectedCountry}\r\n                                    onChange={handleCountryChange}\r\n                                >\r\n                                    {/* Aquí es donde mapeas los países para generar los elementos de menú */}\r\n                                    {countries.map((country, index) => (\r\n                                        <MenuItem key={index} value={country.pas_nombre.trim()}>\r\n                                            {country.pas_nombre.trim()}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n                                <InputLabel id=\"province-select-label\">Provincia</InputLabel>\r\n                                <Select\r\n                                    labelId=\"province-select-label\"\r\n                                    value={selectedProvince}\r\n                                    onChange={handleProvinceChange}\r\n                                >\r\n                                    {/* Y aquí es donde mapeas las provincias para generar los elementos de menú */}\r\n                                    {provinces && provinces.length > 0 ? (\r\n                                        provinces.map((province, index) => (\r\n                                            <MenuItem key={index} value={province.pro_nombre.trim()}>\r\n                                                {province.pro_nombre.trim()}\r\n                                            </MenuItem>\r\n                                        ))\r\n                                    ) : (\r\n                                        <MenuItem value=\"\">No hay provincias disponibles</MenuItem>\r\n                                    )}\r\n                                </Select>\r\n                                <Dialog\r\n                                    open={openDialog}\r\n                                    onClose={handleCloseDialog}\r\n                                    aria-labelledby=\"alert-dialog-title\"\r\n                                    aria-describedby=\"alert-dialog-description\"\r\n                                >\r\n                                    <DialogTitle id=\"alert-dialog-title\">{\"Advertencia\"}</DialogTitle>\r\n                                    <DialogContent>\r\n                                        <DialogContentText id=\"alert-dialog-description\">\r\n                                            No se encontraron datos para la provincia seleccionada.\r\n                                        </DialogContentText>\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleCloseDialog} color=\"primary\" autoFocus>\r\n                                            Aceptar\r\n                                        </Button>\r\n                                    </DialogActions>\r\n                                </Dialog>\r\n\r\n                            </FormControl>\r\n                            <Button variant=\"contained\" onClick={handleSearch}>Buscar</Button>\r\n                        </Box>\r\n\r\n                    </StyledForm>\r\n                </Box>\r\n                <MapAndTableContainer>\r\n                    <Box sx={{ width: { xs: '100%', sm: '50%' }, fontSize: '1.2em', boxSizing: 'border-box', height: '100%' }}>\r\n                        {tasks.length > 0 && (\r\n                            <MapContainer center={[tasks[0].loc_latitud, tasks[0].loc_longitud]} zoom={13} style={{ height: \"100%\", width: \"100%\" }}>\r\n                                <TileLayer\r\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                />\r\n                                {tasks.map((task, index) => (\r\n                                    <Marker key={index} position={[task.loc_latitud, task.loc_longitud]} icon={myIcon}>\r\n                                        <Popup>\r\n                                            {task.esp_nombre}\r\n                                        </Popup>\r\n                                    </Marker>\r\n                                ))}\r\n                            </MapContainer>\r\n                        )}\r\n                    </Box>\r\n\r\n                    {isTableVisible && (\r\n                        tasks.length > 0 ? (\r\n                            <StyledTableContainer component={Paper} sx={{ width: { xs: '100%', sm: '50%' }, margin: '0', boxSizing: 'border-box', height: '100%' }}>\r\n                                <Table aria-label=\"simple table\" stickyHeader>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <StyledTableHeaderCell>Especie</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Sexo</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Parque Nacional </StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Provincia</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Identificador</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Año identificado</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Colector</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Fecha colectado</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Metodo colectar</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Destino</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Latitud</StyledTableHeaderCell>\r\n                                            <StyledTableHeaderCell>Longitud</StyledTableHeaderCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {tasks.map((task) => (\r\n                                            <StyledTableRow key={task.esp_nombre}>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{task.esp_nombre}</StyledTableCell>\r\n                                                <StyledTableCell>{task.esp_sexo}</StyledTableCell>\r\n                                                <StyledTableCell>{task.loc_parque_nacional}</StyledTableCell>\r\n                                                <StyledTableCell>{task.pro_nombre}</StyledTableCell>\r\n                                                <StyledTableCell>{task.ide_apellido}</StyledTableCell>\r\n                                                <StyledTableCell>{task.ide_anio}</StyledTableCell>\r\n                                                <StyledTableCell>{task.col_apellido}</StyledTableCell>\r\n                                                <StyledTableCell>{task.col_fecha}</StyledTableCell>\r\n                                                <StyledTableCell>{task.col_metodo}</StyledTableCell>\r\n                                                <StyledTableCell>{task.col_destino}</StyledTableCell>\r\n                                                <StyledTableCell>{task.loc_latitud}</StyledTableCell>\r\n                                                <StyledTableCell>{task.loc_longitud}</StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </StyledTableContainer>\r\n                        ) : (\r\n                            <Typography variant=\"h6\" color=\"error\"></Typography>\r\n                        )\r\n                    )}\r\n                </MapAndTableContainer>\r\n\r\n            </ContentContainer>\r\n\r\n\r\n        </>\r\n    );\r\n}","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\BusquedaPais.js",[],[],"C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Inicio.js",["65"],[],"import React, { useState, useEffect } from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport { Grid, Typography, Box, TextField, IconButton, Button } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axios from \"axios\";\nimport { Link } from 'react-router-dom';\nimport { Autocomplete } from '@mui/lab';\n\nconst StyledTreeItem = styled(TreeItem)(({ rootNode, hasData }) => {\n  const borderColor = \"gray\";\n  const nivelColor = \"#808080\"; // Color para el nivel \"Reino\"\n  const itemColor = \"#189FFF\"; // Color para el nombre del elemento\n\n  return {\n    position: \"relative\",\n    \"&:before\": {\n      pointerEvents: \"none\",\n      content: '\"\"',\n      position: \"absolute\",\n      width: 32,\n      left: -23,\n      top: 12,\n      borderBottom: !rootNode ? `1px solid ${borderColor}` : \"none\",\n    },\n    [`& .${treeItemClasses.group}`]: {\n      marginLeft: 16,\n      paddingLeft: 23,\n      borderLeft: `1px solid ${borderColor}`,\n    },\n    \"& .MuiTreeItem-content\": {\n      color: nivelColor,\n      fontWeight: hasData ? \"bold\" : \"inherit\",\n      fontSize: \"30px\",\n    },\n    \"& .MuiTreeItem-iconContainer\": {\n      color: itemColor,\n    },\n    \"& .MuiTreeItem-label\": {\n      whiteSpace: \"nowrap\",\n    },\n    \"& .doi-row\": {\n      cursor: \"text\",\n      userSelect: \"text\",\n    },\n    \"& .doi-text\": {\n      display: \"inline-block\",\n    },\n  };\n});\n\nconst StyledBox = styled(Box)({\n  width: \"90%\",\n  fontSize: \"1.2em\",\n  margin: \"20px auto\",\n  textAlign: \"center\",\n  \"& p\": {\n    textAlign: \"justify\",\n    color: \"#000000\",\n    fontFamily: \"Helvetica Neue\",\n    margin: \"20px 20px\"\n  },\n  maxWidth: \"600px\",\n  color: \"#000000\" // Cambia el color del texto a negro\n});\n\nexport default function FileSystemNavigator() {\n  \n\n  const [showContent, setShowContent] = useState(false);\n\n  const [colorNiveles, setColorNiveles] = useState({});\n  const [colorItems, setColorItems] = useState({});\n\n  const [reinos, setReinos] = useState([]);\n  const [filos, setFilos] = useState([]);\n  const [clases, setClases] = useState([]);\n  const [ordenes, setOrdenes] = useState([]);\n  const [familias, setFamilias] = useState([]);\n  const [generos, setGeneros] = useState([]);\n  const [especies, setEspecies] = useState([]);\n\n  const [reinoElementCounts, setReinoElementCounts] = useState({});\n  const [filoElementCounts, setFiloElementCounts] = useState({});\n  const [claseElementCounts, setClaseElementCounts] = useState({});\n  const [ordenElementCounts, setOrdenElementCounts] = useState({});\n  const [familiaElementCounts, setFamiliaElementCounts] = useState({});\n  const [generoElementCounts, setGeneroElementCounts] = useState({});\n\n  const [noticias, setNoticias] = useState([]);\n\n  const [countryOptions, setCountryOptions] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [noInvestigacionesMessage, setNoInvestigacionesMessage] = useState(\"\");\n  const [speciesOptions, setSpeciesOptions] = useState([]);\n\n\n\n  const colorNivel = \"#00000073\"\n  const colorItem = \"#1890FF\"\n  const tamanoNivel = \"15px\"\n  const tamanoItem = \"14px\"\n  const tipoLetra = \"Helvetica Neue\"\n\n\n  useEffect(() => {\n    // Obtener los reinos al cargar el componente\n    fetchReinos();\n  }, []);\n\n  ///////////////////////////////////   LOGICA ////////////////////////////////////////////////////////\n\n  const fetchReinos = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/reinos\");\n      const reinosData = response.data;\n\n      // Asignar el nivel \"Reino\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const reino of reinosData) {\n        coloresNiveles[reino.rei_id] = colorNivel; // Color gris para el nivel \"Reino\"\n        coloresItems[reino.rei_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada reino\n      const elementCounts = {};\n\n      for (const reino of reinosData) {\n        const response = await axios.get(`http://localhost:4000/filos/${reino.rei_id}`);\n        const filosData = response.data;\n        elementCounts[reino.rei_id] = filosData.length;\n      }\n\n\n      setReinos(reinosData);\n      setReinoElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching reinos data: \", error);\n    }\n  };\n\n  const fetchFilos = async (reinoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/filos/${reinoId}`);\n      const filosData = response.data;\n\n\n      // Asignar el nivel \"Filo\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const filo of filosData) {\n        coloresNiveles[filo.fil_id] = colorNivel;\n        coloresItems[filo.fil_id] = colorItem;\n      }\n\n\n      // Obtener el número de elementos de cada filo\n      const elementCounts = {};\n\n      for (const filo of filosData) {\n        const response = await axios.get(`http://localhost:4000/clases/${filo.fil_id}`);\n        const clasesData = response.data;\n        elementCounts[filo.fil_id] = clasesData.length;\n      }\n\n      setFilos(filosData);\n      setFiloElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching filos data: \", error);\n    }\n  };\n\n\n  const fetchClases = async (filoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/clases/${filoId}`);\n      const clasesData = response.data;\n\n\n      // Asignar el nivel \"Clase\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const clase of clasesData) {\n        coloresNiveles[clase.cla_id] = colorNivel; // Color gris para el nivel \"Clase\"\n        coloresItems[clase.cla_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada clase\n      const elementCounts = {};\n\n      for (const clase of clasesData) {\n        const response = await axios.get(`http://localhost:4000/ordenes/${clase.cla_id}`);\n        const ordenesData = response.data;\n        elementCounts[clase.cla_id] = ordenesData.length;\n      }\n\n      setClases(clasesData);\n      setClaseElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching clases data: \", error);\n    }\n  };\n\n\n  const fetchOrdenes = async (claseId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/ordenes/${claseId}`);\n      const ordenesData = response.data;\n\n\n      // Asignar el nivel \"Orden\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const orden of ordenesData) {\n        coloresNiveles[orden.ord_id] = colorNivel; // Color gris para el nivel \"Orden\"\n        coloresItems[orden.ord_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada orden\n      const elementCounts = {};\n\n      for (const orden of ordenesData) {\n        const response = await axios.get(`http://localhost:4000/familias/${orden.ord_id}`);\n        const familiasData = response.data;\n        elementCounts[orden.ord_id] = familiasData.length;\n      }\n\n      setOrdenes(ordenesData);\n      setOrdenElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching ordenes data: \", error);\n    }\n  };\n\n\n  const fetchFamilias = async (ordenId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/familias/${ordenId}`);\n      const familiasData = response.data;\n\n      // Asignar el nivel \"Familia\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const familia of familiasData) {\n        coloresNiveles[familia.fam_id] = colorNivel; // Color gris para el nivel \"Familia\"\n        coloresItems[familia.fam_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada familia\n      const elementCounts = {};\n\n      for (const familia of familiasData) {\n        const response = await axios.get(`http://localhost:4000/generos/${familia.fam_id}`);\n        const generosData = response.data;\n        elementCounts[familia.fam_id] = generosData.length;\n      }\n\n      setFamilias(familiasData);\n      setFamiliaElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching familias data: \", error);\n    }\n  };\n\n  const fetchGeneros = async (familiaId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/generos/${familiaId}`);\n      const generosData = response.data;\n\n      // Asignar el nivel \"Género\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const genero of generosData) {\n        coloresNiveles[genero.gen_id] = colorNivel; // Color gris para el nivel \"Género\"\n        coloresItems[genero.gen_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n      // Obtener el número de elementos de cada género\n      const elementCounts = {};\n\n      for (const genero of generosData) {\n        const response = await axios.get(`http://localhost:4000/especies/${genero.gen_id}`);\n        const especiesData = response.data;\n        elementCounts[genero.gen_id] = especiesData.length;\n      }\n\n      setGeneros(generosData);\n      setGeneroElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching generos data: \", error);\n    }\n  };\n\n\n  const fetchEspecies = async (generoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/especies/${generoId}`);\n      const especiesData = response.data;\n      // Asignar el nivel \"Especie\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const especie of especiesData) {\n        coloresNiveles[especie.esp_id] = colorNivel; // Color gris para el nivel \"Especie\"\n        coloresItems[especie.esp_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      setEspecies(response.data);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching especies data: \", error);\n    }\n  };\n\n  const fetchCountries = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/country');\n      const countriesData = response.data.map((country) => ({\n        label: country.pas_nombre.trim(),\n        value: country.pas_nombre.trim()\n      }));\n      setCountryOptions(countriesData);\n    } catch (error) {\n      console.error('Error fetching countries data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n\n\n  ///////////////////////////////////     EVENTOS  ////////////////////////////////////////////////////////\n\n\n  const handleCountryChange = (event, value) => {\n    setSelectedCountry(value);\n  };\n\n  const handleReinoClick = (event, nodeId) => {\n    if (nodeId) {\n      const reinoId = nodeId.split(\"-\")[1];\n      const reino = reinos.find((reino) => reino.rei_id.toString() === reinoId);\n      if (reino) {\n        fetchFilos(reinoId);\n        setClases([]); // Reiniciar las clases cuando se cambia de reino\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleFiloClick = (event, nodeId) => {\n    if (nodeId) {\n      const filoId = nodeId.split(\"-\")[1];\n      const filo = filos.find((filo) => filo.fil_id.toString() === filoId);\n      if (filo) {\n        fetchClases(filoId);\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleClaseClick = (event, nodeId) => {\n    if (nodeId) {\n      const claseId = nodeId.split(\"-\")[1];\n      const clase = clases.find((clase) => clase.cla_id.toString() === claseId);\n      if (clase) {\n        fetchOrdenes(claseId);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleOrdenClick = (event, nodeId) => {\n    if (nodeId) {\n      const ordenId = nodeId.split(\"-\")[1];\n      const orden = ordenes.find((orden) => orden.ord_id.toString() === ordenId);\n      if (orden) {\n        fetchFamilias(ordenId);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleFamiliaClick = (event, nodeId) => {\n    if (nodeId) {\n      const familiaId = nodeId.split(\"-\")[1];\n      const familia = familias.find((familia) => familia.fam_id.toString() === familiaId);\n      if (familia) {\n        fetchGeneros(familiaId);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleGeneroClick = (event, nodeId) => {\n    if (nodeId) {\n      const generoId = nodeId.split(\"-\")[1];\n      const genero = generos.find((genero) => genero.gen_id.toString() === generoId);\n      if (genero) {\n        fetchEspecies(generoId);\n      }\n    }\n  };\n\n  const handleButtonClickNoticias = async () => {\n    if (selectedCountry) {\n      setNoticias([]);\n      try {\n        const countryParam = selectedCountry.value.trim();\n        const url = `http://localhost:4000/noticias/${countryParam}`;\n        const response = await axios.get(url);\n        const noticiasData = response.data;\n\n        if (noticiasData.length === 0) {\n          setNoInvestigacionesMessage(\n            \"Por el momento no hay Investigaciones en nuestro sistema con el país seleccionado.\"\n          );\n        } else {\n          setNoticias(noticiasData);\n          setShowContent(!showContent);\n          setNoInvestigacionesMessage(\"\"); // Limpiar el mensaje si hay investigaciones\n        }\n      } catch (error) {\n        console.error(\"Error fetching noticias data: \", error);\n      }\n    }\n  };\n\n  const handleSpeciesSearch = async (event, value) => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/taxonEspecie\");\n      const speciesData = response.data;\n      setSpeciesOptions(speciesData.map((species) => species.esp_nombre.trim()));\n    } catch (error) {\n      console.error(\"Error fetching species data: \", error);\n    }\n  };\n\n\n\n  ///////////////////////////////////   RENDERS  ////////////////////////////////////////////////////////\n\n\n  const renderReinos = () => {\n    return reinos.map((reino) => (\n      <StyledTreeItem\n        key={reino.rei_id}\n        nodeId={`reino-${reino.rei_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[reino.rei_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Reino:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[reino.rei_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{reino.rei_nombre.trim()} ({reinoElementCounts[reino.rei_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleReinoClick(event, `reino-${reino.rei_id}`)}\n        hasData={filos.some((filo) => filo.rei_id === reino.rei_id)}\n      >\n        {/* Renderizar los filos */}\n        {renderFilos(reino.rei_id)}\n      </StyledTreeItem>\n    ));\n  }\n\n  const renderFilos = (reinoId) => {\n    const filosOfReino = filos.filter((filo) => filo.rei_id === reinoId);\n\n    return filosOfReino.map((filo) => (\n      <StyledTreeItem\n        key={filo.fil_id}\n        nodeId={`filo-${filo.fil_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[filo.fil_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Filo:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[filo.fil_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{filo.fil_nombre.trim()} ({filoElementCounts[filo.fil_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleFiloClick(event, `filo-${filo.fil_id}`)}\n        hasData={clases.some((clase) => clase.fil_id === filo.fil_id)}\n      >\n        {/* Renderizar las clases */}\n        {renderClases(filo.fil_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderClases = (filoId) => {\n    const clasesOfFilo = clases.filter((clase) => clase.fil_id === filoId);\n\n    return clasesOfFilo.map((clase) => (\n      <StyledTreeItem\n        key={clase.cla_id}\n        nodeId={`clase-${clase.cla_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[clase.cla_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Clase:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[clase.cla_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{clase.cla_nombre.trim()} ({claseElementCounts[clase.cla_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleClaseClick(event, `clase-${clase.cla_id}`)}\n        hasData={ordenes.some((orden) => orden.cla_id === clase.cla_id)}\n      >\n        {/* Renderizar las órdenes */}\n        {renderOrdenes(clase.cla_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderOrdenes = (claseId) => {\n    const ordenesOfClase = ordenes.filter((orden) => orden.cla_id === claseId);\n\n    return ordenesOfClase.map((orden) => (\n      <StyledTreeItem\n        key={orden.ord_id}\n        nodeId={`orden-${orden.ord_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[orden.ord_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Orden:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[orden.ord_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{orden.ord_nombre.trim()} ({ordenElementCounts[orden.ord_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleOrdenClick(event, `orden-${orden.ord_id}`)}\n        hasData={familias.some((familia) => familia.ord_id === orden.ord_id)}\n      >\n        {/* Renderizar las familias */}\n        {renderFamilias(orden.ord_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderFamilias = (ordenId) => {\n    const familiasOfOrden = familias.filter((familia) => familia.ord_id === ordenId);\n\n    return familiasOfOrden.map((familia) => (\n      <StyledTreeItem\n        key={familia.fam_id}\n        nodeId={`familia-${familia.fam_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[familia.fam_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Familia:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[familia.fam_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{familia.gen_nombre.trim()}  ({familiaElementCounts[familia.fam_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleFamiliaClick(event, `familia-${familia.fam_id}`)}\n        hasData={generos.some((genero) => genero.fam_id === familia.fam_id)}\n      >\n        {/* Renderizar los géneros */}\n        {renderGeneros(familia.fam_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderGeneros = (familiaId) => {\n    const generosOfFamilia = generos.filter((genero) => genero.fam_id === familiaId);\n\n    return generosOfFamilia.map((genero) => (\n      <StyledTreeItem\n        key={genero.gen_id}\n        nodeId={`genero-${genero.gen_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[genero.gen_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Género:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[genero.gen_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{genero.gen_nombre.trim()} ({generoElementCounts[genero.gen_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleGeneroClick(event, `genero-${genero.gen_id}`)}\n        hasData={especies.some((especie) => especie.gen_id === genero.gen_id)}\n      >\n        {/* Renderizar las especies */}\n        {renderEspecies(genero.gen_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderEspecies = (generoId) => {\n    const especiesOfGenero = especies.filter((especie) => especie.gen_id === generoId);\n\n    return especiesOfGenero.map((especie) => (\n      <StyledTreeItem\n        key={especie.esp_id}\n        nodeId={`especie-${especie.esp_id}`}\n        label={\n          <div>\n            <div>\n              <Typography component=\"span\" style={{ color: colorNiveles[especie.esp_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n                Especie:\n              </Typography>{\" \"}\n              <Link\n                to={`https://doi.org/${especie.ref_doi.trim()}`}\n                target=\"_blank\"\n                style={{ color: colorItems[especie.esp_id], fontSize: tamanoItem, fontFamily: tipoLetra }}\n              >\n                {especie.esp_nombre.trim()}\n              </Link>\n            </div>\n            <div className=\"doi-row\">\n              <Typography component=\"span\" style={{ color: colorNiveles[especie.esp_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n                DOI:\n              </Typography>{\" \"}\n              <span className=\"doi-text\" style={{ color: colorItems[especie.esp_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{especie.ref_doi.trim()}</span>\n            </div>\n          </div>\n        }\n      />\n    ));\n\n  };\n\n\n  ///////////////////////////////////   GRAFICA  ////////////////////////////////////////////////////////\n\n\n  return (\n    <Box >\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {/* Descripción */}\n          <StyledBox>\n            <Typography variant=\"h5\" fontFamily=\"Helvetica Neue\">Descripción</Typography>\n            <Typography variant=\"body1\" fontFamily=\"Helvetica Neue\">\n              Nuestro sitio web es una plataforma diseñada para facilitar la\n              georreferenciación de datos de especies. Con su interfaz fácil de usar\n              y su funcionalidad avanzada, permite a los investigadores,\n              administradores y usuarios administrar y analizar de manera eficiente\n              la información sobre especies.\n            </Typography>\n          </StyledBox>\n        </Grid>\n        <Grid item xs={12}>\n          {/* Contenedor del Árbol y Trabajo académico */}\n          <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <StyledBox>\n                <Typography variant=\"h6\">Árbol Filogenético</Typography>\n                <Autocomplete\n                  options={speciesOptions}\n                  getOptionLabel={(option) => option}\n                  renderInput={(params) => (\n                    <TextField {...params} label=\"Especie\" variant=\"outlined\" />\n                  )}\n                  onInputChange={handleSpeciesSearch}\n                />\n              </StyledBox>\n              {/* Árbol filogenético */}\n              <TreeView\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n                sx={{ height: 240, flexGrow: 1, marginLeft: \"60px\" }}\n              >\n                {/* Renderizar los reinos */}\n                {renderReinos()}\n              </TreeView>\n            </Grid>\n            <Grid item xs={8}>\n              {/* Trabajo académico */}\n              <Box >\n                <StyledBox>\n                  <Typography variant=\"h6\">Investigaciones</Typography>\n                  {/* Contenido del trabajo académico */}\n\n                  <Autocomplete\n                    value={selectedCountry}\n                    onChange={handleCountryChange}\n                    options={countryOptions}\n                    getOptionLabel={(option) => option.label}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Seleccionar País\"\n                        variant=\"outlined\"\n                        size=\"small\"\n                        fullWidth\n                        sx={{ width: '50%', fontSize: '12px' }}\n                        InputProps={{\n                          ...params.InputProps,\n                          endAdornment: (\n                            <>\n                              {params.InputProps.endAdornment}\n                              <IconButton>\n                                <SearchIcon onClick={handleButtonClickNoticias} />\n                              </IconButton>\n                            </>\n                          )\n                        }}\n                      />\n                    )}\n                  />\n                  <Typography variant=\"body2\" color=\"error\">\n                    {noInvestigacionesMessage}\n                  </Typography>\n\n                  {showContent && (\n                    <>\n                      {noticias.map((noticia, index) => (\n                        <div key={index}>\n                          <Link to={`https://doi.org/${noticia.ref_doi}`} target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: \"none\" }}>\n                            <Typography variant=\"h6\" style={{ fontSize: \"14px\", fontWeight: \"bold\", color: \"#333333\", fontFamily: \"Helvetica Neue\", textTransform: \"uppercase\", marginBottom: \"20px\" }}>\n                              {noticia.ref_titulo}\n                            </Typography>\n                          </Link>\n                          <Typography variant=\"body1\" style={{ textAlign: \"justify\", fontSize: \"14px\", color: \"#666666\", fontFamily: \"Helvetica Neue\", marginBottom: \"20px\" }}>\n                            {noticia.ref_resumen}\n                          </Typography>\n                        </div>\n                      ))}\n                    </>\n                  )}\n\n                </StyledBox>\n              </Box>\n            </Grid>\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Box>\n  );\n\n}\n","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\BusquedaTaxon.js",["66","67","68","69","70","71","72","73"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { styled } from \"@mui/system\";\r\nimport { Button, Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nconst StyledForm = styled('form')({\r\n  background: 'rgba(255, 255, 255, 1)',\r\n  padding: '20px',\r\n  borderRadius: '10px',\r\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.5)',\r\n  opacity: 0.8\r\n});\r\n\r\nexport default function TaxonomicList() {\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [setTaxonomic] = useState([]);\r\n\r\n  // Reino\r\n  const [reino, setReino] = useState([]);\r\n  const [selectedReino, setSelectedReino] = useState('');\r\n\r\n  // Filo\r\n  const [filos, setFilos] = useState([]);\r\n  const [selectedFilos, setSelectedFilos] = useState('');\r\n\r\n  // Clase\r\n  const [clases, setClases] = useState([]);\r\n  const [selectedClase, setSelectedClase] = useState('');\r\n\r\n  // Orden\r\n  const [ordenes, setOrdenes] = useState([]);\r\n  const [selectedOrden, setSelectedOrden] = useState('');\r\n\r\n  // Familia\r\n  const [familias, setFamilias] = useState([]);\r\n  const [selectedFamilia, setSelectedFamilia] = useState('');\r\n\r\n  // Genero\r\n  const [generos, setGeneros] = useState([]);\r\n  const [selectedGenero, setSelectedGenero] = useState('');\r\n\r\n  // Especie\r\n  const [especies, setEspecies] = useState([]);\r\n  const [selectedEspecie, setSelectedEspecie] = useState('');\r\n\r\n  const loadTaxos = async (especie) => {\r\n    const response = await fetch(`http://localhost:4000/consult/${especie}`);\r\n    const data = await response.json();\r\n    if (data.message) {\r\n      setOpenDialog(true);\r\n    } else {\r\n      setTaxonomic(data);\r\n    }\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:4000/taxonReino')\r\n      .then(response => response.json())\r\n      .then(data => setReino(data))\r\n      .catch(error => console.error('Error:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedReino !== '') {\r\n      fetch(`http://localhost:4000/taxonFiloByReino/${selectedReino}`)\r\n        .then(response => response.json())\r\n        .then(data => setFilos(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedReino]);\r\n\r\n  useEffect(() => {\r\n    if (selectedFilos !== '') {\r\n      fetch(`http://localhost:4000/taxonClaseByFilo/${selectedFilos}`)\r\n        .then(response => response.json())\r\n        .then(data => setClases(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedFilos]);\r\n\r\n  useEffect(() => {\r\n    if (selectedClase !== '') {\r\n      fetch(`http://localhost:4000/taxonOrdenByClase/${selectedClase}`)\r\n        .then(response => response.json())\r\n        .then(data => setOrdenes(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedClase]);\r\n\r\n  useEffect(() => {\r\n    if (selectedOrden !== '') {\r\n      fetch(`http://localhost:4000/taxonFamiliaByOrden/${selectedOrden}`)\r\n        .then(response => response.json())\r\n        .then(data => setFamilias(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedOrden]);\r\n\r\n  useEffect(() => {\r\n    if (selectedFamilia !== '') {\r\n      fetch(`http://localhost:4000/taxonGeneroByFamilia/${selectedFamilia}`)\r\n        .then(response => response.json())\r\n        .then(data => setGeneros(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedFamilia]);\r\n\r\n  useEffect(() => {\r\n    if (selectedGenero !== '') {\r\n      fetch(`http://localhost:4000/taxonEspecieByGenero/${selectedGenero}`)\r\n        .then(response => response.json())\r\n        .then(data => setEspecies(data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedGenero]);\r\n\r\n  useEffect(() => {\r\n    if (selectedEspecie) {\r\n      loadTaxos(selectedEspecie);\r\n    }\r\n  }, [selectedEspecie]);\r\n\r\n  const handleReinoChange = (event) => {\r\n    setSelectedReino(event.target.value);\r\n    setFilos([]);\r\n    setSelectedFilos('');\r\n    setClases([]);\r\n    setSelectedClase('');\r\n    setOrdenes([]);\r\n    setSelectedOrden('');\r\n    setFamilias([]);\r\n    setSelectedFamilia('');\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleFiloChange = (event) => {\r\n    setSelectedFilos(event.target.value);\r\n    setClases([]);\r\n    setSelectedClase('');\r\n    setOrdenes([]);\r\n    setSelectedOrden('');\r\n    setFamilias([]);\r\n    setSelectedFamilia('');\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleClaseChange = (event) => {\r\n    setSelectedClase(event.target.value);\r\n    setOrdenes([]);\r\n    setSelectedOrden('');\r\n    setFamilias([]);\r\n    setSelectedFamilia('');\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleOrdenChange = (event) => {\r\n    setSelectedOrden(event.target.value);\r\n    setFamilias([]);\r\n    setSelectedFamilia('');\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleFamiliaChange = (event) => {\r\n    setSelectedFamilia(event.target.value);\r\n    setGeneros([]);\r\n    setSelectedGenero('');\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleGeneroChange = (event) => {\r\n    setSelectedGenero(event.target.value);\r\n    setEspecies([]);\r\n    setSelectedEspecie('');\r\n  };\r\n\r\n  const handleEspecieChange = (event) => {\r\n    setSelectedEspecie(event.target.value);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (selectedEspecie) {\r\n      loadTaxos(selectedEspecie);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledForm>\r\n        <Typography variant=\"h\" color=\"#000080\" gutterBottom component=\"div\">\r\n          Fitrar por provincias\r\n        </Typography>\r\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between', gap: '10px' }}>\r\n\r\n\r\n          {/* Tao reino*/}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"reino-select-label\">Reino</InputLabel>\r\n            <Select\r\n              labelId=\"reino-select-label\"\r\n              value={selectedReino}\r\n              onChange={handleReinoChange}\r\n            >\r\n              {reino.map((reino, index) => (\r\n                <MenuItem key={index} value={reino.rei_nombre.trim()}>\r\n                  {reino.rei_nombre.trim()}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n\r\n          </FormControl>\r\n\r\n          {/* Taxo filo */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"filo-select-label\">Filo</InputLabel>\r\n            <Select\r\n              labelId=\"filo-select-label\"\r\n              value={selectedFilos}\r\n              onChange={handleFiloChange}\r\n            >\r\n              {filos && filos.length > 0 ? (\r\n                filos.map((filo, index) => (\r\n                  <MenuItem key={index} value={filo.fil_nombre.trim()}>\r\n                    {filo.fil_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay filos disponobles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/*Taxo clase */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"clase-select-label\">Clase</InputLabel>\r\n            <Select\r\n              labelId=\"clase-select-label\"\r\n              value={selectedClase}\r\n              onChange={handleClaseChange}\r\n            >\r\n              {clases && clases.length > 0 ? (\r\n                clases.map((clase, index) => (\r\n                  <MenuItem key={index} value={clase.cla_nombre.trim()}>\r\n                    {clase.cla_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay clases disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Taxo orden*/}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"orden-select-label\">Orden</InputLabel>\r\n            <Select\r\n              labelId=\"orden-select-label\"\r\n              value={selectedOrden}\r\n              onChange={handleOrdenChange}\r\n            >\r\n              {ordenes && ordenes.length > 0 ? (\r\n                ordenes.map((orden, index) => (\r\n                  <MenuItem key={index} value={orden.ord_nombre.trim()}>\r\n                    {orden.ord_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay ordenes disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Taxo familia */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"familia-select-label\">Familia</InputLabel>\r\n            <Select\r\n              labelId=\"familia-select-label\"\r\n              value={selectedFamilia}\r\n              onChange={handleFamiliaChange}\r\n            >\r\n              {familias && familias.length > 0 ? (\r\n                familias.map((familia, index) => (\r\n                  <MenuItem key={index} value={familia.gen_nombre.trim()}>\r\n                    {familia.gen_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay familias disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Taxo genero */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"genero-select-label\">Genero</InputLabel>\r\n            <Select\r\n              labelId=\"genero-select-label\"\r\n              value={selectedGenero}\r\n              onChange={handleGeneroChange}\r\n            >\r\n              {generos && generos.length > 0 ? (\r\n                generos.map((genero, index) => (\r\n                  <MenuItem key={index} value={genero.gen_nombre.trim()}>\r\n                    {genero.gen_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay provincias disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Taxo especie */}\r\n          <FormControl variant=\"filled\" sx={{ minWidth: 120, margin: '0 10px' }}>\r\n            <InputLabel id=\"especie-select-label\">Especie</InputLabel>\r\n            <Select\r\n              labelId=\"especie-select-label\"\r\n              value={selectedEspecie}\r\n              onChange={handleEspecieChange}\r\n            >\r\n              {especies && especies.length > 0 ? (\r\n                especies.map((especie, index) => (\r\n                  <MenuItem key={index} value={especie.esp_nombre.trim()}>\r\n                    {especie.esp_nombre.trim()}\r\n                  </MenuItem>\r\n                ))\r\n              ) : (\r\n                <MenuItem value=\"\">No hay especies disponibles</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>\r\n            Buscar\r\n          </Button>\r\n        </Box>\r\n      </StyledForm>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\LogIn.js",["74"],[],"import React, { useState } from 'react';\r\nimport { TextField, Button, Typography, Box, Container, CssBaseline } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    background: {\r\n      default: '#cfd8dc',\r\n    },\r\n  },\r\n});\r\n\r\nconst IconTextField = styled(TextField)({\r\n  // Estilos personalizados\r\n});\r\n\r\nfunction Login({ onUpdateLinkText }) {\r\n  const [correoElectronico, setCorreoElectronico] = useState('');\r\n  const [contrasena, setContrasena] = useState('');\r\n  const [credencialesValidas, setCredencialesValidas] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  const handleCorreoElectronicoChange = (event) => {\r\n    setCorreoElectronico(event.target.value);\r\n  };\r\n\r\n  const handleContrasenaChange = (event) => {\r\n    setContrasena(event.target.value);\r\n  };\r\n\r\n  const handleInicioSesionClick = () => {\r\n    if (correoElectronico === 'jaraque@puce.edu.ec' && contrasena === 'jnc18241') {\r\n      navigate('/inicio/JuanAraque');\r\n      onUpdateLinkText(); // Llamada a la función pasada como prop para actualizar el texto del enlace\r\n    } else {\r\n      setCredencialesValidas(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container component=\"main\" maxWidth=\"xs\" sx={{ bgcolor: '#f5f5f5', py: 5, borderRadius: 2, my: 8, boxShadow: 3 }}>\r\n        <CssBaseline />\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', margin: 'auto', mt: 5, gap: 2 }}>\r\n          <Typography variant=\"h4\" align=\"center\" gutterBottom>Iniciar sesión</Typography>\r\n          <Typography variant=\"body2\" align=\"justify\" sx={{ mt: 2, mb: 2, color: '#777' }}>\r\n            Por favor, ingrese sus credenciales para ingresar al sistema de georreferenciación.\r\n          </Typography>\r\n          <IconTextField\r\n            label=\"Correo Electrónico\"\r\n            type=\"email\"\r\n            required\r\n            value={correoElectronico}\r\n            onChange={handleCorreoElectronicoChange}\r\n            InputProps={{\r\n              startAdornment: <MailOutlineIcon color=\"action\" />,\r\n            }}\r\n          />\r\n          <IconTextField\r\n            label=\"Contraseña\"\r\n            type=\"password\"\r\n            required\r\n            value={contrasena}\r\n            onChange={handleContrasenaChange}\r\n            InputProps={{\r\n              startAdornment: <LockOutlinedIcon color=\"action\" />,\r\n            }}\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            sx={{ mt: 3, fontSize: '1.2rem' }}\r\n            onClick={handleInicioSesionClick}\r\n          >\r\n            Iniciar sesión\r\n          </Button>\r\n        </Box>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Dashboard.js",["75","76"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Button, ButtonGroup, Typography, Paper, Container, CssBaseline, Box, Link, Avatar } from '@mui/material';\r\nimport { styled } from '@mui/system';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport Table from '@mui/material/Table';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport SupervisorAccountIcon from '@mui/icons-material/SupervisorAccount';\r\nimport ScienceIcon from '@mui/icons-material/Science';\r\nimport BuildIcon from '@mui/icons-material/Build';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    color: theme.palette.common.black,\r\n    border: '1px solid #ddd',\r\n    padding: '0.5rem',\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    '&:nth-of-type(odd)': {\r\n        backgroundColor: '#ffffff',\r\n    },\r\n    '&:nth-of-type(even)': {\r\n        backgroundColor: '#f5f5f5',\r\n    },\r\n}));\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    margin: '0 5px',\r\n}));\r\n\r\nconst users = [\r\n    { id: 1, name: 'Juan Araque', email: 'jaraque129@puce.edu.ec', avatar: 'https://example.com/avatar1.jpg' },\r\n    { id: 2, name: 'Usuario Puce', email: 'usuario@puce.edu.ec', avatar: 'https://example.com/avatar2.jpg' },\r\n    { id: 3, name: 'Usuario Puce', email: 'usuario@puce.edu.ec', avatar: 'https://example.com/avatar3.jpg' },\r\n    { id: 4, name: 'Usuario Puce', email: 'usuario@puce.edu.ec', avatar: 'https://example.com/avatar4.jpg' },\r\n    { id: 5, name: 'Usuario Puce', email: 'usuario@puce.edu.ec', avatar: 'https://example.com/avatar5.jpg' },\r\n];\r\n\r\nconst theme = createTheme({\r\n    typography: {\r\n        fontFamily: 'Helvetic', // Cambia \"Roboto, sans-serif\" por la fuente que desees\r\n    },\r\n});\r\n\r\nfunction RoleAssignment() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n\r\n    useEffect(() => {\r\n        // Obtener el estado almacenado en la caché\r\n        const cachedButtonState = localStorage.getItem(\"buttonState\");\r\n\r\n        // Verificar si existe un estado almacenado\r\n        if (cachedButtonState) {\r\n            // Parsear el estado almacenado en formato JSON\r\n            const parsedButtonState = JSON.parse(cachedButtonState);\r\n\r\n            // Actualizar el estado de los botones según el estado almacenado\r\n            const newButtonColors = parsedButtonState.map((state) => (state ? \"secondary\" : \"primary\"));\r\n            setButtonColors(newButtonColors);\r\n        }\r\n    }, []);\r\n\r\n\r\n    const [buttonColors, setButtonColors] = useState(Array(users.length * 3).fill(\"primary\"));\r\n\r\n    const handleClick = (index) => {\r\n        const newButtonColors = [...buttonColors];\r\n        newButtonColors[index] = newButtonColors[index] === \"primary\" ? \"secondary\" : \"primary\";\r\n        setButtonColors(newButtonColors);\r\n    };\r\n\r\n    const handleGuardarClick = () => {\r\n        // Obtener el estado actual de los botones\r\n        const buttonState = buttonColors.map((color) => (color === \"primary\" ? false : true));\r\n\r\n        // Guardar el estado de los botones en la caché\r\n        localStorage.setItem(\"buttonState\", JSON.stringify(buttonState));\r\n\r\n        console.log(\"Cambios guardados\");\r\n    };\r\n\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div>\r\n                <Box sx={{ display: 'flex', gap: '1rem' }}>\r\n                    {/* Tabla a la izquierda */}\r\n                    {/* ... código existente ... */}\r\n                    <Box sx={{ width: '20%' }}>\r\n                        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" sx={{ py: 2, my: 2 }} >\r\n                            <Avatar alt={users[0].name} src={users[0].avatar} sx={{ width: 150, height: 150, mb: 1 }} />\r\n                            <Typography variant=\"subtitle1\" align=\"center\" fontWeight=\"bold\">Rol: Administrador {users[0].role}</Typography>\r\n                            <Typography variant=\"subtitle1\" align=\"center\" fontWeight=\"bold\">Nombre: {users[0].name}</Typography>\r\n                            <Typography variant=\"subtitle1\" align=\"center\" fontWeight=\"bold\">Correo: {users[0].email}</Typography>\r\n                        </Box>\r\n\r\n                        <Box sx={{ mt: 4 }}>\r\n                            <Typography variant=\"subtitle1\" align=\"center\">\r\n                                <Link onClick={() => navigate('/inicio/JuanAraque/insertData')} href=\"#\">Administrar Especies</Link>\r\n                            </Typography>\r\n\r\n                            <Typography variant=\"subtitle1\" align=\"center\">\r\n                                <Link to=\"/asignacion-roles\">Asignación de Roles</Link>\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\" align=\"center\">\r\n                                <Link to=\"/eliminar-usuarios\">Eliminar Usuarios</Link>\r\n                            </Typography>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    {/* Tabla a la derecha */}\r\n                    <Container component=\"main\" maxWidth=\"lg\" sx={{ py: 2, my: 2, boxShadow: 3 }}>\r\n                        <CssBaseline />\r\n\r\n                        {/* ... código existente ... */}\r\n                        <Typography variant=\"h5\" align=\"center\" gutterBottom>Asignación de Roles</Typography>\r\n\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                            Se ha implementado la funcionalidad de asignación de roles en el sistema, brindando a los administradores la capacidad de asignar roles específicos a los usuarios. Los roles disponibles son:\r\n                        </Typography>\r\n\r\n                        <ul>\r\n                            <li>\r\n                                <Typography variant=\"body1\" component=\"span\" fontWeight=\"bold\">Administrador:</Typography> este rol tiene acceso completo a todas las características y funcionalidades del sistema. Como administrador, serías responsable de administrar las cuentas de los usuarios, asignar funciones y permisos, y realizar tareas administrativas, como copias de seguridad de datos y mantenimiento del sistema.\r\n                            </li>\r\n                            <li>\r\n                                <Typography variant=\"body1\" component=\"span\" fontWeight=\"bold\">Investigador:</Typography> este rol tendría acceso a las funciones de administración de datos del sistema, incluida la capacidad de agregar, modificar y eliminar datos de insectos.\r\n                            </li>\r\n                            <li>\r\n                                <Typography variant=\"body1\" component=\"span\" fontWeight=\"bold\">Técnico:</Typography> este rol sería responsable de administrar los componentes de hardware y software del sistema. Como técnico, usarías las funciones de monitoreo y resolución de problemas del sistema para garantizar que el sistema funcione sin problemas y para abordar cualquier problema que surja.\r\n                            </li>\r\n                        </ul>\r\n\r\n                        <TableContainer component={Paper} sx={{ backgroundColor: 'transparent' }}>\r\n                            <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell style={{ backgroundColor: '#f5f5f5', fontWeight: 'bold', fontFamily: 'Helvetica Neue' }}>Usuarios</StyledTableCell>\r\n                                        <StyledTableCell style={{ backgroundColor: '#f5f5f5', fontWeight: 'bold', fontFamily: 'Helvetica Neue' }}>Email</StyledTableCell>\r\n                                        <StyledTableCell style={{ backgroundColor: '#f5f5f5', fontWeight: 'bold', fontFamily: 'Helvetica Neue' }}>Asignar Rol</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {users.map((user, index) => (\r\n                                        <StyledTableRow key={user.id}>\r\n                                            <StyledTableCell component=\"th\" scope=\"row\" style={{ fontFamily: 'Helvetica Neue' }}>\r\n                                                {/* ... código existente ... */}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell style={{ fontFamily: 'Helvetica Neue' }}>{user.email}</StyledTableCell>\r\n                                            <StyledTableCell style={{ fontFamily: 'Helvetica Neue' }}>\r\n                                                <ButtonGroup variant=\"text\" aria-label=\"outlined primary button group\">\r\n                                                    <StyledButton startIcon={<SupervisorAccountIcon />} variant={buttonColors[index * 3] === \"primary\" ? \"outlined\" : \"contained\"} color=\"primary\" onClick={() => handleClick(index * 3)}>Administrador</StyledButton>\r\n                                                    <StyledButton startIcon={<ScienceIcon />} variant={buttonColors[index * 3 + 1] === \"primary\" ? \"outlined\" : \"contained\"} color=\"primary\" onClick={() => handleClick(index * 3 + 1)}>Investigador</StyledButton>\r\n                                                    <StyledButton startIcon={<BuildIcon />} variant={buttonColors[index * 3 + 2] === \"primary\" ? \"outlined\" : \"contained\"} color=\"primary\" onClick={() => handleClick(index * 3 + 2)}>Técnico</StyledButton>\r\n                                                </ButtonGroup>\r\n                                            </StyledTableCell>\r\n                                        </StyledTableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <Button variant=\"contained\" color=\"primary\" startIcon={<SaveIcon />} style={{ marginTop: '2px', marginBottom: '1px', float: 'right' }} onClick={handleGuardarClick}>Guardar</Button>\r\n                        </TableContainer>\r\n                    </Container>\r\n                </Box>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default RoleAssignment;\r\n","C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\src\\components\\Insertar.js",["77","78","79","80","81","82","83","84","85","86","87"],[],{"ruleId":"88","severity":1,"message":"89","line":9,"column":58,"nodeType":"90","messageId":"91","endLine":9,"endColumn":67},{"ruleId":"88","severity":1,"message":"92","line":47,"column":7,"nodeType":"90","messageId":"91","endLine":47,"endColumn":24},{"ruleId":"88","severity":1,"message":"93","line":7,"column":56,"nodeType":"90","messageId":"91","endLine":7,"endColumn":62},{"ruleId":"88","severity":1,"message":"94","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":14},{"ruleId":"88","severity":1,"message":"95","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":21},{"ruleId":"88","severity":1,"message":"96","line":7,"column":8,"nodeType":"90","messageId":"91","endLine":7,"endColumn":21},{"ruleId":"88","severity":1,"message":"97","line":8,"column":8,"nodeType":"90","messageId":"91","endLine":8,"endColumn":25},{"ruleId":"88","severity":1,"message":"98","line":9,"column":8,"nodeType":"90","messageId":"91","endLine":9,"endColumn":19},{"ruleId":"88","severity":1,"message":"99","line":20,"column":10,"nodeType":"90","messageId":"91","endLine":20,"endColumn":20},{"ruleId":"88","severity":1,"message":"100","line":61,"column":9,"nodeType":"90","messageId":"91","endLine":61,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":130,"column":6,"nodeType":"103","endLine":130,"endColumn":23,"suggestions":"104"},{"ruleId":"88","severity":1,"message":"105","line":24,"column":10,"nodeType":"90","messageId":"91","endLine":24,"endColumn":29},{"ruleId":"88","severity":1,"message":"106","line":4,"column":8,"nodeType":"90","messageId":"91","endLine":4,"endColumn":14},{"ruleId":"88","severity":1,"message":"107","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":15},{"ruleId":"88","severity":1,"message":"108","line":4,"column":30,"nodeType":"90","messageId":"91","endLine":4,"endColumn":33},{"ruleId":"88","severity":1,"message":"94","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":14},{"ruleId":"88","severity":1,"message":"95","line":7,"column":8,"nodeType":"90","messageId":"91","endLine":7,"endColumn":21},{"ruleId":"88","severity":1,"message":"96","line":8,"column":8,"nodeType":"90","messageId":"91","endLine":8,"endColumn":21},{"ruleId":"88","severity":1,"message":"97","line":9,"column":8,"nodeType":"90","messageId":"91","endLine":9,"endColumn":25},{"ruleId":"88","severity":1,"message":"98","line":10,"column":8,"nodeType":"90","messageId":"91","endLine":10,"endColumn":19},{"ruleId":"88","severity":1,"message":"99","line":28,"column":10,"nodeType":"90","messageId":"91","endLine":28,"endColumn":20},{"ruleId":"88","severity":1,"message":"109","line":29,"column":10,"nodeType":"90","messageId":"91","endLine":29,"endColumn":22},{"ruleId":"88","severity":1,"message":"110","line":58,"column":10,"nodeType":"90","messageId":"91","endLine":58,"endColumn":18},{"ruleId":"88","severity":1,"message":"100","line":69,"column":9,"nodeType":"90","messageId":"91","endLine":69,"endColumn":26},{"ruleId":"88","severity":1,"message":"111","line":217,"column":27,"nodeType":"90","messageId":"91","endLine":217,"endColumn":45},"no-unused-vars","'Typograph' is defined but never used.","Identifier","unusedVar","'StyledBannerImage' is assigned a value but never used.","'Button' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'openDialog' is assigned a value but never used.","'handleCloseDialog' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadTaxos'. Either include it or remove the dependency array.","ArrayExpression",["112"],"'credencialesValidas' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Box' is defined but never used.","'setTaxonomic' is assigned a value but never used.","'especies' is assigned a value but never used.","'setSelectedOptions' is assigned a value but never used.",{"desc":"113","fix":"114"},"Update the dependencies array to be: [loadTaxos, selectedEspecie]",{"range":"115","text":"116"},[4144,4161],"[loadTaxos, selectedEspecie]"]