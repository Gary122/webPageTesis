{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Animated, I18nManager, Platform, StyleSheet, TextInput as NativeTextInput, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\nimport TextInputAdornment from './Adornment/TextInputAdornment';\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport { ADORNMENT_SIZE, LABEL_PADDING_TOP_DENSE, LABEL_WIGGLE_X_OFFSET, MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_Y_OFFSET, MIN_DENSE_HEIGHT, MIN_DENSE_HEIGHT_WL } from './constants';\nimport { adjustPaddingFlat, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding, calculateInputHeight, calculateLabelTopPosition, calculatePadding, getConstants, getFlatInputColors } from './helpers';\nimport InputLabel from './Label/InputLabel';\nconst TextInputFlat = _ref => {\n  let {\n    disabled = false,\n    editable = true,\n    label,\n    error = false,\n    selectionColor,\n    underlineColor,\n    underlineStyle,\n    activeUnderlineColor,\n    textColor,\n    dense,\n    style,\n    theme,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    multiline = false,\n    parentState,\n    innerRef,\n    onFocus,\n    forceFocus,\n    onBlur,\n    onChangeText,\n    onLayoutAnimatedText,\n    onLeftAffixLayoutChange,\n    onRightAffixLayoutChange,\n    left,\n    right,\n    placeholderTextColor,\n    testID = 'text-input-flat',\n    contentStyle,\n    ...rest\n  } = _ref;\n  const isAndroid = Platform.OS === 'android';\n  const {\n    colors,\n    isV3,\n    roundness\n  } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n  const {\n    LABEL_PADDING_TOP,\n    FLAT_INPUT_OFFSET,\n    MIN_HEIGHT\n  } = getConstants(isV3);\n  const {\n    fontSize: fontSizeStyle,\n    lineHeight,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = StyleSheet.flatten(style) || {};\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  const isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right\n  });\n  let {\n    paddingLeft,\n    paddingRight\n  } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n    isV3\n  });\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n  const {\n    leftLayout,\n    rightLayout\n  } = parentState;\n  const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig,\n    rightAffixWidth,\n    leftAffixWidth,\n    paddingHorizontal,\n    inputOffset: FLAT_INPUT_OFFSET,\n    mode: InputMode.Flat,\n    isV3\n  });\n  const {\n    inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor,\n    backgroundColor\n  } = getFlatInputColors({\n    underlineColor,\n    activeUnderlineColor,\n    textColor,\n    disabled,\n    error,\n    theme\n  });\n  const containerStyle = {\n    backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n  const baseLabelTranslateX = (I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.getConstants().isRTL ? -1 : 1) * paddingLeft;\n  const minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  const pad = calculatePadding(paddingSettings);\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad\n  });\n  const baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  const placeholderOpacity = hasActiveOutline ? parentState.labeled : parentState.labelLayout.measured ? 1 : 0;\n  const minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  const flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n  const leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition({\n    height: flatHeight,\n    ...paddingFlat,\n    affixHeight: leftLayout.height\n  }) : null;\n  const rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition({\n    height: flatHeight,\n    ...paddingFlat,\n    affixHeight: rightLayout.height\n  }) : null;\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    labelError: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingLeft: isAndroid ? I18nManager.isRTL ? paddingRight : paddingLeft : paddingLeft,\n    paddingRight: isAndroid ? I18nManager.isRTL ? paddingLeft : paddingRight : paddingRight,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange\n  };\n  let adornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: {\n        ...font,\n        fontSize,\n        lineHeight,\n        fontWeight\n      },\n      visible: parentState.labeled\n    };\n  }\n  return /*#__PURE__*/React.createElement(View, {\n    style: [containerStyle, viewStyle]\n  }, /*#__PURE__*/React.createElement(Underline, {\n    style: underlineStyle,\n    hasActiveOutline: hasActiveOutline,\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor,\n    theme: theme\n  }), /*#__PURE__*/React.createElement(View, {\n    style: [styles.labelContainer, {\n      minHeight\n    }]\n  }, !isAndroid && multiline && !!label && !disabled && /*#__PURE__*/\n  // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n  // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n  React.createElement(View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), label ? /*#__PURE__*/React.createElement(InputLabel, _extends({\n    labeled: parentState.labeled,\n    error: parentState.error,\n    focused: parentState.focused,\n    wiggle: Boolean(parentState.value && labelProps.labelError),\n    labelLayoutMeasured: parentState.labelLayout.measured,\n    labelLayoutWidth: parentState.labelLayout.width\n  }, labelProps)) : null, render === null || render === void 0 ? void 0 : render({\n    testID,\n    ...rest,\n    ref: innerRef,\n    onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor ?? placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus,\n    onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline,\n    style: [styles.input, {\n      paddingLeft,\n      paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, {\n      ...font,\n      fontSize,\n      lineHeight,\n      fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.getConstants().isRTL ? 'right' : 'left'\n    }, Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput, contentStyle]\n  })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps));\n};\nexport default TextInputFlat;\nconst Underline = _ref2 => {\n  let {\n    parentState,\n    error,\n    colors,\n    activeColor,\n    underlineColorCustom,\n    hasActiveOutline,\n    style,\n    theme: themeOverrides\n  } = _ref2;\n  const {\n    isV3\n  } = useInternalTheme(themeOverrides);\n  let backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors === null || colors === void 0 ? void 0 : colors.error;\n  const activeScale = isV3 ? 2 : 1;\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    testID: \"text-input-underline\",\n    style: [styles.underline, isV3 && styles.md3Underline, {\n      backgroundColor,\n      // Underlines is thinner when input is not focused\n      transform: [{\n        scaleY: (isV3 ? hasActiveOutline : parentState.focused) ? activeScale : 0.5\n      }]\n    }, style]\n  });\n};\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  md3Underline: {\n    height: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"names":["React","Animated","I18nManager","Platform","StyleSheet","TextInput","NativeTextInput","View","useInternalTheme","AdornmentSide","AdornmentType","InputMode","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","ADORNMENT_SIZE","LABEL_PADDING_TOP_DENSE","LABEL_WIGGLE_X_OFFSET","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_Y_OFFSET","MIN_DENSE_HEIGHT","MIN_DENSE_HEIGHT_WL","adjustPaddingFlat","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","calculateInputHeight","calculateLabelTopPosition","calculatePadding","getConstants","getFlatInputColors","InputLabel","TextInputFlat","_ref","disabled","editable","label","error","selectionColor","underlineColor","underlineStyle","activeUnderlineColor","textColor","dense","style","theme","render","props","createElement","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","contentStyle","rest","isAndroid","OS","colors","isV3","roundness","font","fonts","bodyLarge","regular","hasActiveOutline","focused","LABEL_PADDING_TOP","FLAT_INPUT_OFFSET","MIN_HEIGHT","fontSize","fontSizeStyle","lineHeight","fontWeight","height","paddingHorizontal","textAlign","viewStyle","flatten","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","mode","Flat","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","backgroundColor","containerStyle","borderTopLeftRadius","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","labelError","placeholderStyle","placeholder","wiggleOffsetX","maxFontSizeMultiplier","opacity","value","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","Underline","labelContainer","pointerEvents","absoluteFill","densePatchContainer","patchContainer","_extends","wiggle","Boolean","labelLayoutMeasured","labelLayoutWidth","ref","underlineColorAndroid","input","color","textAlignVertical","outline","_ref2","themeOverrides","activeScale","underline","md3Underline","transform","scaleY","create","position","bottom","zIndex","paddingTop","paddingBottom","margin"],"sources":["C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\node_modules\\react-native-paper\\src\\components\\TextInput\\TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  I18nManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput as NativeTextInput,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport type { ThemeProp } from 'src/types';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport {\n  ADORNMENT_SIZE,\n  LABEL_PADDING_TOP_DENSE,\n  LABEL_WIGGLE_X_OFFSET,\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_Y_OFFSET,\n  MIN_DENSE_HEIGHT,\n  MIN_DENSE_HEIGHT_WL,\n} from './constants';\nimport {\n  adjustPaddingFlat,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n  calculateInputHeight,\n  calculateLabelTopPosition,\n  calculatePadding,\n  getConstants,\n  getFlatInputColors,\n  Padding,\n} from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport type { ChildTextInputProps, RenderProps } from './types';\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  underlineStyle,\n  activeUnderlineColor,\n  textColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input-flat',\n  contentStyle,\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, isV3, roundness } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const { LABEL_PADDING_TOP, FLAT_INPUT_OFFSET, MIN_HEIGHT } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    lineHeight,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n    isV3,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n      isV3,\n    });\n\n  const {\n    inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor,\n    backgroundColor,\n  } = getFlatInputColors({\n    underlineColor,\n    activeUnderlineColor,\n    textColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const containerStyle = {\n    backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.getConstants().isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) *\n      (I18nManager.getConstants().isRTL ? -1 : 1) *\n      paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? parentState.labeled\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    labelError: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingLeft: isAndroid\n      ? I18nManager.isRTL\n        ? paddingRight\n        : paddingLeft\n      : paddingLeft,\n    paddingRight: isAndroid\n      ? I18nManager.isRTL\n        ? paddingLeft\n        : paddingRight\n      : paddingRight,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    opacity:\n      parentState.value || parentState.focused\n        ? parentState.labelLayout.measured\n          ? 1\n          : 0\n        : 1,\n  };\n\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, lineHeight, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        style={underlineStyle}\n        hasActiveOutline={hasActiveOutline}\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n        theme={theme}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && !!label && !disabled && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        {label ? (\n          <InputLabel\n            labeled={parentState.labeled}\n            error={parentState.error}\n            focused={parentState.focused}\n            wiggle={Boolean(parentState.value && labelProps.labelError)}\n            labelLayoutMeasured={parentState.labelLayout.measured}\n            labelLayoutWidth={parentState.labelLayout.width}\n            {...labelProps}\n          />\n        ) : null}\n        {render?.({\n          testID,\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              lineHeight,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.getConstants().isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n            contentStyle,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors?: {\n    error?: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n  hasActiveOutline?: boolean;\n  style?: StyleProp<ViewStyle>;\n  theme?: ThemeProp;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n  hasActiveOutline,\n  style,\n  theme: themeOverrides,\n}: UnderlineProps) => {\n  const { isV3 } = useInternalTheme(themeOverrides);\n\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n\n  if (error) backgroundColor = colors?.error;\n\n  const activeScale = isV3 ? 2 : 1;\n\n  return (\n    <Animated.View\n      testID=\"text-input-underline\"\n      style={[\n        styles.underline,\n        isV3 && styles.md3Underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [\n            {\n              scaleY: (isV3 ? hasActiveOutline : parentState.focused)\n                ? activeScale\n                : 0.5,\n            },\n          ],\n        },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  md3Underline: {\n    height: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}