{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { View, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, OUTLINE_MINIMIZED_LABEL_Y_OFFSET, LABEL_PADDING_TOP, MIN_DENSE_HEIGHT_OUTLINED, LABEL_PADDING_TOP_DENSE } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, calculateOutlinedIconAndAffixTopPosition, getOutlinedInputColors, getConstants } from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nconst TextInputOutlined = _ref => {\n  let {\n    disabled = false,\n    editable = true,\n    label,\n    error = false,\n    selectionColor,\n    underlineColor: _underlineColor,\n    outlineColor: customOutlineColor,\n    activeOutlineColor,\n    outlineStyle,\n    textColor,\n    dense,\n    style,\n    theme,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    multiline = false,\n    parentState,\n    innerRef,\n    onFocus,\n    forceFocus,\n    onBlur,\n    onChangeText,\n    onLayoutAnimatedText,\n    onLeftAffixLayoutChange,\n    onRightAffixLayoutChange,\n    left,\n    right,\n    placeholderTextColor,\n    testID = 'text-input-outlined',\n    contentStyle,\n    ...rest\n  } = _ref;\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right\n  });\n  const {\n    colors,\n    isV3,\n    roundness\n  } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n  const {\n    INPUT_PADDING_HORIZONTAL,\n    MIN_HEIGHT,\n    ADORNMENT_OFFSET\n  } = getConstants(isV3);\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors === null || colors === void 0 ? void 0 : colors.background,\n    textAlign,\n    ...viewStyle\n  } = StyleSheet.flatten(style) || {};\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    textColor,\n    disabled,\n    error,\n    theme\n  });\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n  const baseLabelTranslateX = (I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(_ref2 => {\n    let {\n      side,\n      type\n    } = _ref2;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.getConstants().isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n  const minInputHeight = (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  const pad = calculatePadding(paddingSettings);\n  const paddingOut = adjustPaddingOut({\n    ...paddingSettings,\n    pad\n  });\n  const baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  const placeholderOpacity = hasActiveOutline ? parentState.labeled : parentState.labelLayout.measured ? 1 : 0;\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  };\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    labelError: error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n  };\n  const minHeight = height || (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);\n  const outlinedHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP : 0);\n  const {\n    leftLayout,\n    rightLayout\n  } = parentState;\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig,\n    rightAffixWidth,\n    leftAffixWidth,\n    mode: 'outlined',\n    isV3\n  });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange\n  };\n  let adornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: {\n        ...font,\n        fontSize,\n        lineHeight,\n        fontWeight\n      },\n      visible: parentState.labeled\n    };\n  }\n  return /*#__PURE__*/React.createElement(View, {\n    style: viewStyle\n  }, /*#__PURE__*/React.createElement(Outline, {\n    isV3: isV3,\n    style: outlineStyle,\n    roundness: roundness,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight\n    }]\n  }, label ? /*#__PURE__*/React.createElement(InputLabel, _extends({\n    labeled: parentState.labeled,\n    error: parentState.error,\n    focused: parentState.focused,\n    wiggle: Boolean(parentState.value && labelProps.labelError),\n    labelLayoutMeasured: parentState.labelLayout.measured,\n    labelLayoutWidth: parentState.labelLayout.width\n  }, labelProps, {\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  })) : null, render === null || render === void 0 ? void 0 : render({\n    testID,\n    ...rest,\n    ref: innerRef,\n    onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus,\n    onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, {\n      ...font,\n      fontSize,\n      lineHeight,\n      fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.getConstants().isRTL ? 'right' : 'left',\n      paddingHorizontal: INPUT_PADDING_HORIZONTAL\n    }, Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput, contentStyle]\n  })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps)));\n};\nexport default TextInputOutlined;\nconst Outline = _ref3 => {\n  let {\n    isV3,\n    activeColor,\n    backgroundColor,\n    hasActiveOutline,\n    focused,\n    outlineColor,\n    roundness,\n    style\n  } = _ref3;\n  return /*#__PURE__*/React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline,\n    // eslint-disable-next-line react-native/no-inline-styles\n    {\n      backgroundColor,\n      borderRadius: roundness,\n      borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }, style]\n  });\n};\nconst styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"names":["React","View","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","AdornmentType","AdornmentSide","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_DENSE_HEIGHT_OUTLINED","LABEL_PADDING_TOP_DENSE","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","calculateOutlinedIconAndAffixTopPosition","getOutlinedInputColors","getConstants","InputLabel","LabelBackground","TextInputOutlined","_ref","disabled","editable","label","error","selectionColor","underlineColor","_underlineColor","outlineColor","customOutlineColor","activeOutlineColor","outlineStyle","textColor","dense","style","theme","render","props","createElement","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","contentStyle","rest","adornmentConfig","colors","isV3","roundness","font","fonts","bodyLarge","regular","hasActiveOutline","focused","INPUT_PADDING_HORIZONTAL","MIN_HEIGHT","ADORNMENT_OFFSET","fontSize","fontSizeStyle","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","flatten","inputTextColor","activeColor","placeholderColor","errorColor","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","_ref2","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","placeholderStyle","position","paddingHorizontal","labelProps","labelError","wiggleOffsetX","maxFontSizeMultiplier","opacity","value","minHeight","outlinedHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","Outline","labelContainer","paddingTop","_extends","wiggle","Boolean","labelLayoutMeasured","labelLayoutWidth","labelBackground","ref","placeholder","underlineColorAndroid","input","color","textAlignVertical","outline","_ref3","pointerEvents","borderRadius","borderWidth","borderColor","create","top","bottom","paddingBottom","margin","zIndex"],"sources":["C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\node_modules\\react-native-paper\\src\\components\\TextInput\\TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP,\n  MIN_DENSE_HEIGHT_OUTLINED,\n  LABEL_PADDING_TOP_DENSE,\n} from './constants';\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  calculateOutlinedIconAndAffixTopPosition,\n  getOutlinedInputColors,\n  getConstants,\n} from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  outlineStyle,\n  textColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input-outlined',\n  contentStyle,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, isV3, roundness } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const { INPUT_PADDING_HORIZONTAL, MIN_HEIGHT, ADORNMENT_OFFSET } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors?.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    textColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.getConstants().isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.getConstants().isRTL ? -1 : 1) *\n      (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? parentState.labeled\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  };\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    labelError: error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    opacity:\n      parentState.value || parentState.focused\n        ? parentState.labelLayout.measured\n          ? 1\n          : 0\n        : 1,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT)) as number;\n\n  const outlinedHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP) : 0);\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n      isV3,\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, lineHeight, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        isV3={isV3}\n        style={outlineStyle}\n        roundness={roundness}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          {label ? (\n            <InputLabel\n              labeled={parentState.labeled}\n              error={parentState.error}\n              focused={parentState.focused}\n              wiggle={Boolean(parentState.value && labelProps.labelError)}\n              labelLayoutMeasured={parentState.labelLayout.measured}\n              labelLayoutWidth={parentState.labelLayout.width}\n              {...labelProps}\n              labelBackground={LabelBackground}\n              maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n            />\n          ) : null}\n          {render?.({\n            testID,\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                lineHeight,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.getConstants().isRTL\n                  ? 'right'\n                  : 'left',\n                paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n              contentStyle,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  isV3: boolean;\n  activeColor: string;\n  backgroundColor: ColorValue;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  roundness?: number;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Outline = ({\n  isV3,\n  activeColor,\n  backgroundColor,\n  hasActiveOutline,\n  focused,\n  outlineColor,\n  roundness,\n  style,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: roundness,\n        borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n      style,\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}