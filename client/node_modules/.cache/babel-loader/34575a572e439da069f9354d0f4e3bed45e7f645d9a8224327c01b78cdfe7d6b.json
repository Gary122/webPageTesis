{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\TaskForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem';\nimport { styled } from '@mui/material/styles';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { Grid, Typography, Box, TextField, IconButton } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  components: {\n    MuiTreeItem: {\n      styleOverrides: {\n        label: {\n          color: '#000000'\n        },\n        iconContainer: {\n          color: '#000000'\n        }\n      }\n    }\n  }\n});\nfunction TaxonomyTree() {\n  _s();\n  const [treeData, setTreeData] = useState([]);\n  function createTreeNode(id, name, children, level) {\n    // Verificar la existencia de las propiedades antes de acceder a ellas\n    const nodeId = id ? id.toString() : '';\n    const nodeName = name ? name.trim() : '';\n    return {\n      id: nodeId,\n      name: nodeName,\n      children,\n      level\n    };\n  }\n  function getNextLevel(currentLevel) {\n    switch (currentLevel) {\n      case 'reino':\n        return 'filo';\n      case 'filo':\n        return 'clase';\n      case 'clase':\n        return 'orden';\n      case 'orden':\n        return 'familia';\n      case 'familia':\n        return 'genero';\n      case 'genero':\n        return 'especie';\n      default:\n        return '';\n    }\n  }\n  async function loadNodeChildren(node) {\n    const level = node.level;\n    const nextLevel = getNextLevel(level);\n\n    // Verificar la existencia del nivel actual y del siguiente nivel\n    if (!level || !nextLevel) {\n      return node;\n    }\n    let url = `http://localhost:4000/${nextLevel}s/${node.id}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n\n      // Verificar si hay datos disponibles antes de crear los nodos hijo\n      const childNodes = Array.isArray(data) ? data.map(item => createTreeNode(item.id, item.nombre, [], nextLevel)) : [];\n      return {\n        ...node,\n        children: childNodes\n      };\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n      return node;\n    }\n  }\n  async function fetchData() {\n    try {\n      const response = await fetch('http://localhost:4000/reinos');\n      const data = await response.json();\n\n      // Crear un objeto de mapa para almacenar los nodos por ID\n      const nodeMap = {};\n\n      // Crear los nodos iniciales (reinos) y almacenarlos en el mapa\n      data.forEach(item => {\n        const node = createTreeNode(item.rei_id, item.rei_nombre, [], 'reino');\n        nodeMap[node.id] = node;\n      });\n\n      // Crear la estructura jerárquica para los demás niveles\n      for (const nodeId in nodeMap) {\n        const node = nodeMap[nodeId];\n        const level = node.level;\n        const nextLevel = getNextLevel(level);\n        const childrenUrl = `http://localhost:4000/${nextLevel}s/${nodeId}`;\n        const childrenResponse = await fetch(childrenUrl);\n        const childrenData = await childrenResponse.json();\n        const childNodes = childrenData.map(item => createTreeNode(item.id, item.nombre, [], nextLevel));\n        node.children = childNodes;\n        childNodes.forEach(childNode => {\n          nodeMap[childNode.id] = childNode;\n        });\n      }\n\n      // Obtener los nodos raíz (reinos) y establecerlos como el estado del árbol\n      const rootNodes = Object.values(nodeMap).filter(node => node.level === 'reino');\n      setTreeData(rootNodes);\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n  }\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const handleNodeToggle = async (event, nodeIds) => {\n    const nodeId = nodeIds[nodeIds.length - 1];\n    const nodeIndex = treeData.findIndex(node => node.id === nodeId);\n    if (nodeIndex !== -1 && !treeData[nodeIndex].children.length) {\n      const updatedTreeData = [...treeData];\n      const node = updatedTreeData[nodeIndex];\n\n      // Verificar la existencia de hijos\n      if (node.level === 'reino' || node.level === 'filo' || node.level === 'clase' || node.level === 'orden' || node.level === 'familia' || node.level === 'genero') {\n        const updatedNode = await loadNodeChildren(node);\n        node.children = updatedNode.children; // Actualizar los hijos del nodo\n      }\n\n      setTreeData(updatedTreeData);\n    }\n  };\n  const renderTree = nodes => {\n    return nodes.map(node => /*#__PURE__*/_jsxDEV(TreeItem, {\n      nodeId: node.id,\n      label: node.name,\n      onToggle: handleNodeToggle,\n      children: Array.isArray(node.children) ? renderTree(node.children) : null\n    }, node.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(TreeView, {\n      defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 30\n      }, this),\n      defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 28\n      }, this),\n      children: renderTree(treeData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(TaxonomyTree, \"beijQgCEr4PaHJnyDg4mOCdZI4w=\");\n_c = TaxonomyTree;\nexport default TaxonomyTree;\nvar _c;\n$RefreshReg$(_c, \"TaxonomyTree\");","map":{"version":3,"names":["React","useState","useEffect","TreeView","TreeItem","treeItemClasses","styled","createTheme","ThemeProvider","ExpandMoreIcon","ChevronRightIcon","Grid","Typography","Box","TextField","IconButton","SearchIcon","jsxDEV","_jsxDEV","theme","components","MuiTreeItem","styleOverrides","label","color","iconContainer","TaxonomyTree","_s","treeData","setTreeData","createTreeNode","id","name","children","level","nodeId","toString","nodeName","trim","getNextLevel","currentLevel","loadNodeChildren","node","nextLevel","url","response","fetch","data","json","childNodes","Array","isArray","map","item","nombre","error","console","fetchData","nodeMap","forEach","rei_id","rei_nombre","childrenUrl","childrenResponse","childrenData","childNode","rootNodes","Object","values","filter","handleNodeToggle","event","nodeIds","length","nodeIndex","findIndex","updatedTreeData","updatedNode","renderTree","nodes","onToggle","fileName","_jsxFileName","lineNumber","columnNumber","defaultCollapseIcon","defaultExpandIcon","_c","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/TaskForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem';\nimport { styled } from '@mui/material/styles';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { Grid, Typography, Box, TextField, IconButton } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst theme = createTheme({\n  components: {\n    MuiTreeItem: {\n      styleOverrides: {\n        label: {\n          color: '#000000',\n        },\n        iconContainer: {\n          color: '#000000',\n        },\n      },\n    },\n  },\n});\n\nfunction TaxonomyTree() {\n  const [treeData, setTreeData] = useState([]);\n\n  function createTreeNode(id, name, children, level) {\n    // Verificar la existencia de las propiedades antes de acceder a ellas\n    const nodeId = id ? id.toString() : '';\n    const nodeName = name ? name.trim() : '';\n\n    return { id: nodeId, name: nodeName, children, level };\n  }\n\n  function getNextLevel(currentLevel) {\n    switch (currentLevel) {\n      case 'reino':\n        return 'filo';\n      case 'filo':\n        return 'clase';\n      case 'clase':\n        return 'orden';\n      case 'orden':\n        return 'familia';\n      case 'familia':\n        return 'genero';\n      case 'genero':\n        return 'especie';\n      default:\n        return '';\n    }\n  }\n\n  async function loadNodeChildren(node) {\n    const level = node.level;\n    const nextLevel = getNextLevel(level);\n\n    // Verificar la existencia del nivel actual y del siguiente nivel\n    if (!level || !nextLevel) {\n      return node;\n    }\n\n    let url = `http://localhost:4000/${nextLevel}s/${node.id}`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n\n      // Verificar si hay datos disponibles antes de crear los nodos hijo\n      const childNodes = Array.isArray(data)\n        ? data.map((item) =>\n          createTreeNode(item.id, item.nombre, [], nextLevel)\n        )\n        : [];\n\n      return { ...node, children: childNodes };\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n      return node;\n    }\n  }\n\n\n  async function fetchData() {\n    try {\n      const response = await fetch('http://localhost:4000/reinos');\n      const data = await response.json();\n\n      // Crear un objeto de mapa para almacenar los nodos por ID\n      const nodeMap = {};\n\n      // Crear los nodos iniciales (reinos) y almacenarlos en el mapa\n      data.forEach((item) => {\n        const node = createTreeNode(item.rei_id, item.rei_nombre, [], 'reino');\n        nodeMap[node.id] = node;\n      });\n\n      // Crear la estructura jerárquica para los demás niveles\n      for (const nodeId in nodeMap) {\n        const node = nodeMap[nodeId];\n        const level = node.level;\n        const nextLevel = getNextLevel(level);\n        const childrenUrl = `http://localhost:4000/${nextLevel}s/${nodeId}`;\n        const childrenResponse = await fetch(childrenUrl);\n        const childrenData = await childrenResponse.json();\n\n        const childNodes = childrenData.map((item) =>\n          createTreeNode(item.id, item.nombre, [], nextLevel)\n        );\n\n        node.children = childNodes;\n        childNodes.forEach((childNode) => {\n          nodeMap[childNode.id] = childNode;\n        });\n      }\n\n      // Obtener los nodos raíz (reinos) y establecerlos como el estado del árbol\n      const rootNodes = Object.values(nodeMap).filter((node) => node.level === 'reino');\n      setTreeData(rootNodes);\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n  }\n\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n\n  const handleNodeToggle = async (event, nodeIds) => {\n    const nodeId = nodeIds[nodeIds.length - 1];\n    const nodeIndex = treeData.findIndex((node) => node.id === nodeId);\n    if (nodeIndex !== -1 && !treeData[nodeIndex].children.length) {\n      const updatedTreeData = [...treeData];\n      const node = updatedTreeData[nodeIndex];\n\n      // Verificar la existencia de hijos\n      if (node.level === 'reino' || node.level === 'filo' || node.level === 'clase' || node.level === 'orden' || node.level === 'familia' || node.level === 'genero') {\n        const updatedNode = await loadNodeChildren(node);\n        node.children = updatedNode.children; // Actualizar los hijos del nodo\n      }\n\n      setTreeData(updatedTreeData);\n    }\n  };\n\n\n\n  const renderTree = (nodes) => {\n    return nodes.map((node) => (\n      <TreeItem\n        key={node.id}\n        nodeId={node.id}\n        label={node.name}\n        onToggle={handleNodeToggle}\n      >\n        {Array.isArray(node.children) ? renderTree(node.children) : null}\n      </TreeItem>\n    ));\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <TreeView\n        defaultCollapseIcon={<ExpandMoreIcon />}\n        defaultExpandIcon={<ChevronRightIcon />}\n      >\n        {renderTree(treeData)}\n      </TreeView>\n    </ThemeProvider>\n  );\n}\n\nexport default TaxonomyTree;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,QAAQ,IAAIC,eAAe,QAAQ,mBAAmB;AAC7D,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,WAAW,EAAEC,aAAa,QAAQ,sBAAsB;AACjE,OAAOC,cAAc,MAAM,gCAAgC;AAC3D,OAAOC,gBAAgB,MAAM,kCAAkC;AAC/D,SAASC,IAAI,EAAEC,UAAU,EAAEC,GAAG,EAAEC,SAAS,EAAEC,UAAU,QAAQ,eAAe;AAC5E,OAAOC,UAAU,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,KAAK,GAAGZ,WAAW,CAAC;EACxBa,UAAU,EAAE;IACVC,WAAW,EAAE;MACXC,cAAc,EAAE;QACdC,KAAK,EAAE;UACLC,KAAK,EAAE;QACT,CAAC;QACDC,aAAa,EAAE;UACbD,KAAK,EAAE;QACT;MACF;IACF;EACF;AACF,CAAC,CAAC;AAEF,SAASE,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAE5C,SAAS6B,cAAcA,CAACC,EAAE,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAE;IACjD;IACA,MAAMC,MAAM,GAAGJ,EAAE,GAAGA,EAAE,CAACK,QAAQ,CAAC,CAAC,GAAG,EAAE;IACtC,MAAMC,QAAQ,GAAGL,IAAI,GAAGA,IAAI,CAACM,IAAI,CAAC,CAAC,GAAG,EAAE;IAExC,OAAO;MAAEP,EAAE,EAAEI,MAAM;MAAEH,IAAI,EAAEK,QAAQ;MAAEJ,QAAQ;MAAEC;IAAM,CAAC;EACxD;EAEA,SAASK,YAAYA,CAACC,YAAY,EAAE;IAClC,QAAQA,YAAY;MAClB,KAAK,OAAO;QACV,OAAO,MAAM;MACf,KAAK,MAAM;QACT,OAAO,OAAO;MAChB,KAAK,OAAO;QACV,OAAO,OAAO;MAChB,KAAK,OAAO;QACV,OAAO,SAAS;MAClB,KAAK,SAAS;QACZ,OAAO,QAAQ;MACjB,KAAK,QAAQ;QACX,OAAO,SAAS;MAClB;QACE,OAAO,EAAE;IACb;EACF;EAEA,eAAeC,gBAAgBA,CAACC,IAAI,EAAE;IACpC,MAAMR,KAAK,GAAGQ,IAAI,CAACR,KAAK;IACxB,MAAMS,SAAS,GAAGJ,YAAY,CAACL,KAAK,CAAC;;IAErC;IACA,IAAI,CAACA,KAAK,IAAI,CAACS,SAAS,EAAE;MACxB,OAAOD,IAAI;IACb;IAEA,IAAIE,GAAG,GAAI,yBAAwBD,SAAU,KAAID,IAAI,CAACX,EAAG,EAAC;IAE1D,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMC,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAClCA,IAAI,CAACK,GAAG,CAAEC,IAAI,IACdvB,cAAc,CAACuB,IAAI,CAACtB,EAAE,EAAEsB,IAAI,CAACC,MAAM,EAAE,EAAE,EAAEX,SAAS,CACpD,CAAC,GACC,EAAE;MAEN,OAAO;QAAE,GAAGD,IAAI;QAAET,QAAQ,EAAEgB;MAAW,CAAC;IAC1C,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAOb,IAAI;IACb;EACF;EAGA,eAAee,SAASA,CAAA,EAAG;IACzB,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;MAC5D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMU,OAAO,GAAG,CAAC,CAAC;;MAElB;MACAX,IAAI,CAACY,OAAO,CAAEN,IAAI,IAAK;QACrB,MAAMX,IAAI,GAAGZ,cAAc,CAACuB,IAAI,CAACO,MAAM,EAAEP,IAAI,CAACQ,UAAU,EAAE,EAAE,EAAE,OAAO,CAAC;QACtEH,OAAO,CAAChB,IAAI,CAACX,EAAE,CAAC,GAAGW,IAAI;MACzB,CAAC,CAAC;;MAEF;MACA,KAAK,MAAMP,MAAM,IAAIuB,OAAO,EAAE;QAC5B,MAAMhB,IAAI,GAAGgB,OAAO,CAACvB,MAAM,CAAC;QAC5B,MAAMD,KAAK,GAAGQ,IAAI,CAACR,KAAK;QACxB,MAAMS,SAAS,GAAGJ,YAAY,CAACL,KAAK,CAAC;QACrC,MAAM4B,WAAW,GAAI,yBAAwBnB,SAAU,KAAIR,MAAO,EAAC;QACnE,MAAM4B,gBAAgB,GAAG,MAAMjB,KAAK,CAACgB,WAAW,CAAC;QACjD,MAAME,YAAY,GAAG,MAAMD,gBAAgB,CAACf,IAAI,CAAC,CAAC;QAElD,MAAMC,UAAU,GAAGe,YAAY,CAACZ,GAAG,CAAEC,IAAI,IACvCvB,cAAc,CAACuB,IAAI,CAACtB,EAAE,EAAEsB,IAAI,CAACC,MAAM,EAAE,EAAE,EAAEX,SAAS,CACpD,CAAC;QAEDD,IAAI,CAACT,QAAQ,GAAGgB,UAAU;QAC1BA,UAAU,CAACU,OAAO,CAAEM,SAAS,IAAK;UAChCP,OAAO,CAACO,SAAS,CAAClC,EAAE,CAAC,GAAGkC,SAAS;QACnC,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACV,OAAO,CAAC,CAACW,MAAM,CAAE3B,IAAI,IAAKA,IAAI,CAACR,KAAK,KAAK,OAAO,CAAC;MACjFL,WAAW,CAACqC,SAAS,CAAC;IACxB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF;EAGArD,SAAS,CAAC,MAAM;IACduD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMa,gBAAgB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,OAAO,KAAK;IACjD,MAAMrC,MAAM,GAAGqC,OAAO,CAACA,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC;IAC1C,MAAMC,SAAS,GAAG9C,QAAQ,CAAC+C,SAAS,CAAEjC,IAAI,IAAKA,IAAI,CAACX,EAAE,KAAKI,MAAM,CAAC;IAClE,IAAIuC,SAAS,KAAK,CAAC,CAAC,IAAI,CAAC9C,QAAQ,CAAC8C,SAAS,CAAC,CAACzC,QAAQ,CAACwC,MAAM,EAAE;MAC5D,MAAMG,eAAe,GAAG,CAAC,GAAGhD,QAAQ,CAAC;MACrC,MAAMc,IAAI,GAAGkC,eAAe,CAACF,SAAS,CAAC;;MAEvC;MACA,IAAIhC,IAAI,CAACR,KAAK,KAAK,OAAO,IAAIQ,IAAI,CAACR,KAAK,KAAK,MAAM,IAAIQ,IAAI,CAACR,KAAK,KAAK,OAAO,IAAIQ,IAAI,CAACR,KAAK,KAAK,OAAO,IAAIQ,IAAI,CAACR,KAAK,KAAK,SAAS,IAAIQ,IAAI,CAACR,KAAK,KAAK,QAAQ,EAAE;QAC9J,MAAM2C,WAAW,GAAG,MAAMpC,gBAAgB,CAACC,IAAI,CAAC;QAChDA,IAAI,CAACT,QAAQ,GAAG4C,WAAW,CAAC5C,QAAQ,CAAC,CAAC;MACxC;;MAEAJ,WAAW,CAAC+C,eAAe,CAAC;IAC9B;EACF,CAAC;EAID,MAAME,UAAU,GAAIC,KAAK,IAAK;IAC5B,OAAOA,KAAK,CAAC3B,GAAG,CAAEV,IAAI,iBACpBxB,OAAA,CAACd,QAAQ;MAEP+B,MAAM,EAAEO,IAAI,CAACX,EAAG;MAChBR,KAAK,EAAEmB,IAAI,CAACV,IAAK;MACjBgD,QAAQ,EAAEV,gBAAiB;MAAArC,QAAA,EAE1BiB,KAAK,CAACC,OAAO,CAACT,IAAI,CAACT,QAAQ,CAAC,GAAG6C,UAAU,CAACpC,IAAI,CAACT,QAAQ,CAAC,GAAG;IAAI,GAL3DS,IAAI,CAACX,EAAE;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMJ,CACX,CAAC;EACJ,CAAC;EAED,oBACElE,OAAA,CAACV,aAAa;IAACW,KAAK,EAAEA,KAAM;IAAAc,QAAA,eAC1Bf,OAAA,CAACf,QAAQ;MACPkF,mBAAmB,eAAEnE,OAAA,CAACT,cAAc;QAAAwE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MACxCE,iBAAiB,eAAEpE,OAAA,CAACR,gBAAgB;QAAAuE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MAAAnD,QAAA,EAEvC6C,UAAU,CAAClD,QAAQ;IAAC;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEpB;AAACzD,EAAA,CArJQD,YAAY;AAAA6D,EAAA,GAAZ7D,YAAY;AAuJrB,eAAeA,YAAY;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}