{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\TaskForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem from '@mui/lab/TreeItem';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaxonomyTree() {\n  _s();\n  const [treeData, setTreeData] = useState([]);\n\n  // Crear un objeto de nodo\n  function createTreeNode(id, name, children, level) {\n    return {\n      id: id.toString(),\n      name: name.trim(),\n      children,\n      level\n    };\n  }\n\n  // Cargar hijos de un nodo\n  async function loadNodeChildren(node, level) {\n    let url = '';\n    let data = [];\n    switch (level) {\n      case 'reino':\n        url = `/filos/${node.id}`;\n        break;\n      case 'filo':\n        url = `/clases/${node.id}`;\n        break;\n      case 'clase':\n        url = `/ordenes/${node.id}`;\n        break;\n      case 'orden':\n        url = `/familias/${node.id}`;\n        break;\n      case 'familia':\n        url = `/generos/${node.id}`;\n        break;\n      case 'genero':\n        url = `/especies/${node.id}`;\n        break;\n      default:\n        break;\n    }\n    try {\n      const response = await fetch(url);\n      data = await response.json();\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n    const childNodes = data.map(item => {\n      const newNode = createTreeNode(item.id, item.nombre, [], level);\n      node.children.push(newNode);\n      return newNode;\n    });\n    return childNodes;\n  }\n\n  // Manejar evento de expansi칩n de nodo\n  const handleNodeToggle = async (nodeId, nodeState) => {\n    if (nodeState.expanded) {\n      const nodeIndex = treeData.findIndex(node => node.id === nodeId);\n      if (nodeIndex !== -1 && !treeData[nodeIndex].children.length) {\n        const nodeLevel = treeData[nodeIndex].level;\n        await loadNodeChildren(treeData[nodeIndex], nodeLevel);\n        setTreeData([...treeData]);\n      }\n    }\n  };\n\n  // Obtener datos iniciales\n  async function fetchData() {\n    let data = [];\n    try {\n      const response = await fetch('/reinos');\n      data = await response.json();\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n    const nodes = data.map(item => createTreeNode(item.rei_id, item.rei_nombre, [], 'reino'));\n    setTreeData(nodes);\n  }\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Renderizar los nodos del 치rbol de forma recursiva\n  const renderTree = nodes => {\n    return nodes.map(node => /*#__PURE__*/_jsxDEV(TreeItem, {\n      nodeId: node.id,\n      label: node.name,\n      onToggle: handleNodeToggle,\n      children: Array.isArray(node.children) ? renderTree(node.children) : null\n    }, node.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(TreeView, {\n    defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 34\n    }, this),\n    defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 32\n    }, this),\n    children: renderTree(treeData)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n_s(TaxonomyTree, \"beijQgCEr4PaHJnyDg4mOCdZI4w=\");\n_c = TaxonomyTree;\nexport default TaxonomyTree;\nvar _c;\n$RefreshReg$(_c, \"TaxonomyTree\");","map":{"version":3,"names":["React","useState","useEffect","TreeView","TreeItem","ExpandMoreIcon","ChevronRightIcon","jsxDEV","_jsxDEV","TaxonomyTree","_s","treeData","setTreeData","createTreeNode","id","name","children","level","toString","trim","loadNodeChildren","node","url","data","response","fetch","json","error","console","childNodes","map","item","newNode","nombre","push","handleNodeToggle","nodeId","nodeState","expanded","nodeIndex","findIndex","length","nodeLevel","fetchData","nodes","rei_id","rei_nombre","renderTree","label","onToggle","Array","isArray","fileName","_jsxFileName","lineNumber","columnNumber","defaultCollapseIcon","defaultExpandIcon","_c","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/TaskForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem from '@mui/lab/TreeItem';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\n\nfunction TaxonomyTree() {\n    const [treeData, setTreeData] = useState([]);\n\n    // Crear un objeto de nodo\n    function createTreeNode(id, name, children, level) {\n        return { id: id.toString(), name: name.trim(), children, level };\n    }\n\n    // Cargar hijos de un nodo\n    async function loadNodeChildren(node, level) {\n        let url = '';\n        let data = [];\n\n        switch (level) {\n            case 'reino':\n                url = `/filos/${node.id}`;\n                break;\n            case 'filo':\n                url = `/clases/${node.id}`;\n                break;\n            case 'clase':\n                url = `/ordenes/${node.id}`;\n                break;\n            case 'orden':\n                url = `/familias/${node.id}`;\n                break;\n            case 'familia':\n                url = `/generos/${node.id}`;\n                break;\n            case 'genero':\n                url = `/especies/${node.id}`;\n                break;\n            default:\n                break;\n        }\n\n        try {\n            const response = await fetch(url);\n            data = await response.json();\n        } catch (error) {\n            console.error('Error fetching data: ', error);\n        }\n\n        const childNodes = data.map((item) => {\n            const newNode = createTreeNode(item.id, item.nombre, [], level);\n            node.children.push(newNode);\n            return newNode;\n        });\n\n        return childNodes;\n    }\n\n    // Manejar evento de expansi칩n de nodo\n    const handleNodeToggle = async (nodeId, nodeState) => {\n        if (nodeState.expanded) {\n            const nodeIndex = treeData.findIndex(node => node.id === nodeId);\n            if (nodeIndex !== -1 && !treeData[nodeIndex].children.length) {\n                const nodeLevel = treeData[nodeIndex].level;\n                await loadNodeChildren(treeData[nodeIndex], nodeLevel);\n                setTreeData([...treeData]);\n            }\n        }\n    };\n\n    // Obtener datos iniciales\n    async function fetchData() {\n        let data = [];\n        try {\n            const response = await fetch('/reinos');\n            data = await response.json();\n        } catch (error) {\n            console.error('Error fetching data: ', error);\n        }\n        \n        const nodes = data.map((item) => createTreeNode(item.rei_id, item.rei_nombre, [], 'reino'));\n        setTreeData(nodes);\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    // Renderizar los nodos del 치rbol de forma recursiva\n    const renderTree = (nodes) => {\n        return nodes.map((node) => (\n            <TreeItem key={node.id} nodeId={node.id} label={node.name} onToggle={handleNodeToggle}>\n                {Array.isArray(node.children) ? renderTree(node.children) : null}\n            </TreeItem>\n        ));\n    };\n\n    return (\n        <TreeView\n            defaultCollapseIcon={<ExpandMoreIcon />}\n            defaultExpandIcon={<ChevronRightIcon />}\n        >\n            {renderTree(treeData)}\n        </TreeView>\n    );\n}\n\nexport default TaxonomyTree;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}