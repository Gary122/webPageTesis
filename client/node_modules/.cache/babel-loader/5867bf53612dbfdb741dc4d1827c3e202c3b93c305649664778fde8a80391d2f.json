{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\InicioPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaxonomySearch() {\n  _s();\n  const [reino, setReino] = useState('');\n  const [phylum, setPhylum] = useState('');\n  const [clase, setClase] = useState('');\n  const [reinoOptions, setReinoOptions] = useState([]);\n  const [phylumOptions, setPhylumOptions] = useState([]);\n  const [claseOptions, setClaseOptions] = useState([]);\n  useEffect(() => {\n    // Función para cargar los reinos iniciales desde la API\n    async function fetchReinoOptions() {\n      // Aquí deberías hacer una solicitud a tu API para obtener los reinos\n      const res = await fetch('http://localhost:4000/taxonReino');\n      const data = await res.json();\n      setReinoOptions(data);\n    }\n    fetchReinoOptions();\n  }, []); // Nota: el array vacío como segundo argumento hace que este efecto solo se ejecute una vez, cuando el componente se monta\n\n  const handleReinoChange = async newReino => {\n    setReino(newReino);\n\n    // Aquí debes hacer una solicitud a tu API para obtener los phylums correspondientes a este reino\n    const res = await fetch('http://localhost:4000/taxonFilo', {\n      method: 'POST',\n      body: JSON.stringify({\n        reino: newReino\n      })\n    });\n    const data = await res.json();\n    setPhylumOptions(data);\n    setPhylum(''); // Resetear el phylum seleccionado\n    setClaseOptions([]); // Resetear las opciones de clase\n    setClase(''); // Resetear la clase seleccionada\n  };\n\n  const handlePhylumChange = async newPhylum => {\n    setPhylum(newPhylum);\n\n    // Aquí debes hacer una solicitud a tu API para obtener las clases correspondientes a este phylum\n    const res = await fetch('api_endpoint_para_clases', {\n      method: 'POST',\n      body: JSON.stringify({\n        phylum: newPhylum\n      })\n    });\n    const data = await res.json();\n    setClaseOptions(data);\n    setClase(''); // Resetear la clase seleccionada\n  };\n\n  const handleClaseChange = newClase => {\n    setClase(newClase);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      variant: \"filled\",\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Reino\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: reino,\n        onChange: e => handleReinoChange(e.target.value),\n        children: reinoOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option,\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 49\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      variant: \"filled\",\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Phylum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: phylum,\n        onChange: e => handlePhylumChange(e.target.value),\n        children: phylumOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option,\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 50\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      variant: \"filled\",\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Clase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: clase,\n        onChange: e => handleClaseChange(e.target.value),\n        children: claseOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option,\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 49\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(TaxonomySearch, \"MTrFAcWbz/UkZQiaY4BGjNUMLvY=\");\n_c = TaxonomySearch;\nexport default TaxonomySearch;\nvar _c;\n$RefreshReg$(_c, \"TaxonomySearch\");","map":{"version":3,"names":["React","useState","useEffect","FormControl","InputLabel","Select","MenuItem","jsxDEV","_jsxDEV","TaxonomySearch","_s","reino","setReino","phylum","setPhylum","clase","setClase","reinoOptions","setReinoOptions","phylumOptions","setPhylumOptions","claseOptions","setClaseOptions","fetchReinoOptions","res","fetch","data","json","handleReinoChange","newReino","method","body","JSON","stringify","handlePhylumChange","newPhylum","handleClaseChange","newClase","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","option","_c","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/InicioPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FormControl, InputLabel, Select, MenuItem } from '@mui/material';\r\n\r\nfunction TaxonomySearch() {\r\n    const [reino, setReino] = useState('');\r\n    const [phylum, setPhylum] = useState('');\r\n    const [clase, setClase] = useState('');\r\n\r\n    const [reinoOptions, setReinoOptions] = useState([]);\r\n    const [phylumOptions, setPhylumOptions] = useState([]);\r\n    const [claseOptions, setClaseOptions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Función para cargar los reinos iniciales desde la API\r\n        async function fetchReinoOptions() {\r\n            // Aquí deberías hacer una solicitud a tu API para obtener los reinos\r\n            const res = await fetch('http://localhost:4000/taxonReino');\r\n            const data = await res.json();\r\n            setReinoOptions(data);\r\n        }\r\n\r\n        fetchReinoOptions();\r\n    }, []);  // Nota: el array vacío como segundo argumento hace que este efecto solo se ejecute una vez, cuando el componente se monta\r\n\r\n    const handleReinoChange = async (newReino) => {\r\n        setReino(newReino);\r\n\r\n        // Aquí debes hacer una solicitud a tu API para obtener los phylums correspondientes a este reino\r\n        const res = await fetch('http://localhost:4000/taxonFilo', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ reino: newReino }),\r\n        });\r\n        const data = await res.json();\r\n        setPhylumOptions(data);\r\n\r\n        setPhylum('');  // Resetear el phylum seleccionado\r\n        setClaseOptions([]);  // Resetear las opciones de clase\r\n        setClase('');  // Resetear la clase seleccionada\r\n    };\r\n\r\n    const handlePhylumChange = async (newPhylum) => {\r\n        setPhylum(newPhylum);\r\n\r\n        // Aquí debes hacer una solicitud a tu API para obtener las clases correspondientes a este phylum\r\n        const res = await fetch('api_endpoint_para_clases', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ phylum: newPhylum }),\r\n        });\r\n        const data = await res.json();\r\n        setClaseOptions(data);\r\n\r\n        setClase('');  // Resetear la clase seleccionada\r\n    };\r\n\r\n    const handleClaseChange = (newClase) => {\r\n        setClase(newClase);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <FormControl variant=\"filled\">\r\n                <InputLabel>Reino</InputLabel>\r\n                <Select value={reino} onChange={e => handleReinoChange(e.target.value)}>\r\n                    {reinoOptions.map(option => <MenuItem value={option}>{option}</MenuItem>)}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl variant=\"filled\">\r\n                <InputLabel>Phylum</InputLabel>\r\n                <Select value={phylum} onChange={e => handlePhylumChange(e.target.value)}>\r\n                    {phylumOptions.map(option => <MenuItem value={option}>{option}</MenuItem>)}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl variant=\"filled\">\r\n                <InputLabel>Clase</InputLabel>\r\n                <Select value={clase} onChange={e => handleClaseChange(e.target.value)}>\r\n                    {claseOptions.map(option => <MenuItem value={option}>{option}</MenuItem>)}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaxonomySearch;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}