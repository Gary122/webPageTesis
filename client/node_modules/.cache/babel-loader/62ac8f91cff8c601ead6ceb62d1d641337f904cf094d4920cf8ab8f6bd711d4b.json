{"ast":null,"code":"import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { useInternalTheme } from '../../core/theming';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getSegmentedButtonBorderRadius, getSegmentedButtonColors, getSegmentedButtonDensityPadding } from './utils';\nconst SegmentedButtonItem = _ref => {\n  let {\n    checked,\n    accessibilityLabel,\n    disabled,\n    style,\n    showSelectedCheck,\n    checkedColor,\n    uncheckedColor,\n    rippleColor: customRippleColor,\n    icon,\n    testID,\n    label,\n    onPress,\n    segment,\n    density = 'regular',\n    theme: themeOverrides\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n  const {\n    roundness,\n    isV3\n  } = theme;\n  const {\n    borderColor,\n    textColor,\n    borderWidth,\n    backgroundColor\n  } = getSegmentedButtonColors({\n    checked,\n    theme,\n    disabled,\n    checkedColor,\n    uncheckedColor\n  });\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment\n  });\n  const rippleColor = customRippleColor || color(textColor).alpha(0.12).rgb().string();\n  const showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  const showCheckedIcon = checked && showSelectedCheck;\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0,\n    ...(label && {\n      transform: [{\n        scale: checkScale.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        })\n      }]\n    })\n  };\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({\n    density\n  });\n  const rippleStyle = {\n    borderRadius,\n    ...segmentBorderRadius\n  };\n  const labelTextStyle = {\n    ...(!isV3 ? {\n      textTransform: 'uppercase',\n      fontWeight: '500'\n    } : theme.fonts.labelLarge),\n    color: textColor\n  };\n  return /*#__PURE__*/React.createElement(View, {\n    style: [buttonStyle, styles.button, style]\n  }, /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityRole: \"button\",\n    disabled: disabled,\n    rippleColor: rippleColor,\n    testID: testID,\n    style: rippleStyle,\n    theme: theme\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, {\n      paddingVertical\n    }]\n  }, showCheckedIcon ? /*#__PURE__*/React.createElement(Animated.View, {\n    testID: `${testID}-check-icon`,\n    style: [iconStyle, {\n      transform: [{\n        scale: checkScale\n      }]\n    }]\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: 'check',\n    size: iconSize,\n    color: textColor\n  })) : null, showIcon ? /*#__PURE__*/React.createElement(Animated.View, {\n    testID: `${testID}-icon`,\n    style: iconStyle\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: textColor\n  })) : null, /*#__PURE__*/React.createElement(Text, {\n    variant: \"labelLarge\",\n    style: [styles.label, labelTextStyle],\n    selectable: false,\n    numberOfLines: 1\n  }, label))));\n};\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid'\n  },\n  label: {\n    textAlign: 'center'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16\n  }\n});\nexport default SegmentedButtonItem;\nexport { SegmentedButtonItem as SegmentedButton };","map":{"version":3,"names":["React","Animated","StyleSheet","View","color","useInternalTheme","Icon","TouchableRipple","Text","getSegmentedButtonBorderRadius","getSegmentedButtonColors","getSegmentedButtonDensityPadding","SegmentedButtonItem","_ref","checked","accessibilityLabel","disabled","style","showSelectedCheck","checkedColor","uncheckedColor","rippleColor","customRippleColor","icon","testID","label","onPress","segment","density","theme","themeOverrides","checkScale","useRef","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","alpha","rgb","string","showIcon","showCheckedIcon","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","createElement","styles","button","borderless","accessibilityState","accessibilityRole","content","source","size","variant","selectable","numberOfLines","create","flex","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButton"],"sources":["C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\node_modules\\react-native-paper\\src\\components\\SegmentedButtons\\SegmentedButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport type { ThemeProp } from 'src/types';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Custom color for unchecked Text and Icon.\n   */\n  uncheckedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Custom color for checked Text and Icon.\n   */\n  checkedColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  checkedColor,\n  uncheckedColor,\n  rippleColor: customRippleColor,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n  theme: themeOverrides,\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n      checkedColor,\n      uncheckedColor,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor =\n    customRippleColor || color(textColor).alpha(0.12).rgb().string();\n\n  const showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  const showCheckedIcon = checked && showSelectedCheck;\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const labelTextStyle: TextStyle = {\n    ...(!isV3\n      ? {\n          textTransform: 'uppercase',\n          fontWeight: '500',\n        }\n      : theme.fonts.labelLarge),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n        theme={theme}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {showCheckedIcon ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} color={textColor} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View testID={`${testID}-icon`} style={iconStyle}>\n              <Icon source={icon} size={iconSize} color={textColor} />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, labelTextStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nexport { SegmentedButtonItem as SegmentedButton };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}