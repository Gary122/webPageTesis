{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\TaskForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport { Grid, Typography, Box } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledTreeItem = styled(TreeItem)(_ref => {\n  let {\n    rootNode,\n    hasData\n  } = _ref;\n  const borderColor = \"gray\";\n  return {\n    position: \"relative\",\n    \"&:before\": {\n      pointerEvents: \"none\",\n      content: '\"\"',\n      position: \"absolute\",\n      width: 32,\n      left: -16,\n      top: 12,\n      borderBottom: !rootNode ? `1px dashed ${borderColor}` : \"none\"\n    },\n    [`& .${treeItemClasses.group}`]: {\n      marginLeft: 16,\n      paddingLeft: 18,\n      borderLeft: `1px dashed ${borderColor}`\n    },\n    \"& .MuiTreeItem-content\": {\n      color: hasData ? \"black\" : \"inherit\",\n      fontWeight: hasData ? \"bold\" : \"inherit\"\n    },\n    \"& .MuiTreeItem-iconContainer\": {\n      color: hasData ? \"black\" : \"inherit\"\n    }\n  };\n});\n_c = StyledTreeItem;\nexport default function FileSystemNavigator() {\n  _s();\n  const [reinos, setReinos] = useState([]);\n  const [filos, setFilos] = useState([]);\n  const [clases, setClases] = useState([]);\n  const [ordenes, setOrdenes] = useState([]);\n  const [familias, setFamilias] = useState([]);\n  const [generos, setGeneros] = useState([]);\n  const [especies, setEspecies] = useState([]);\n  const [reinoElementCounts, setReinoElementCounts] = useState({});\n  const [filoElementCounts, setFiloElementCounts] = useState({});\n  const [claseElementCounts, setClaseElementCounts] = useState({});\n  const [ordenElementCounts, setOrdenElementCounts] = useState({});\n  const [familiaElementCounts, setFamiliaElementCounts] = useState({});\n  useEffect(() => {\n    // Obtener los reinos al cargar el componente\n    fetchReinos();\n  }, []);\n  const fetchReinos = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/reinos\");\n      const reinosData = response.data;\n\n      // Obtener el número de elementos de cada reino\n      const elementCounts = {};\n      for (const reino of reinosData) {\n        const response = await axios.get(`http://localhost:4000/filos/${reino.rei_id}`);\n        const filosData = response.data;\n        elementCounts[reino.rei_id] = filosData.length;\n      }\n      setReinos(reinosData);\n      setReinoElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching reinos data: \", error);\n    }\n  };\n  const fetchFilos = async reinoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/filos/${reinoId}`);\n      const filosData = response.data;\n\n      // Obtener el número de elementos de cada filo\n      const elementCounts = {};\n      for (const filo of filosData) {\n        const response = await axios.get(`http://localhost:4000/clases/${filo.fil_id}`);\n        const clasesData = response.data;\n        elementCounts[filo.fil_id] = clasesData.length;\n      }\n      setFilos(filosData);\n      setFiloElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching filos data: \", error);\n    }\n  };\n  const fetchClases = async filoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/clases/${filoId}`);\n      const clasesData = response.data;\n\n      // Obtener el número de elementos de cada clase\n      const elementCounts = {};\n      for (const clase of clasesData) {\n        const response = await axios.get(`http://localhost:4000/ordenes/${clase.cla_id}`);\n        const ordenesData = response.data;\n        elementCounts[clase.cla_id] = ordenesData.length;\n      }\n      setClases(clasesData);\n      setClaseElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching clases data: \", error);\n    }\n  };\n  const fetchOrdenes = async claseId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/ordenes/${claseId}`);\n      const ordenesData = response.data;\n\n      // Obtener el número de elementos de cada orden\n      const elementCounts = {};\n      for (const orden of ordenesData) {\n        const response = await axios.get(`http://localhost:4000/familias/${orden.ord_id}`);\n        const familiasData = response.data;\n        elementCounts[orden.ord_id] = familiasData.length;\n      }\n      setOrdenes(ordenesData);\n      setOrdenElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching ordenes data: \", error);\n    }\n  };\n  const fetchFamilias = async ordenId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/familias/${ordenId}`);\n      const familiasData = response.data;\n\n      // Obtener el número de elementos de cada familia\n      const elementCounts = {};\n      for (const familia of familiasData) {\n        const response = await axios.get(`http://localhost:4000/generos/${familia.fam_id}`);\n        const generosData = response.data;\n        elementCounts[familia.fam_id] = generosData.length;\n      }\n      setFamilias(familiasData);\n      setFamiliaElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching familias data: \", error);\n    }\n  };\n  const fetchGeneros = async familiaId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/generos/${familiaId}`);\n      setGeneros(response.data);\n    } catch (error) {\n      console.error(\"Error fetching generos data: \", error);\n    }\n  };\n  const fetchEspecies = async generoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/especies/${generoId}`);\n      setEspecies(response.data);\n    } catch (error) {\n      console.error(\"Error fetching especies data: \", error);\n    }\n  };\n  const handleReinoClick = (event, nodeId) => {\n    if (nodeId) {\n      const reinoId = nodeId.split(\"-\")[1];\n      const reino = reinos.find(reino => reino.rei_id.toString() === reinoId);\n      if (reino) {\n        fetchFilos(reinoId);\n        setClases([]); // Reiniciar las clases cuando se cambia de reino\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleFiloClick = (event, nodeId) => {\n    if (nodeId) {\n      const filoId = nodeId.split(\"-\")[1];\n      const filo = filos.find(filo => filo.fil_id.toString() === filoId);\n      if (filo) {\n        fetchClases(filoId);\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleClaseClick = (event, nodeId) => {\n    if (nodeId) {\n      const claseId = nodeId.split(\"-\")[1];\n      const clase = clases.find(clase => clase.cla_id.toString() === claseId);\n      if (clase) {\n        fetchOrdenes(claseId);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleOrdenClick = (event, nodeId) => {\n    if (nodeId) {\n      const ordenId = nodeId.split(\"-\")[1];\n      const orden = ordenes.find(orden => orden.ord_id.toString() === ordenId);\n      if (orden) {\n        fetchFamilias(ordenId);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleFamiliaClick = (event, nodeId) => {\n    if (nodeId) {\n      const familiaId = nodeId.split(\"-\")[1];\n      const familia = familias.find(familia => familia.fam_id.toString() === familiaId);\n      if (familia) {\n        fetchGeneros(familiaId);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleGeneroClick = (event, nodeId) => {\n    if (nodeId) {\n      const generoId = nodeId.split(\"-\")[1];\n      const genero = generos.find(genero => genero.gen_id.toString() === generoId);\n      if (genero) {\n        fetchEspecies(generoId);\n      }\n    }\n  };\n  const renderReinos = () => {\n    return reinos.map(reino => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `reino-${reino.rei_id}`,\n      label: `${reino.rei_nombre.trim()} (${reinoElementCounts[reino.rei_id] || 0})`,\n      onClick: event => handleReinoClick(event, `reino-${reino.rei_id}`),\n      hasData: filos.some(filo => filo.rei_id === reino.rei_id),\n      style: {\n        color: \"#000000\"\n      } // Cambiar el color del texto a negro\n      ,\n      children: renderFilos(reino.rei_id)\n    }, reino.rei_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this));\n  };\n  const renderFilos = reinoId => {\n    const filosOfReino = filos.filter(filo => filo.rei_id === reinoId);\n    return filosOfReino.map(filo => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `filo-${filo.fil_id}`,\n      label: `${filo.fil_nombre.trim()} (${filoElementCounts[filo.fil_id] || 0})`,\n      onClick: event => handleFiloClick(event, `filo-${filo.fil_id}`),\n      hasData: clases.some(clase => clase.fil_id === filo.fil_id),\n      children: renderClases(filo.fil_id)\n    }, filo.fil_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this));\n  };\n  const renderClases = filoId => {\n    const clasesOfFilo = clases.filter(clase => clase.fil_id === filoId);\n    return clasesOfFilo.map(clase => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `clase-${clase.cla_id}`,\n      label: `${clase.cla_nombre.trim()} (${claseElementCounts[clase.cla_id] || 0})`,\n      onClick: event => handleClaseClick(event, `clase-${clase.cla_id}`),\n      hasData: ordenes.some(orden => orden.cla_id === clase.cla_id),\n      children: renderOrdenes(clase.cla_id)\n    }, clase.cla_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this));\n  };\n  const renderOrdenes = claseId => {\n    const ordenesOfClase = ordenes.filter(orden => orden.cla_id === claseId);\n    return ordenesOfClase.map(orden => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `orden-${orden.ord_id}`,\n      label: `${orden.ord_nombre.trim()} (${ordenElementCounts[orden.ord_id] || 0})`,\n      onClick: event => handleOrdenClick(event, `orden-${orden.ord_id}`),\n      hasData: familias.some(familia => familia.ord_id === orden.ord_id),\n      children: renderFamilias(orden.ord_id)\n    }, orden.ord_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this));\n  };\n  const renderFamilias = ordenId => {\n    const familiasOfOrden = familias.filter(familia => familia.ord_id === ordenId);\n    return familiasOfOrden.map(familia => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `familia-${familia.fam_id}`,\n      label: `${familia.gen_nombre.trim()} (${familiaElementCounts[familia.fam_id] || 0})`,\n      onClick: event => handleFamiliaClick(event, `familia-${familia.fam_id}`),\n      hasData: generos.some(genero => genero.fam_id === familia.fam_id),\n      children: renderGeneros(familia.fam_id)\n    }, familia.fam_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this));\n  };\n  const renderGeneros = familiaId => {\n    const generosOfFamilia = generos.filter(genero => genero.fam_id === familiaId);\n    return generosOfFamilia.map(genero => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `genero-${genero.gen_id}`,\n      label: genero.gen_nombre.trim(),\n      onClick: event => handleGeneroClick(event, `genero-${genero.gen_id}`),\n      hasData: especies.some(especie => especie.gen_id === genero.gen_id),\n      children: renderEspecies(genero.gen_id)\n    }, genero.gen_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this));\n  };\n  const renderEspecies = generoId => {\n    const especiesOfGenero = especies.filter(especie => especie.gen_id === generoId);\n    return especiesOfGenero.map(especie => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `especie-${especie.esp_id}`,\n      label: especie.esp_nombre.trim()\n    }, especie.esp_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          border: 1,\n          borderColor: \"#333333\",\n          p: 2,\n          borderRadius: 2,\n          minHeight: \"100vh\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: /*#__PURE__*/_jsxDEV(TreeView, {\n                defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 40\n                }, this),\n                defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 38\n                }, this),\n                sx: {\n                  height: 240,\n                  flexGrow: 1\n                },\n                children: renderReinos()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 5\n  }, this);\n}\n_s(FileSystemNavigator, \"BsjpTYvj7TrzE3DPUyvbzYTCdeU=\");\n_c2 = FileSystemNavigator;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledTreeItem\");\n$RefreshReg$(_c2, \"FileSystemNavigator\");","map":{"version":3,"names":["React","useState","useEffect","TreeView","styled","ExpandMoreIcon","ChevronRightIcon","TreeItem","treeItemClasses","Grid","Typography","Box","SearchIcon","axios","jsxDEV","_jsxDEV","StyledTreeItem","_ref","rootNode","hasData","borderColor","position","pointerEvents","content","width","left","top","borderBottom","group","marginLeft","paddingLeft","borderLeft","color","fontWeight","_c","FileSystemNavigator","_s","reinos","setReinos","filos","setFilos","clases","setClases","ordenes","setOrdenes","familias","setFamilias","generos","setGeneros","especies","setEspecies","reinoElementCounts","setReinoElementCounts","filoElementCounts","setFiloElementCounts","claseElementCounts","setClaseElementCounts","ordenElementCounts","setOrdenElementCounts","familiaElementCounts","setFamiliaElementCounts","fetchReinos","response","get","reinosData","data","elementCounts","reino","rei_id","filosData","length","error","console","fetchFilos","reinoId","filo","fil_id","clasesData","fetchClases","filoId","clase","cla_id","ordenesData","fetchOrdenes","claseId","orden","ord_id","familiasData","fetchFamilias","ordenId","familia","fam_id","generosData","fetchGeneros","familiaId","fetchEspecies","generoId","handleReinoClick","event","nodeId","split","find","toString","handleFiloClick","handleClaseClick","handleOrdenClick","handleFamiliaClick","handleGeneroClick","genero","gen_id","renderReinos","map","label","rei_nombre","trim","onClick","some","style","children","renderFilos","fileName","_jsxFileName","lineNumber","columnNumber","filosOfReino","filter","fil_nombre","renderClases","clasesOfFilo","cla_nombre","renderOrdenes","ordenesOfClase","ord_nombre","renderFamilias","familiasOfOrden","gen_nombre","renderGeneros","generosOfFamilia","especie","renderEspecies","especiesOfGenero","esp_id","esp_nombre","container","spacing","item","xs","border","p","borderRadius","minHeight","display","flexDirection","defaultCollapseIcon","defaultExpandIcon","sx","height","flexGrow","_c2","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/TaskForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport { Grid, Typography, Box } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axios from \"axios\";\n\nconst StyledTreeItem = styled(TreeItem)(({ rootNode, hasData }) => {\n  const borderColor = \"gray\";\n\n  return {\n    position: \"relative\",\n    \"&:before\": {\n      pointerEvents: \"none\",\n      content: '\"\"',\n      position: \"absolute\",\n      width: 32,\n      left: -16,\n      top: 12,\n      borderBottom: !rootNode ? `1px dashed ${borderColor}` : \"none\",\n    },\n    [`& .${treeItemClasses.group}`]: {\n      marginLeft: 16,\n      paddingLeft: 18,\n      borderLeft: `1px dashed ${borderColor}`,\n    },\n    \"& .MuiTreeItem-content\": {\n      color: hasData ? \"black\" : \"inherit\",\n      fontWeight: hasData ? \"bold\" : \"inherit\",\n    },\n    \"& .MuiTreeItem-iconContainer\": {\n      color: hasData ? \"black\" : \"inherit\",\n    },\n  };\n});\n\nexport default function FileSystemNavigator() {\n  const [reinos, setReinos] = useState([]);\n  const [filos, setFilos] = useState([]);\n  const [clases, setClases] = useState([]);\n  const [ordenes, setOrdenes] = useState([]);\n  const [familias, setFamilias] = useState([]);\n  const [generos, setGeneros] = useState([]);\n  const [especies, setEspecies] = useState([]);\n\n  const [reinoElementCounts, setReinoElementCounts] = useState({});\n  const [filoElementCounts, setFiloElementCounts] = useState({});\n  const [claseElementCounts, setClaseElementCounts] = useState({});\n  const [ordenElementCounts, setOrdenElementCounts] = useState({});\n  const [familiaElementCounts, setFamiliaElementCounts] = useState({});\n\n\n\n  useEffect(() => {\n    // Obtener los reinos al cargar el componente\n    fetchReinos();\n  }, []);\n\n  const fetchReinos = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/reinos\");\n      const reinosData = response.data;\n\n      // Obtener el número de elementos de cada reino\n      const elementCounts = {};\n\n      for (const reino of reinosData) {\n        const response = await axios.get(`http://localhost:4000/filos/${reino.rei_id}`);\n        const filosData = response.data;\n        elementCounts[reino.rei_id] = filosData.length;\n      }\n\n      setReinos(reinosData);\n      setReinoElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching reinos data: \", error);\n    }\n  };\n\n\n  const fetchFilos = async (reinoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/filos/${reinoId}`);\n      const filosData = response.data;\n\n      // Obtener el número de elementos de cada filo\n      const elementCounts = {};\n\n      for (const filo of filosData) {\n        const response = await axios.get(`http://localhost:4000/clases/${filo.fil_id}`);\n        const clasesData = response.data;\n        elementCounts[filo.fil_id] = clasesData.length;\n      }\n\n      setFilos(filosData);\n      setFiloElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching filos data: \", error);\n    }\n  };\n\n\n  const fetchClases = async (filoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/clases/${filoId}`);\n      const clasesData = response.data;\n\n      // Obtener el número de elementos de cada clase\n      const elementCounts = {};\n\n      for (const clase of clasesData) {\n        const response = await axios.get(`http://localhost:4000/ordenes/${clase.cla_id}`);\n        const ordenesData = response.data;\n        elementCounts[clase.cla_id] = ordenesData.length;\n      }\n\n      setClases(clasesData);\n      setClaseElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching clases data: \", error);\n    }\n  };\n\n\n  const fetchOrdenes = async (claseId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/ordenes/${claseId}`);\n      const ordenesData = response.data;\n\n      // Obtener el número de elementos de cada orden\n      const elementCounts = {};\n\n      for (const orden of ordenesData) {\n        const response = await axios.get(`http://localhost:4000/familias/${orden.ord_id}`);\n        const familiasData = response.data;\n        elementCounts[orden.ord_id] = familiasData.length;\n      }\n\n      setOrdenes(ordenesData);\n      setOrdenElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching ordenes data: \", error);\n    }\n  };\n\n\n  const fetchFamilias = async (ordenId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/familias/${ordenId}`);\n      const familiasData = response.data;\n  \n      // Obtener el número de elementos de cada familia\n      const elementCounts = {};\n  \n      for (const familia of familiasData) {\n        const response = await axios.get(`http://localhost:4000/generos/${familia.fam_id}`);\n        const generosData = response.data;\n        elementCounts[familia.fam_id] = generosData.length;\n      }\n  \n      setFamilias(familiasData);\n      setFamiliaElementCounts(elementCounts);\n    } catch (error) {\n      console.error(\"Error fetching familias data: \", error);\n    }\n  };\n  \n  const fetchGeneros = async (familiaId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/generos/${familiaId}`);\n      setGeneros(response.data);\n    } catch (error) {\n      console.error(\"Error fetching generos data: \", error);\n    }\n  };\n\n  const fetchEspecies = async (generoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/especies/${generoId}`);\n      setEspecies(response.data);\n    } catch (error) {\n      console.error(\"Error fetching especies data: \", error);\n    }\n  };\n\n  const handleReinoClick = (event, nodeId) => {\n    if (nodeId) {\n      const reinoId = nodeId.split(\"-\")[1];\n      const reino = reinos.find((reino) => reino.rei_id.toString() === reinoId);\n      if (reino) {\n        fetchFilos(reinoId);\n        setClases([]); // Reiniciar las clases cuando se cambia de reino\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleFiloClick = (event, nodeId) => {\n    if (nodeId) {\n      const filoId = nodeId.split(\"-\")[1];\n      const filo = filos.find((filo) => filo.fil_id.toString() === filoId);\n      if (filo) {\n        fetchClases(filoId);\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleClaseClick = (event, nodeId) => {\n    if (nodeId) {\n      const claseId = nodeId.split(\"-\")[1];\n      const clase = clases.find((clase) => clase.cla_id.toString() === claseId);\n      if (clase) {\n        fetchOrdenes(claseId);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleOrdenClick = (event, nodeId) => {\n    if (nodeId) {\n      const ordenId = nodeId.split(\"-\")[1];\n      const orden = ordenes.find((orden) => orden.ord_id.toString() === ordenId);\n      if (orden) {\n        fetchFamilias(ordenId);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleFamiliaClick = (event, nodeId) => {\n    if (nodeId) {\n      const familiaId = nodeId.split(\"-\")[1];\n      const familia = familias.find((familia) => familia.fam_id.toString() === familiaId);\n      if (familia) {\n        fetchGeneros(familiaId);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleGeneroClick = (event, nodeId) => {\n    if (nodeId) {\n      const generoId = nodeId.split(\"-\")[1];\n      const genero = generos.find((genero) => genero.gen_id.toString() === generoId);\n      if (genero) {\n        fetchEspecies(generoId);\n      }\n    }\n  };\n\n  const renderReinos = () => {\n    return reinos.map((reino) => (\n      <StyledTreeItem\n        key={reino.rei_id}\n        nodeId={`reino-${reino.rei_id}`}\n        label={`${reino.rei_nombre.trim()} (${reinoElementCounts[reino.rei_id] || 0})`}\n        onClick={(event) => handleReinoClick(event, `reino-${reino.rei_id}`)}\n        hasData={filos.some((filo) => filo.rei_id === reino.rei_id)}\n        style={{ color: \"#000000\" }} // Cambiar el color del texto a negro\n      >\n        {/* Renderizar los filos */}\n        {renderFilos(reino.rei_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n\n  const renderFilos = (reinoId) => {\n    const filosOfReino = filos.filter((filo) => filo.rei_id === reinoId);\n\n    return filosOfReino.map((filo) => (\n      <StyledTreeItem\n        key={filo.fil_id}\n        nodeId={`filo-${filo.fil_id}`}\n        label={`${filo.fil_nombre.trim()} (${filoElementCounts[filo.fil_id] || 0})`}\n        onClick={(event) => handleFiloClick(event, `filo-${filo.fil_id}`)}\n        hasData={clases.some((clase) => clase.fil_id === filo.fil_id)}\n      >\n        {/* Renderizar las clases */}\n        {renderClases(filo.fil_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n\n  const renderClases = (filoId) => {\n    const clasesOfFilo = clases.filter((clase) => clase.fil_id === filoId);\n\n    return clasesOfFilo.map((clase) => (\n      <StyledTreeItem\n        key={clase.cla_id}\n        nodeId={`clase-${clase.cla_id}`}\n        label={`${clase.cla_nombre.trim()} (${claseElementCounts[clase.cla_id] || 0})`}\n        onClick={(event) => handleClaseClick(event, `clase-${clase.cla_id}`)}\n        hasData={ordenes.some((orden) => orden.cla_id === clase.cla_id)}\n      >\n        {/* Renderizar las órdenes */}\n        {renderOrdenes(clase.cla_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n\n  const renderOrdenes = (claseId) => {\n    const ordenesOfClase = ordenes.filter((orden) => orden.cla_id === claseId);\n\n    return ordenesOfClase.map((orden) => (\n      <StyledTreeItem\n        key={orden.ord_id}\n        nodeId={`orden-${orden.ord_id}`}\n        label={`${orden.ord_nombre.trim()} (${ordenElementCounts[orden.ord_id] || 0})`}\n        onClick={(event) => handleOrdenClick(event, `orden-${orden.ord_id}`)}\n        hasData={familias.some((familia) => familia.ord_id === orden.ord_id)}\n      >\n        {/* Renderizar las familias */}\n        {renderFamilias(orden.ord_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n\n  const renderFamilias = (ordenId) => {\n    const familiasOfOrden = familias.filter((familia) => familia.ord_id === ordenId);\n  \n    return familiasOfOrden.map((familia) => (\n      <StyledTreeItem\n        key={familia.fam_id}\n        nodeId={`familia-${familia.fam_id}`}\n        label={`${familia.gen_nombre.trim()} (${familiaElementCounts[familia.fam_id] || 0})`}\n        onClick={(event) => handleFamiliaClick(event, `familia-${familia.fam_id}`)}\n        hasData={generos.some((genero) => genero.fam_id === familia.fam_id)}\n      >\n        {/* Renderizar los géneros */}\n        {renderGeneros(familia.fam_id)}\n      </StyledTreeItem>\n    ));\n  };\n  \n\n  const renderGeneros = (familiaId) => {\n    const generosOfFamilia = generos.filter((genero) => genero.fam_id === familiaId);\n\n    return generosOfFamilia.map((genero) => (\n      <StyledTreeItem\n        key={genero.gen_id}\n        nodeId={`genero-${genero.gen_id}`}\n        label={genero.gen_nombre.trim()}\n        onClick={(event) => handleGeneroClick(event, `genero-${genero.gen_id}`)}\n        hasData={especies.some((especie) => especie.gen_id === genero.gen_id)}\n      >\n        {/* Renderizar las especies */}\n        {renderEspecies(genero.gen_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderEspecies = (generoId) => {\n    const especiesOfGenero = especies.filter((especie) => especie.gen_id === generoId);\n\n    return especiesOfGenero.map((especie) => (\n      <StyledTreeItem\n        key={especie.esp_id}\n        nodeId={`especie-${especie.esp_id}`}\n        label={especie.esp_nombre.trim()}\n      />\n    ));\n  };\n\n  return (\n    <Box>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {/* Contenedor del Árbol y Trabajo académico */}\n          <Box\n            border={1}\n            borderColor=\"#333333\"\n            p={2}\n            borderRadius={2}\n            minHeight=\"100vh\"\n            display=\"flex\"\n            flexDirection=\"column\"\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={4}>\n                {/* Árbol filogenético */}\n                <TreeView\n                  defaultCollapseIcon={<ExpandMoreIcon />}\n                  defaultExpandIcon={<ChevronRightIcon />}\n                  sx={{ height: 240, flexGrow: 1 }}\n                >\n                  {/* Renderizar los reinos */}\n                  {renderReinos()}\n                </TreeView>\n              </Grid>\n            </Grid>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}