{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\Inicio.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport { Grid, Typography, Box, TextField, IconButton, Button } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axios from \"axios\";\nimport { Link } from 'react-router-dom';\nimport { Autocomplete } from '@mui/lab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledTreeItem = styled(TreeItem)(_ref => {\n  let {\n    rootNode,\n    hasData\n  } = _ref;\n  const borderColor = \"gray\";\n  const nivelColor = \"#808080\"; // Color para el nivel \"Reino\"\n  const itemColor = \"#189FFF\"; // Color para el nombre del elemento\n\n  return {\n    position: \"relative\",\n    \"&:before\": {\n      pointerEvents: \"none\",\n      content: '\"\"',\n      position: \"absolute\",\n      width: 32,\n      left: -23,\n      top: 12,\n      borderBottom: !rootNode ? `1px solid ${borderColor}` : \"none\"\n    },\n    [`& .${treeItemClasses.group}`]: {\n      marginLeft: 16,\n      paddingLeft: 23,\n      borderLeft: `1px solid ${borderColor}`\n    },\n    \"& .MuiTreeItem-content\": {\n      color: nivelColor,\n      fontWeight: hasData ? \"bold\" : \"inherit\",\n      fontSize: \"30px\"\n    },\n    \"& .MuiTreeItem-iconContainer\": {\n      color: itemColor\n    },\n    \"& .MuiTreeItem-label\": {\n      whiteSpace: \"nowrap\"\n    },\n    \"& .doi-row\": {\n      cursor: \"text\",\n      userSelect: \"text\"\n    },\n    \"& .doi-text\": {\n      display: \"inline-block\"\n    }\n  };\n});\n_c = StyledTreeItem;\nconst StyledBox = styled(Box)({\n  width: \"90%\",\n  fontSize: \"1.2em\",\n  margin: \"20px auto\",\n  textAlign: \"center\",\n  \"& p\": {\n    textAlign: \"justify\",\n    color: \"#000000\",\n    fontFamily: \"Helvetica Neue\",\n    margin: \"20px 20px\"\n  },\n  maxWidth: \"600px\",\n  color: \"#000000\" // Cambia el color del texto a negro\n});\n_c2 = StyledBox;\nexport default function FileSystemNavigator() {\n  _s();\n  const [showContent, setShowContent] = useState(false);\n  const [colorNiveles, setColorNiveles] = useState({});\n  const [colorItems, setColorItems] = useState({});\n  const [reinos, setReinos] = useState([]);\n  const [filos, setFilos] = useState([]);\n  const [clases, setClases] = useState([]);\n  const [ordenes, setOrdenes] = useState([]);\n  const [familias, setFamilias] = useState([]);\n  const [generos, setGeneros] = useState([]);\n  const [especies, setEspecies] = useState([]);\n  const [reinoElementCounts, setReinoElementCounts] = useState({});\n  const [filoElementCounts, setFiloElementCounts] = useState({});\n  const [claseElementCounts, setClaseElementCounts] = useState({});\n  const [ordenElementCounts, setOrdenElementCounts] = useState({});\n  const [familiaElementCounts, setFamiliaElementCounts] = useState({});\n  const [generoElementCounts, setGeneroElementCounts] = useState({});\n  const [noticias, setNoticias] = useState([]);\n  const [countryOptions, setCountryOptions] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [noInvestigacionesMessage, setNoInvestigacionesMessage] = useState(\"\");\n  const [speciesOptions, setSpeciesOptions] = useState([]);\n  const colorNivel = \"#00000073\";\n  const colorItem = \"#1890FF\";\n  const tamanoNivel = \"15px\";\n  const tamanoItem = \"14px\";\n  const tipoLetra = \"Helvetica Neue\";\n  useEffect(() => {\n    // Obtener los reinos al cargar el componente\n    fetchReinos();\n  }, []);\n\n  ///////////////////////////////////   LOGICA ////////////////////////////////////////////////////////\n\n  const fetchReinos = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/reinos\");\n      const reinosData = response.data;\n\n      // Asignar el nivel \"Reino\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const reino of reinosData) {\n        coloresNiveles[reino.rei_id] = colorNivel; // Color gris para el nivel \"Reino\"\n        coloresItems[reino.rei_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada reino\n      const elementCounts = {};\n      for (const reino of reinosData) {\n        const response = await axios.get(`http://localhost:4000/filos/${reino.rei_id}`);\n        const filosData = response.data;\n        elementCounts[reino.rei_id] = filosData.length;\n      }\n      setReinos(reinosData);\n      setReinoElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching reinos data: \", error);\n    }\n  };\n  const fetchFilos = async reinoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/filos/${reinoId}`);\n      const filosData = response.data;\n\n      // Asignar el nivel \"Filo\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const filo of filosData) {\n        coloresNiveles[filo.fil_id] = colorNivel;\n        coloresItems[filo.fil_id] = colorItem;\n      }\n\n      // Obtener el número de elementos de cada filo\n      const elementCounts = {};\n      for (const filo of filosData) {\n        const response = await axios.get(`http://localhost:4000/clases/${filo.fil_id}`);\n        const clasesData = response.data;\n        elementCounts[filo.fil_id] = clasesData.length;\n      }\n      setFilos(filosData);\n      setFiloElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching filos data: \", error);\n    }\n  };\n  const fetchClases = async filoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/clases/${filoId}`);\n      const clasesData = response.data;\n\n      // Asignar el nivel \"Clase\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const clase of clasesData) {\n        coloresNiveles[clase.cla_id] = colorNivel; // Color gris para el nivel \"Clase\"\n        coloresItems[clase.cla_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada clase\n      const elementCounts = {};\n      for (const clase of clasesData) {\n        const response = await axios.get(`http://localhost:4000/ordenes/${clase.cla_id}`);\n        const ordenesData = response.data;\n        elementCounts[clase.cla_id] = ordenesData.length;\n      }\n      setClases(clasesData);\n      setClaseElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching clases data: \", error);\n    }\n  };\n  const fetchOrdenes = async claseId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/ordenes/${claseId}`);\n      const ordenesData = response.data;\n\n      // Asignar el nivel \"Orden\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const orden of ordenesData) {\n        coloresNiveles[orden.ord_id] = colorNivel; // Color gris para el nivel \"Orden\"\n        coloresItems[orden.ord_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada orden\n      const elementCounts = {};\n      for (const orden of ordenesData) {\n        const response = await axios.get(`http://localhost:4000/familias/${orden.ord_id}`);\n        const familiasData = response.data;\n        elementCounts[orden.ord_id] = familiasData.length;\n      }\n      setOrdenes(ordenesData);\n      setOrdenElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching ordenes data: \", error);\n    }\n  };\n  const fetchFamilias = async ordenId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/familias/${ordenId}`);\n      const familiasData = response.data;\n\n      // Asignar el nivel \"Familia\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const familia of familiasData) {\n        coloresNiveles[familia.fam_id] = colorNivel; // Color gris para el nivel \"Familia\"\n        coloresItems[familia.fam_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada familia\n      const elementCounts = {};\n      for (const familia of familiasData) {\n        const response = await axios.get(`http://localhost:4000/generos/${familia.fam_id}`);\n        const generosData = response.data;\n        elementCounts[familia.fam_id] = generosData.length;\n      }\n      setFamilias(familiasData);\n      setFamiliaElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching familias data: \", error);\n    }\n  };\n  const fetchGeneros = async familiaId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/generos/${familiaId}`);\n      const generosData = response.data;\n\n      // Asignar el nivel \"Género\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const genero of generosData) {\n        coloresNiveles[genero.gen_id] = colorNivel; // Color gris para el nivel \"Género\"\n        coloresItems[genero.gen_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n      // Obtener el número de elementos de cada género\n      const elementCounts = {};\n      for (const genero of generosData) {\n        const response = await axios.get(`http://localhost:4000/especies/${genero.gen_id}`);\n        const especiesData = response.data;\n        elementCounts[genero.gen_id] = especiesData.length;\n      }\n      setGeneros(generosData);\n      setGeneroElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching generos data: \", error);\n    }\n  };\n  const fetchEspecies = async generoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/especies/${generoId}`);\n      const especiesData = response.data;\n      // Asignar el nivel \"Especie\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const especie of especiesData) {\n        coloresNiveles[especie.esp_id] = colorNivel; // Color gris para el nivel \"Especie\"\n        coloresItems[especie.esp_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      setEspecies(response.data);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching especies data: \", error);\n    }\n  };\n  const fetchCountries = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/country');\n      const countriesData = response.data.map(country => ({\n        label: country.pas_nombre.trim(),\n        value: country.pas_nombre.trim()\n      }));\n      setCountryOptions(countriesData);\n    } catch (error) {\n      console.error('Error fetching countries data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n\n  ///////////////////////////////////     EVENTOS  ////////////////////////////////////////////////////////\n\n  const handleCountryChange = (event, value) => {\n    setSelectedCountry(value);\n  };\n  const handleReinoClick = (event, nodeId) => {\n    if (nodeId) {\n      const reinoId = nodeId.split(\"-\")[1];\n      const reino = reinos.find(reino => reino.rei_id.toString() === reinoId);\n      if (reino) {\n        fetchFilos(reinoId);\n        setClases([]); // Reiniciar las clases cuando se cambia de reino\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleFiloClick = (event, nodeId) => {\n    if (nodeId) {\n      const filoId = nodeId.split(\"-\")[1];\n      const filo = filos.find(filo => filo.fil_id.toString() === filoId);\n      if (filo) {\n        fetchClases(filoId);\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleClaseClick = (event, nodeId) => {\n    if (nodeId) {\n      const claseId = nodeId.split(\"-\")[1];\n      const clase = clases.find(clase => clase.cla_id.toString() === claseId);\n      if (clase) {\n        fetchOrdenes(claseId);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleOrdenClick = (event, nodeId) => {\n    if (nodeId) {\n      const ordenId = nodeId.split(\"-\")[1];\n      const orden = ordenes.find(orden => orden.ord_id.toString() === ordenId);\n      if (orden) {\n        fetchFamilias(ordenId);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleFamiliaClick = (event, nodeId) => {\n    if (nodeId) {\n      const familiaId = nodeId.split(\"-\")[1];\n      const familia = familias.find(familia => familia.fam_id.toString() === familiaId);\n      if (familia) {\n        fetchGeneros(familiaId);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleGeneroClick = (event, nodeId) => {\n    if (nodeId) {\n      const generoId = nodeId.split(\"-\")[1];\n      const genero = generos.find(genero => genero.gen_id.toString() === generoId);\n      if (genero) {\n        fetchEspecies(generoId);\n      }\n    }\n  };\n  const handleButtonClickNoticias = async () => {\n    if (selectedCountry) {\n      setNoticias([]);\n      try {\n        const countryParam = selectedCountry.value.trim();\n        const url = `http://localhost:4000/noticias/${countryParam}`;\n        const response = await axios.get(url);\n        const noticiasData = response.data;\n        if (noticiasData.length === 0) {\n          setNoInvestigacionesMessage(\"Por el momento no hay Investigaciones en nuestro sistema con el país seleccionado.\");\n        } else {\n          setNoticias(noticiasData);\n          setShowContent(!showContent);\n          setNoInvestigacionesMessage(\"\"); // Limpiar el mensaje si hay investigaciones\n        }\n      } catch (error) {\n        console.error(\"Error fetching noticias data: \", error);\n      }\n    }\n  };\n  const handleSpeciesSearch = async (event, value) => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/taxonEspecie\");\n      const speciesData = response.data;\n      setSpeciesOptions(speciesData.map(species => species.esp_nombre.trim()));\n    } catch (error) {\n      console.error(\"Error fetching species data: \", error);\n    }\n  };\n\n  ///////////////////////////////////   RENDERS  ////////////////////////////////////////////////////////\n\n  const renderReinos = () => {\n    return reinos.map(reino => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `reino-${reino.rei_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[reino.rei_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Reino:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[reino.rei_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [reino.rei_nombre.trim(), \" (\", reinoElementCounts[reino.rei_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleReinoClick(event, `reino-${reino.rei_id}`),\n      hasData: filos.some(filo => filo.rei_id === reino.rei_id),\n      children: renderFilos(reino.rei_id)\n    }, reino.rei_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 7\n    }, this));\n  };\n  const renderFilos = reinoId => {\n    const filosOfReino = filos.filter(filo => filo.rei_id === reinoId);\n    return filosOfReino.map(filo => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `filo-${filo.fil_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[filo.fil_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Filo:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[filo.fil_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [filo.fil_nombre.trim(), \" (\", filoElementCounts[filo.fil_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleFiloClick(event, `filo-${filo.fil_id}`),\n      hasData: clases.some(clase => clase.fil_id === filo.fil_id),\n      children: renderClases(filo.fil_id)\n    }, filo.fil_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this));\n  };\n  const renderClases = filoId => {\n    const clasesOfFilo = clases.filter(clase => clase.fil_id === filoId);\n    return clasesOfFilo.map(clase => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `clase-${clase.cla_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[clase.cla_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Clase:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[clase.cla_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [clase.cla_nombre.trim(), \" (\", claseElementCounts[clase.cla_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleClaseClick(event, `clase-${clase.cla_id}`),\n      hasData: ordenes.some(orden => orden.cla_id === clase.cla_id),\n      children: renderOrdenes(clase.cla_id)\n    }, clase.cla_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this));\n  };\n  const renderOrdenes = claseId => {\n    const ordenesOfClase = ordenes.filter(orden => orden.cla_id === claseId);\n    return ordenesOfClase.map(orden => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `orden-${orden.ord_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[orden.ord_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Orden:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[orden.ord_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [orden.ord_nombre.trim(), \" (\", ordenElementCounts[orden.ord_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleOrdenClick(event, `orden-${orden.ord_id}`),\n      hasData: familias.some(familia => familia.ord_id === orden.ord_id),\n      children: renderFamilias(orden.ord_id)\n    }, orden.ord_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 7\n    }, this));\n  };\n  const renderFamilias = ordenId => {\n    const familiasOfOrden = familias.filter(familia => familia.ord_id === ordenId);\n    return familiasOfOrden.map(familia => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `familia-${familia.fam_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[familia.fam_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Familia:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[familia.fam_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [familia.gen_nombre.trim(), \"  (\", familiaElementCounts[familia.fam_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleFamiliaClick(event, `familia-${familia.fam_id}`),\n      hasData: generos.some(genero => genero.fam_id === familia.fam_id),\n      children: renderGeneros(familia.fam_id)\n    }, familia.fam_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this));\n  };\n  const renderGeneros = familiaId => {\n    const generosOfFamilia = generos.filter(genero => genero.fam_id === familiaId);\n    return generosOfFamilia.map(genero => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `genero-${genero.gen_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[genero.gen_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"G\\xE9nero:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[genero.gen_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [genero.gen_nombre.trim(), \" (\", generoElementCounts[genero.gen_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleGeneroClick(event, `genero-${genero.gen_id}`),\n      hasData: especies.some(especie => especie.gen_id === genero.gen_id),\n      children: renderEspecies(genero.gen_id)\n    }, genero.gen_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }, this));\n  };\n  const renderEspecies = generoId => {\n    const especiesOfGenero = especies.filter(especie => especie.gen_id === generoId);\n    return especiesOfGenero.map(especie => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `especie-${especie.esp_id}`,\n      label: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            style: {\n              color: colorNiveles[especie.esp_id],\n              fontSize: tamanoNivel,\n              fontFamily: tipoLetra\n            },\n            children: \"Especie:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Link, {\n            to: `https://doi.org/${especie.ref_doi.trim()}`,\n            target: \"_blank\",\n            style: {\n              color: colorItems[especie.esp_id],\n              fontSize: tamanoItem,\n              fontFamily: tipoLetra\n            },\n            children: especie.esp_nombre.trim()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"doi-row\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            style: {\n              color: colorNiveles[especie.esp_id],\n              fontSize: tamanoNivel,\n              fontFamily: tipoLetra\n            },\n            children: \"DOI:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"doi-text\",\n            style: {\n              color: colorItems[especie.esp_id],\n              fontSize: tamanoItem,\n              fontFamily: tipoLetra\n            },\n            children: especie.ref_doi.trim()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 11\n      }, this)\n    }, especie.esp_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 7\n    }, this));\n  };\n\n  ///////////////////////////////////   GRAFICA  ////////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(StyledBox, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            fontFamily: \"Helvetica Neue\",\n            children: \"Descripci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            fontFamily: \"Helvetica Neue\",\n            children: \"Nuestro sitio web es una plataforma dise\\xF1ada para facilitar la georreferenciaci\\xF3n de datos de especies. Con su interfaz f\\xE1cil de usar y su funcionalidad avanzada, permite a los investigadores, administradores y usuarios administrar y analizar de manera eficiente la informaci\\xF3n sobre especies.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: [/*#__PURE__*/_jsxDEV(StyledBox, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"\\xC1rbol Filogen\\xE9tico\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 670,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                options: speciesOptions,\n                getOptionLabel: option => option,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                  ...params,\n                  label: \"Especie\",\n                  variant: \"outlined\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 675,\n                  columnNumber: 21\n                }, this),\n                onInputChange: handleSpeciesSearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TreeView, {\n              defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 682,\n                columnNumber: 38\n              }, this),\n              defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 683,\n                columnNumber: 36\n              }, this),\n              sx: {\n                height: 240,\n                flexGrow: 1,\n                marginLeft: \"60px\"\n              },\n              children: renderReinos()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 8,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(StyledBox, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: \"Investigaciones\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  value: selectedCountry,\n                  onChange: handleCountryChange,\n                  options: countryOptions,\n                  getOptionLabel: option => option.label,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                    ...params,\n                    placeholder: \"Seleccionar Pa\\xEDs\",\n                    variant: \"outlined\",\n                    size: \"small\",\n                    fullWidth: true,\n                    sx: {\n                      width: '50%',\n                      fontSize: '12px'\n                    },\n                    InputProps: {\n                      ...params.InputProps,\n                      endAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [params.InputProps.endAdornment, /*#__PURE__*/_jsxDEV(IconButton, {\n                          children: /*#__PURE__*/_jsxDEV(SearchIcon, {\n                            onClick: handleButtonClickNoticias\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 716,\n                            columnNumber: 33\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 715,\n                          columnNumber: 31\n                        }, this)]\n                      }, void 0, true)\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 703,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 697,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"error\",\n                  children: noInvestigacionesMessage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 724,\n                  columnNumber: 19\n                }, this), showContent && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: noticias.map((noticia, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(Link, {\n                      to: `https://doi.org/${noticia.ref_doi}`,\n                      target: \"_blank\",\n                      rel: \"noopener noreferrer\",\n                      style: {\n                        textDecoration: \"none\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"h6\",\n                        style: {\n                          fontSize: \"14px\",\n                          fontWeight: \"bold\",\n                          color: \"#333333\",\n                          fontFamily: \"Helvetica Neue\",\n                          textTransform: \"uppercase\",\n                          marginBottom: \"20px\"\n                        },\n                        children: noticia.ref_titulo\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 733,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 732,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body1\",\n                      style: {\n                        textAlign: \"justify\",\n                        fontSize: \"14px\",\n                        color: \"#666666\",\n                        fontFamily: \"Helvetica Neue\",\n                        marginBottom: \"20px\"\n                      },\n                      children: noticia.ref_resumen\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 737,\n                      columnNumber: 27\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 731,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 650,\n    columnNumber: 5\n  }, this);\n}\n_s(FileSystemNavigator, \"MpZ5BANTNDeeH0Y8JfPfld+VmEM=\");\n_c3 = FileSystemNavigator;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledTreeItem\");\n$RefreshReg$(_c2, \"StyledBox\");\n$RefreshReg$(_c3, \"FileSystemNavigator\");","map":{"version":3,"names":["React","useState","useEffect","TreeView","styled","ExpandMoreIcon","ChevronRightIcon","TreeItem","treeItemClasses","Grid","Typography","Box","TextField","IconButton","Button","SearchIcon","axios","Link","Autocomplete","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledTreeItem","_ref","rootNode","hasData","borderColor","nivelColor","itemColor","position","pointerEvents","content","width","left","top","borderBottom","group","marginLeft","paddingLeft","borderLeft","color","fontWeight","fontSize","whiteSpace","cursor","userSelect","display","_c","StyledBox","margin","textAlign","fontFamily","maxWidth","_c2","FileSystemNavigator","_s","showContent","setShowContent","colorNiveles","setColorNiveles","colorItems","setColorItems","reinos","setReinos","filos","setFilos","clases","setClases","ordenes","setOrdenes","familias","setFamilias","generos","setGeneros","especies","setEspecies","reinoElementCounts","setReinoElementCounts","filoElementCounts","setFiloElementCounts","claseElementCounts","setClaseElementCounts","ordenElementCounts","setOrdenElementCounts","familiaElementCounts","setFamiliaElementCounts","generoElementCounts","setGeneroElementCounts","noticias","setNoticias","countryOptions","setCountryOptions","selectedCountry","setSelectedCountry","noInvestigacionesMessage","setNoInvestigacionesMessage","speciesOptions","setSpeciesOptions","colorNivel","colorItem","tamanoNivel","tamanoItem","tipoLetra","fetchReinos","response","get","reinosData","data","coloresNiveles","coloresItems","reino","rei_id","elementCounts","filosData","length","error","console","fetchFilos","reinoId","filo","fil_id","clasesData","fetchClases","filoId","clase","cla_id","ordenesData","fetchOrdenes","claseId","orden","ord_id","familiasData","fetchFamilias","ordenId","familia","fam_id","generosData","fetchGeneros","familiaId","genero","gen_id","especiesData","fetchEspecies","generoId","especie","esp_id","fetchCountries","countriesData","map","country","label","pas_nombre","trim","value","handleCountryChange","event","handleReinoClick","nodeId","split","find","toString","handleFiloClick","handleClaseClick","handleOrdenClick","handleFamiliaClick","handleGeneroClick","handleButtonClickNoticias","countryParam","url","noticiasData","handleSpeciesSearch","speciesData","species","esp_nombre","renderReinos","children","component","style","fileName","_jsxFileName","lineNumber","columnNumber","rei_nombre","onClick","some","renderFilos","filosOfReino","filter","fil_nombre","renderClases","clasesOfFilo","cla_nombre","renderOrdenes","ordenesOfClase","ord_nombre","renderFamilias","familiasOfOrden","gen_nombre","renderGeneros","generosOfFamilia","renderEspecies","especiesOfGenero","to","ref_doi","target","className","container","spacing","item","xs","variant","options","getOptionLabel","option","renderInput","params","onInputChange","defaultCollapseIcon","defaultExpandIcon","sx","height","flexGrow","onChange","placeholder","size","fullWidth","InputProps","endAdornment","noticia","index","rel","textDecoration","textTransform","marginBottom","ref_titulo","ref_resumen","_c3","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/Inicio.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport { Grid, Typography, Box, TextField, IconButton, Button } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axios from \"axios\";\nimport { Link } from 'react-router-dom';\nimport { Autocomplete } from '@mui/lab';\n\nconst StyledTreeItem = styled(TreeItem)(({ rootNode, hasData }) => {\n  const borderColor = \"gray\";\n  const nivelColor = \"#808080\"; // Color para el nivel \"Reino\"\n  const itemColor = \"#189FFF\"; // Color para el nombre del elemento\n\n  return {\n    position: \"relative\",\n    \"&:before\": {\n      pointerEvents: \"none\",\n      content: '\"\"',\n      position: \"absolute\",\n      width: 32,\n      left: -23,\n      top: 12,\n      borderBottom: !rootNode ? `1px solid ${borderColor}` : \"none\",\n    },\n    [`& .${treeItemClasses.group}`]: {\n      marginLeft: 16,\n      paddingLeft: 23,\n      borderLeft: `1px solid ${borderColor}`,\n    },\n    \"& .MuiTreeItem-content\": {\n      color: nivelColor,\n      fontWeight: hasData ? \"bold\" : \"inherit\",\n      fontSize: \"30px\",\n    },\n    \"& .MuiTreeItem-iconContainer\": {\n      color: itemColor,\n    },\n    \"& .MuiTreeItem-label\": {\n      whiteSpace: \"nowrap\",\n    },\n    \"& .doi-row\": {\n      cursor: \"text\",\n      userSelect: \"text\",\n    },\n    \"& .doi-text\": {\n      display: \"inline-block\",\n    },\n  };\n});\n\nconst StyledBox = styled(Box)({\n  width: \"90%\",\n  fontSize: \"1.2em\",\n  margin: \"20px auto\",\n  textAlign: \"center\",\n  \"& p\": {\n    textAlign: \"justify\",\n    color: \"#000000\",\n    fontFamily: \"Helvetica Neue\",\n    margin: \"20px 20px\"\n  },\n  maxWidth: \"600px\",\n  color: \"#000000\" // Cambia el color del texto a negro\n});\n\nexport default function FileSystemNavigator() {\n  \n\n  const [showContent, setShowContent] = useState(false);\n\n  const [colorNiveles, setColorNiveles] = useState({});\n  const [colorItems, setColorItems] = useState({});\n\n  const [reinos, setReinos] = useState([]);\n  const [filos, setFilos] = useState([]);\n  const [clases, setClases] = useState([]);\n  const [ordenes, setOrdenes] = useState([]);\n  const [familias, setFamilias] = useState([]);\n  const [generos, setGeneros] = useState([]);\n  const [especies, setEspecies] = useState([]);\n\n  const [reinoElementCounts, setReinoElementCounts] = useState({});\n  const [filoElementCounts, setFiloElementCounts] = useState({});\n  const [claseElementCounts, setClaseElementCounts] = useState({});\n  const [ordenElementCounts, setOrdenElementCounts] = useState({});\n  const [familiaElementCounts, setFamiliaElementCounts] = useState({});\n  const [generoElementCounts, setGeneroElementCounts] = useState({});\n\n  const [noticias, setNoticias] = useState([]);\n\n  const [countryOptions, setCountryOptions] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [noInvestigacionesMessage, setNoInvestigacionesMessage] = useState(\"\");\n  const [speciesOptions, setSpeciesOptions] = useState([]);\n\n\n\n  const colorNivel = \"#00000073\"\n  const colorItem = \"#1890FF\"\n  const tamanoNivel = \"15px\"\n  const tamanoItem = \"14px\"\n  const tipoLetra = \"Helvetica Neue\"\n\n\n  useEffect(() => {\n    // Obtener los reinos al cargar el componente\n    fetchReinos();\n  }, []);\n\n  ///////////////////////////////////   LOGICA ////////////////////////////////////////////////////////\n\n  const fetchReinos = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/reinos\");\n      const reinosData = response.data;\n\n      // Asignar el nivel \"Reino\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const reino of reinosData) {\n        coloresNiveles[reino.rei_id] = colorNivel; // Color gris para el nivel \"Reino\"\n        coloresItems[reino.rei_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada reino\n      const elementCounts = {};\n\n      for (const reino of reinosData) {\n        const response = await axios.get(`http://localhost:4000/filos/${reino.rei_id}`);\n        const filosData = response.data;\n        elementCounts[reino.rei_id] = filosData.length;\n      }\n\n\n      setReinos(reinosData);\n      setReinoElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching reinos data: \", error);\n    }\n  };\n\n  const fetchFilos = async (reinoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/filos/${reinoId}`);\n      const filosData = response.data;\n\n\n      // Asignar el nivel \"Filo\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const filo of filosData) {\n        coloresNiveles[filo.fil_id] = colorNivel;\n        coloresItems[filo.fil_id] = colorItem;\n      }\n\n\n      // Obtener el número de elementos de cada filo\n      const elementCounts = {};\n\n      for (const filo of filosData) {\n        const response = await axios.get(`http://localhost:4000/clases/${filo.fil_id}`);\n        const clasesData = response.data;\n        elementCounts[filo.fil_id] = clasesData.length;\n      }\n\n      setFilos(filosData);\n      setFiloElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching filos data: \", error);\n    }\n  };\n\n\n  const fetchClases = async (filoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/clases/${filoId}`);\n      const clasesData = response.data;\n\n\n      // Asignar el nivel \"Clase\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const clase of clasesData) {\n        coloresNiveles[clase.cla_id] = colorNivel; // Color gris para el nivel \"Clase\"\n        coloresItems[clase.cla_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada clase\n      const elementCounts = {};\n\n      for (const clase of clasesData) {\n        const response = await axios.get(`http://localhost:4000/ordenes/${clase.cla_id}`);\n        const ordenesData = response.data;\n        elementCounts[clase.cla_id] = ordenesData.length;\n      }\n\n      setClases(clasesData);\n      setClaseElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching clases data: \", error);\n    }\n  };\n\n\n  const fetchOrdenes = async (claseId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/ordenes/${claseId}`);\n      const ordenesData = response.data;\n\n\n      // Asignar el nivel \"Orden\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const orden of ordenesData) {\n        coloresNiveles[orden.ord_id] = colorNivel; // Color gris para el nivel \"Orden\"\n        coloresItems[orden.ord_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada orden\n      const elementCounts = {};\n\n      for (const orden of ordenesData) {\n        const response = await axios.get(`http://localhost:4000/familias/${orden.ord_id}`);\n        const familiasData = response.data;\n        elementCounts[orden.ord_id] = familiasData.length;\n      }\n\n      setOrdenes(ordenesData);\n      setOrdenElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching ordenes data: \", error);\n    }\n  };\n\n\n  const fetchFamilias = async (ordenId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/familias/${ordenId}`);\n      const familiasData = response.data;\n\n      // Asignar el nivel \"Familia\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const familia of familiasData) {\n        coloresNiveles[familia.fam_id] = colorNivel; // Color gris para el nivel \"Familia\"\n        coloresItems[familia.fam_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada familia\n      const elementCounts = {};\n\n      for (const familia of familiasData) {\n        const response = await axios.get(`http://localhost:4000/generos/${familia.fam_id}`);\n        const generosData = response.data;\n        elementCounts[familia.fam_id] = generosData.length;\n      }\n\n      setFamilias(familiasData);\n      setFamiliaElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching familias data: \", error);\n    }\n  };\n\n  const fetchGeneros = async (familiaId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/generos/${familiaId}`);\n      const generosData = response.data;\n\n      // Asignar el nivel \"Género\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const genero of generosData) {\n        coloresNiveles[genero.gen_id] = colorNivel; // Color gris para el nivel \"Género\"\n        coloresItems[genero.gen_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n      // Obtener el número de elementos de cada género\n      const elementCounts = {};\n\n      for (const genero of generosData) {\n        const response = await axios.get(`http://localhost:4000/especies/${genero.gen_id}`);\n        const especiesData = response.data;\n        elementCounts[genero.gen_id] = especiesData.length;\n      }\n\n      setGeneros(generosData);\n      setGeneroElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching generos data: \", error);\n    }\n  };\n\n\n  const fetchEspecies = async (generoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/especies/${generoId}`);\n      const especiesData = response.data;\n      // Asignar el nivel \"Especie\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const especie of especiesData) {\n        coloresNiveles[especie.esp_id] = colorNivel; // Color gris para el nivel \"Especie\"\n        coloresItems[especie.esp_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      setEspecies(response.data);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching especies data: \", error);\n    }\n  };\n\n  const fetchCountries = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/country');\n      const countriesData = response.data.map((country) => ({\n        label: country.pas_nombre.trim(),\n        value: country.pas_nombre.trim()\n      }));\n      setCountryOptions(countriesData);\n    } catch (error) {\n      console.error('Error fetching countries data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n\n\n  ///////////////////////////////////     EVENTOS  ////////////////////////////////////////////////////////\n\n\n  const handleCountryChange = (event, value) => {\n    setSelectedCountry(value);\n  };\n\n  const handleReinoClick = (event, nodeId) => {\n    if (nodeId) {\n      const reinoId = nodeId.split(\"-\")[1];\n      const reino = reinos.find((reino) => reino.rei_id.toString() === reinoId);\n      if (reino) {\n        fetchFilos(reinoId);\n        setClases([]); // Reiniciar las clases cuando se cambia de reino\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleFiloClick = (event, nodeId) => {\n    if (nodeId) {\n      const filoId = nodeId.split(\"-\")[1];\n      const filo = filos.find((filo) => filo.fil_id.toString() === filoId);\n      if (filo) {\n        fetchClases(filoId);\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleClaseClick = (event, nodeId) => {\n    if (nodeId) {\n      const claseId = nodeId.split(\"-\")[1];\n      const clase = clases.find((clase) => clase.cla_id.toString() === claseId);\n      if (clase) {\n        fetchOrdenes(claseId);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleOrdenClick = (event, nodeId) => {\n    if (nodeId) {\n      const ordenId = nodeId.split(\"-\")[1];\n      const orden = ordenes.find((orden) => orden.ord_id.toString() === ordenId);\n      if (orden) {\n        fetchFamilias(ordenId);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleFamiliaClick = (event, nodeId) => {\n    if (nodeId) {\n      const familiaId = nodeId.split(\"-\")[1];\n      const familia = familias.find((familia) => familia.fam_id.toString() === familiaId);\n      if (familia) {\n        fetchGeneros(familiaId);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleGeneroClick = (event, nodeId) => {\n    if (nodeId) {\n      const generoId = nodeId.split(\"-\")[1];\n      const genero = generos.find((genero) => genero.gen_id.toString() === generoId);\n      if (genero) {\n        fetchEspecies(generoId);\n      }\n    }\n  };\n\n  const handleButtonClickNoticias = async () => {\n    if (selectedCountry) {\n      setNoticias([]);\n      try {\n        const countryParam = selectedCountry.value.trim();\n        const url = `http://localhost:4000/noticias/${countryParam}`;\n        const response = await axios.get(url);\n        const noticiasData = response.data;\n\n        if (noticiasData.length === 0) {\n          setNoInvestigacionesMessage(\n            \"Por el momento no hay Investigaciones en nuestro sistema con el país seleccionado.\"\n          );\n        } else {\n          setNoticias(noticiasData);\n          setShowContent(!showContent);\n          setNoInvestigacionesMessage(\"\"); // Limpiar el mensaje si hay investigaciones\n        }\n      } catch (error) {\n        console.error(\"Error fetching noticias data: \", error);\n      }\n    }\n  };\n\n  const handleSpeciesSearch = async (event, value) => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/taxonEspecie\");\n      const speciesData = response.data;\n      setSpeciesOptions(speciesData.map((species) => species.esp_nombre.trim()));\n    } catch (error) {\n      console.error(\"Error fetching species data: \", error);\n    }\n  };\n\n\n\n  ///////////////////////////////////   RENDERS  ////////////////////////////////////////////////////////\n\n\n  const renderReinos = () => {\n    return reinos.map((reino) => (\n      <StyledTreeItem\n        key={reino.rei_id}\n        nodeId={`reino-${reino.rei_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[reino.rei_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Reino:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[reino.rei_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{reino.rei_nombre.trim()} ({reinoElementCounts[reino.rei_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleReinoClick(event, `reino-${reino.rei_id}`)}\n        hasData={filos.some((filo) => filo.rei_id === reino.rei_id)}\n      >\n        {/* Renderizar los filos */}\n        {renderFilos(reino.rei_id)}\n      </StyledTreeItem>\n    ));\n  }\n\n  const renderFilos = (reinoId) => {\n    const filosOfReino = filos.filter((filo) => filo.rei_id === reinoId);\n\n    return filosOfReino.map((filo) => (\n      <StyledTreeItem\n        key={filo.fil_id}\n        nodeId={`filo-${filo.fil_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[filo.fil_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Filo:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[filo.fil_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{filo.fil_nombre.trim()} ({filoElementCounts[filo.fil_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleFiloClick(event, `filo-${filo.fil_id}`)}\n        hasData={clases.some((clase) => clase.fil_id === filo.fil_id)}\n      >\n        {/* Renderizar las clases */}\n        {renderClases(filo.fil_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderClases = (filoId) => {\n    const clasesOfFilo = clases.filter((clase) => clase.fil_id === filoId);\n\n    return clasesOfFilo.map((clase) => (\n      <StyledTreeItem\n        key={clase.cla_id}\n        nodeId={`clase-${clase.cla_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[clase.cla_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Clase:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[clase.cla_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{clase.cla_nombre.trim()} ({claseElementCounts[clase.cla_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleClaseClick(event, `clase-${clase.cla_id}`)}\n        hasData={ordenes.some((orden) => orden.cla_id === clase.cla_id)}\n      >\n        {/* Renderizar las órdenes */}\n        {renderOrdenes(clase.cla_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderOrdenes = (claseId) => {\n    const ordenesOfClase = ordenes.filter((orden) => orden.cla_id === claseId);\n\n    return ordenesOfClase.map((orden) => (\n      <StyledTreeItem\n        key={orden.ord_id}\n        nodeId={`orden-${orden.ord_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[orden.ord_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Orden:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[orden.ord_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{orden.ord_nombre.trim()} ({ordenElementCounts[orden.ord_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleOrdenClick(event, `orden-${orden.ord_id}`)}\n        hasData={familias.some((familia) => familia.ord_id === orden.ord_id)}\n      >\n        {/* Renderizar las familias */}\n        {renderFamilias(orden.ord_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderFamilias = (ordenId) => {\n    const familiasOfOrden = familias.filter((familia) => familia.ord_id === ordenId);\n\n    return familiasOfOrden.map((familia) => (\n      <StyledTreeItem\n        key={familia.fam_id}\n        nodeId={`familia-${familia.fam_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[familia.fam_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Familia:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[familia.fam_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{familia.gen_nombre.trim()}  ({familiaElementCounts[familia.fam_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleFamiliaClick(event, `familia-${familia.fam_id}`)}\n        hasData={generos.some((genero) => genero.fam_id === familia.fam_id)}\n      >\n        {/* Renderizar los géneros */}\n        {renderGeneros(familia.fam_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderGeneros = (familiaId) => {\n    const generosOfFamilia = generos.filter((genero) => genero.fam_id === familiaId);\n\n    return generosOfFamilia.map((genero) => (\n      <StyledTreeItem\n        key={genero.gen_id}\n        nodeId={`genero-${genero.gen_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[genero.gen_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Género:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[genero.gen_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{genero.gen_nombre.trim()} ({generoElementCounts[genero.gen_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleGeneroClick(event, `genero-${genero.gen_id}`)}\n        hasData={especies.some((especie) => especie.gen_id === genero.gen_id)}\n      >\n        {/* Renderizar las especies */}\n        {renderEspecies(genero.gen_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderEspecies = (generoId) => {\n    const especiesOfGenero = especies.filter((especie) => especie.gen_id === generoId);\n\n    return especiesOfGenero.map((especie) => (\n      <StyledTreeItem\n        key={especie.esp_id}\n        nodeId={`especie-${especie.esp_id}`}\n        label={\n          <div>\n            <div>\n              <Typography component=\"span\" style={{ color: colorNiveles[especie.esp_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n                Especie:\n              </Typography>{\" \"}\n              <Link\n                to={`https://doi.org/${especie.ref_doi.trim()}`}\n                target=\"_blank\"\n                style={{ color: colorItems[especie.esp_id], fontSize: tamanoItem, fontFamily: tipoLetra }}\n              >\n                {especie.esp_nombre.trim()}\n              </Link>\n            </div>\n            <div className=\"doi-row\">\n              <Typography component=\"span\" style={{ color: colorNiveles[especie.esp_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n                DOI:\n              </Typography>{\" \"}\n              <span className=\"doi-text\" style={{ color: colorItems[especie.esp_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{especie.ref_doi.trim()}</span>\n            </div>\n          </div>\n        }\n      />\n    ));\n\n  };\n\n\n  ///////////////////////////////////   GRAFICA  ////////////////////////////////////////////////////////\n\n\n  return (\n    <Box >\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {/* Descripción */}\n          <StyledBox>\n            <Typography variant=\"h5\" fontFamily=\"Helvetica Neue\">Descripción</Typography>\n            <Typography variant=\"body1\" fontFamily=\"Helvetica Neue\">\n              Nuestro sitio web es una plataforma diseñada para facilitar la\n              georreferenciación de datos de especies. Con su interfaz fácil de usar\n              y su funcionalidad avanzada, permite a los investigadores,\n              administradores y usuarios administrar y analizar de manera eficiente\n              la información sobre especies.\n            </Typography>\n          </StyledBox>\n        </Grid>\n        <Grid item xs={12}>\n          {/* Contenedor del Árbol y Trabajo académico */}\n          <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <StyledBox>\n                <Typography variant=\"h6\">Árbol Filogenético</Typography>\n                <Autocomplete\n                  options={speciesOptions}\n                  getOptionLabel={(option) => option}\n                  renderInput={(params) => (\n                    <TextField {...params} label=\"Especie\" variant=\"outlined\" />\n                  )}\n                  onInputChange={handleSpeciesSearch}\n                />\n              </StyledBox>\n              {/* Árbol filogenético */}\n              <TreeView\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n                sx={{ height: 240, flexGrow: 1, marginLeft: \"60px\" }}\n              >\n                {/* Renderizar los reinos */}\n                {renderReinos()}\n              </TreeView>\n            </Grid>\n            <Grid item xs={8}>\n              {/* Trabajo académico */}\n              <Box >\n                <StyledBox>\n                  <Typography variant=\"h6\">Investigaciones</Typography>\n                  {/* Contenido del trabajo académico */}\n\n                  <Autocomplete\n                    value={selectedCountry}\n                    onChange={handleCountryChange}\n                    options={countryOptions}\n                    getOptionLabel={(option) => option.label}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Seleccionar País\"\n                        variant=\"outlined\"\n                        size=\"small\"\n                        fullWidth\n                        sx={{ width: '50%', fontSize: '12px' }}\n                        InputProps={{\n                          ...params.InputProps,\n                          endAdornment: (\n                            <>\n                              {params.InputProps.endAdornment}\n                              <IconButton>\n                                <SearchIcon onClick={handleButtonClickNoticias} />\n                              </IconButton>\n                            </>\n                          )\n                        }}\n                      />\n                    )}\n                  />\n                  <Typography variant=\"body2\" color=\"error\">\n                    {noInvestigacionesMessage}\n                  </Typography>\n\n                  {showContent && (\n                    <>\n                      {noticias.map((noticia, index) => (\n                        <div key={index}>\n                          <Link to={`https://doi.org/${noticia.ref_doi}`} target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: \"none\" }}>\n                            <Typography variant=\"h6\" style={{ fontSize: \"14px\", fontWeight: \"bold\", color: \"#333333\", fontFamily: \"Helvetica Neue\", textTransform: \"uppercase\", marginBottom: \"20px\" }}>\n                              {noticia.ref_titulo}\n                            </Typography>\n                          </Link>\n                          <Typography variant=\"body1\" style={{ textAlign: \"justify\", fontSize: \"14px\", color: \"#666666\", fontFamily: \"Helvetica Neue\", marginBottom: \"20px\" }}>\n                            {noticia.ref_resumen}\n                          </Typography>\n                        </div>\n                      ))}\n                    </>\n                  )}\n\n                </StyledBox>\n              </Box>\n            </Grid>\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Box>\n  );\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}