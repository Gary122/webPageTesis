{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\Inicio.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport { Grid, Typography, Box, TextField, IconButton } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledTreeItem = styled(TreeItem)(_ref => {\n  let {\n    rootNode,\n    hasData\n  } = _ref;\n  const borderColor = \"gray\";\n  return {\n    position: \"relative\",\n    \"&:before\": {\n      pointerEvents: \"none\",\n      content: '\"\"',\n      position: \"absolute\",\n      width: 32,\n      left: -23,\n      top: 12,\n      borderBottom: !rootNode ? `1px solid ${borderColor}` : \"none\"\n    },\n    [`& .${treeItemClasses.group}`]: {\n      marginLeft: 16,\n      paddingLeft: 23,\n      borderLeft: `1px solid ${borderColor}`\n    },\n    \"& .MuiTreeItem-content\": {\n      color: hasData ? \"black\" : \"inherit\",\n      fontWeight: hasData ? \"bold\" : \"inherit\",\n      fontSize: \"30px\"\n    },\n    \"& .MuiTreeItem-iconContainer\": {\n      color: hasData ? \"black\" : \"inherit\"\n    }\n  };\n});\n_c = StyledTreeItem;\nconst StyledBox = styled(Box)({\n  width: \"90%\",\n  fontSize: \"1.2em\",\n  margin: \"20px auto\",\n  textAlign: \"center\",\n  \"& p\": {\n    textAlign: \"justify\",\n    color: \"#000000\",\n    fontFamily: \"Helvetica Neue\",\n    margin: \"20px 10px\"\n  },\n  maxWidth: \"350px\",\n  color: \"#000000\" // Cambia el color del texto a negro\n});\n_c2 = StyledBox;\nexport default function FileSystemNavigator() {\n  _s();\n  const [searchText, setSearchText] = useState(\"\");\n  const handleSearchChange = event => {\n    setSearchText(event.target.value);\n  };\n  const [colorNiveles, setColorNiveles] = useState({});\n  const [colorItems, setColorItems] = useState({});\n  const [reinos, setReinos] = useState([]);\n  const [filos, setFilos] = useState([]);\n  const [clases, setClases] = useState([]);\n  const [ordenes, setOrdenes] = useState([]);\n  const [familias, setFamilias] = useState([]);\n  const [generos, setGeneros] = useState([]);\n  const [especies, setEspecies] = useState([]);\n  const [reinoElementCounts, setReinoElementCounts] = useState({});\n  const [filoElementCounts, setFiloElementCounts] = useState({});\n  const [claseElementCounts, setClaseElementCounts] = useState({});\n  const [ordenElementCounts, setOrdenElementCounts] = useState({});\n  const [familiaElementCounts, setFamiliaElementCounts] = useState({});\n  const [generoElementCounts, setGeneroElementCounts] = useState({});\n  const [originalColorNiveles, setOriginalColorNiveles] = useState({});\n  const colorNivel = \"#808080\";\n  const colorItem = \"#1890FF\";\n  const tamanoNivel = \"18px\";\n  const tamanoItem = \"18px\";\n  const tipoLetra = \"Helvetica Neue\";\n  useEffect(() => {\n    // Obtener los reinos al cargar el componente\n    fetchReinos();\n  }, []);\n  const fetchReinos = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/reinos\");\n      const reinosData = response.data;\n\n      // Asignar el nivel \"Reino\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      const originalesNiveles = {}; // Colores originales de los reinos\n      for (const reino of reinosData) {\n        coloresNiveles[reino.rei_id] = colorNivel; // Color gris para el nivel \"Reino\"\n        coloresItems[reino.rei_id] = colorItem; // Color azul celeste para el nombre del elemento\n        originalesNiveles[reino.rei_id] = colorNivel; // Almacena el color original\n      }\n\n      // Obtener el número de elementos de cada reino\n      const elementCounts = {};\n      for (const reino of reinosData) {\n        const response = await axios.get(`http://localhost:4000/filos/${reino.rei_id}`);\n        const filosData = response.data;\n        elementCounts[reino.rei_id] = filosData.length;\n      }\n      setReinos(reinosData);\n      setReinoElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n      setOriginalColorNiveles(originalesNiveles); // Actualiza el estado de los colores originales\n    } catch (error) {\n      console.error(\"Error fetching reinos data: \", error);\n    }\n  };\n\n  // ...\n\n  const fetchFilos = async reinoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/filos/${reinoId}`);\n      const filosData = response.data;\n\n      // Asignar el nivel \"Filo\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const filo of filosData) {\n        coloresNiveles[filo.fil_id] = colorNivel;\n        coloresItems[filo.fil_id] = colorItem;\n      }\n\n      // Obtener el número de elementos de cada filo\n      const elementCounts = {};\n      for (const filo of filosData) {\n        const response = await axios.get(`http://localhost:4000/clases/${filo.fil_id}`);\n        const clasesData = response.data;\n        elementCounts[filo.fil_id] = clasesData.length;\n      }\n      setFilos(filosData);\n      setFiloElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching filos data: \", error);\n    }\n  };\n  const fetchClases = async filoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/clases/${filoId}`);\n      const clasesData = response.data;\n\n      // Asignar el nivel \"Clase\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const clase of clasesData) {\n        coloresNiveles[clase.cla_id] = colorNivel; // Color gris para el nivel \"Clase\"\n        coloresItems[clase.cla_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada clase\n      const elementCounts = {};\n      for (const clase of clasesData) {\n        const response = await axios.get(`http://localhost:4000/ordenes/${clase.cla_id}`);\n        const ordenesData = response.data;\n        elementCounts[clase.cla_id] = ordenesData.length;\n      }\n      setClases(clasesData);\n      setClaseElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching clases data: \", error);\n    }\n  };\n  const fetchOrdenes = async claseId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/ordenes/${claseId}`);\n      const ordenesData = response.data;\n\n      // Asignar el nivel \"Orden\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const orden of ordenesData) {\n        coloresNiveles[orden.ord_id] = colorNivel; // Color gris para el nivel \"Orden\"\n        coloresItems[orden.ord_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada orden\n      const elementCounts = {};\n      for (const orden of ordenesData) {\n        const response = await axios.get(`http://localhost:4000/familias/${orden.ord_id}`);\n        const familiasData = response.data;\n        elementCounts[orden.ord_id] = familiasData.length;\n      }\n      setOrdenes(ordenesData);\n      setOrdenElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching ordenes data: \", error);\n    }\n  };\n  const fetchFamilias = async ordenId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/familias/${ordenId}`);\n      const familiasData = response.data;\n\n      // Asignar el nivel \"Familia\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const familia of familiasData) {\n        coloresNiveles[familia.fam_id] = colorNivel; // Color gris para el nivel \"Familia\"\n        coloresItems[familia.fam_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada familia\n      const elementCounts = {};\n      for (const familia of familiasData) {\n        const response = await axios.get(`http://localhost:4000/generos/${familia.fam_id}`);\n        const generosData = response.data;\n        elementCounts[familia.fam_id] = generosData.length;\n      }\n      setFamilias(familiasData);\n      setFamiliaElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching familias data: \", error);\n    }\n  };\n  const fetchGeneros = async familiaId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/generos/${familiaId}`);\n      const generosData = response.data;\n\n      // Asignar el nivel \"Género\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const genero of generosData) {\n        coloresNiveles[genero.gen_id] = colorNivel; // Color gris para el nivel \"Género\"\n        coloresItems[genero.gen_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n      // Obtener el número de elementos de cada género\n      const elementCounts = {};\n      for (const genero of generosData) {\n        const response = await axios.get(`http://localhost:4000/especies/${genero.gen_id}`);\n        const especiesData = response.data;\n        elementCounts[genero.gen_id] = especiesData.length;\n      }\n      setGeneros(generosData);\n      setGeneroElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching generos data: \", error);\n    }\n  };\n  const fetchEspecies = async generoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/especies/${generoId}`);\n      const especiesData = response.data;\n      // Asignar el nivel \"Especie\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const especie of especiesData) {\n        coloresNiveles[especie.esp_id] = colorNivel; // Color gris para el nivel \"Especie\"\n        coloresItems[especie.esp_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      setEspecies(response.data);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching especies data: \", error);\n    }\n  };\n  const handleReinoClick = (event, nodeId) => {\n    if (nodeId) {\n      const reinoId = nodeId.split(\"-\")[1];\n      const reino = reinos.find(reino => reino.rei_id.toString() === reinoId);\n      if (reino) {\n        fetchFilos(reinoId);\n        setClases([]); // Reiniciar las clases cuando se cambia de reino\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n\n        // Restaurar los colores originales al hacer clic en un reino diferente\n        setColorNiveles({\n          ...originalColorNiveles\n        });\n      }\n    }\n  };\n  const handleFiloClick = (event, nodeId) => {\n    if (nodeId) {\n      const filoId = nodeId.split(\"-\")[1];\n      const filo = filos.find(filo => filo.fil_id.toString() === filoId);\n      if (filo) {\n        fetchClases(filoId);\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleClaseClick = (event, nodeId) => {\n    if (nodeId) {\n      const claseId = nodeId.split(\"-\")[1];\n      const clase = clases.find(clase => clase.cla_id.toString() === claseId);\n      if (clase) {\n        fetchOrdenes(claseId);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleOrdenClick = (event, nodeId) => {\n    if (nodeId) {\n      const ordenId = nodeId.split(\"-\")[1];\n      const orden = ordenes.find(orden => orden.ord_id.toString() === ordenId);\n      if (orden) {\n        fetchFamilias(ordenId);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleFamiliaClick = (event, nodeId) => {\n    if (nodeId) {\n      const familiaId = nodeId.split(\"-\")[1];\n      const familia = familias.find(familia => familia.fam_id.toString() === familiaId);\n      if (familia) {\n        fetchGeneros(familiaId);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleGeneroClick = (event, nodeId) => {\n    if (nodeId) {\n      const generoId = nodeId.split(\"-\")[1];\n      const genero = generos.find(genero => genero.gen_id.toString() === generoId);\n      if (genero) {\n        fetchEspecies(generoId);\n      }\n    }\n  };\n  const renderReinos = () => {\n    return reinos.map(reino => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `reino-${reino.rei_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[reino.rei_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Reino:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[reino.rei_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [reino.rei_nombre.trim(), \" (\", reinoElementCounts[reino.rei_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleReinoClick(event, `reino-${reino.rei_id}`),\n      hasData: filos.some(filo => filo.rei_id === reino.rei_id),\n      children: renderFilos(reino.rei_id)\n    }, reino.rei_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this));\n  };\n  const renderFilos = reinoId => {\n    const filosOfReino = filos.filter(filo => filo.rei_id === reinoId);\n    return filosOfReino.map(filo => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `filo-${filo.fil_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[filo.fil_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Filo:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[filo.fil_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [filo.fil_nombre.trim(), \" (\", filoElementCounts[filo.fil_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleFiloClick(event, `filo-${filo.fil_id}`),\n      hasData: clases.some(clase => clase.fil_id === filo.fil_id),\n      children: renderClases(filo.fil_id)\n    }, filo.fil_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this));\n  };\n  const renderClases = filoId => {\n    const clasesOfFilo = clases.filter(clase => clase.fil_id === filoId);\n    return clasesOfFilo.map(clase => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `clase-${clase.cla_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[clase.cla_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Clase:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[clase.cla_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [clase.cla_nombre.trim(), \" (\", claseElementCounts[clase.cla_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleClaseClick(event, `clase-${clase.cla_id}`),\n      hasData: ordenes.some(orden => orden.cla_id === clase.cla_id),\n      children: renderOrdenes(clase.cla_id)\n    }, clase.cla_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this));\n  };\n  const renderOrdenes = claseId => {\n    const ordenesOfClase = ordenes.filter(orden => orden.cla_id === claseId);\n    return ordenesOfClase.map(orden => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `orden-${orden.ord_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[orden.ord_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Orden:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[orden.ord_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [orden.ord_nombre.trim(), \" (\", ordenElementCounts[orden.ord_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleOrdenClick(event, `orden-${orden.ord_id}`),\n      hasData: familias.some(familia => familia.ord_id === orden.ord_id),\n      children: renderFamilias(orden.ord_id)\n    }, orden.ord_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this));\n  };\n  const renderFamilias = ordenId => {\n    const familiasOfOrden = familias.filter(familia => familia.ord_id === ordenId);\n    return familiasOfOrden.map(familia => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `familia-${familia.fam_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[familia.fam_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Familia:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[familia.fam_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [familia.gen_nombre.trim(), \"  (\", familiaElementCounts[familia.fam_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleFamiliaClick(event, `familia-${familia.fam_id}`),\n      hasData: generos.some(genero => genero.fam_id === familia.fam_id),\n      children: renderGeneros(familia.fam_id)\n    }, familia.fam_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this));\n  };\n  const renderGeneros = familiaId => {\n    const generosOfFamilia = generos.filter(genero => genero.fam_id === familiaId);\n    return generosOfFamilia.map(genero => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `genero-${genero.gen_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[genero.gen_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"G\\xE9nero:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[genero.gen_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [genero.gen_nombre.trim(), \" (\", generoElementCounts[genero.gen_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleGeneroClick(event, `genero-${genero.gen_id}`),\n      hasData: especies.some(especie => especie.gen_id === genero.gen_id),\n      children: renderEspecies(genero.gen_id)\n    }, genero.gen_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this));\n  };\n  const renderEspecies = generoId => {\n    const especiesOfGenero = especies.filter(especie => especie.gen_id === generoId);\n    return especiesOfGenero.map(especie => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `especie-${especie.esp_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[especie.esp_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Especie:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[especie.esp_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: especie.esp_nombre.trim()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, especie.esp_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(StyledBox, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: \"Descripci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            fontFamily: \"Helvetica Neue\",\n            children: \"Nuestro sitio web es una plataforma dise\\xF1ada para facilitar la georreferenciaci\\xF3n de datos de especies. Con su interfaz f\\xE1cil de usar y su funcionalidad avanzada, permite a los investigadores, administradores y usuarios administrar y analizar de manera eficiente la informaci\\xF3n sobre especies.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: [/*#__PURE__*/_jsxDEV(StyledBox, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"\\xC1rbol filogen\\xE9tico\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 586,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                value: searchText,\n                onChange: handleSearchChange,\n                placeholder: \"Buscar...\",\n                variant: \"outlined\",\n                size: \"small\",\n                fullWidth: true,\n                InputProps: {\n                  endAdornment: /*#__PURE__*/_jsxDEV(IconButton, {\n                    children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 597,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 596,\n                    columnNumber: 23\n                  }, this)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TreeView, {\n              defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 38\n              }, this),\n              defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 36\n              }, this),\n              sx: {\n                height: 240,\n                flexGrow: 1,\n                marginLeft: \"60px\"\n              },\n              children: renderReinos()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 566,\n    columnNumber: 5\n  }, this);\n}\n_s(FileSystemNavigator, \"AyznXp5LDROgT0tYXls25QcdRjA=\");\n_c3 = FileSystemNavigator;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledTreeItem\");\n$RefreshReg$(_c2, \"StyledBox\");\n$RefreshReg$(_c3, \"FileSystemNavigator\");","map":{"version":3,"names":["React","useState","useEffect","TreeView","styled","ExpandMoreIcon","ChevronRightIcon","TreeItem","treeItemClasses","Grid","Typography","Box","TextField","IconButton","SearchIcon","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledTreeItem","_ref","rootNode","hasData","borderColor","position","pointerEvents","content","width","left","top","borderBottom","group","marginLeft","paddingLeft","borderLeft","color","fontWeight","fontSize","_c","StyledBox","margin","textAlign","fontFamily","maxWidth","_c2","FileSystemNavigator","_s","searchText","setSearchText","handleSearchChange","event","target","value","colorNiveles","setColorNiveles","colorItems","setColorItems","reinos","setReinos","filos","setFilos","clases","setClases","ordenes","setOrdenes","familias","setFamilias","generos","setGeneros","especies","setEspecies","reinoElementCounts","setReinoElementCounts","filoElementCounts","setFiloElementCounts","claseElementCounts","setClaseElementCounts","ordenElementCounts","setOrdenElementCounts","familiaElementCounts","setFamiliaElementCounts","generoElementCounts","setGeneroElementCounts","originalColorNiveles","setOriginalColorNiveles","colorNivel","colorItem","tamanoNivel","tamanoItem","tipoLetra","fetchReinos","response","get","reinosData","data","coloresNiveles","coloresItems","originalesNiveles","reino","rei_id","elementCounts","filosData","length","error","console","fetchFilos","reinoId","filo","fil_id","clasesData","fetchClases","filoId","clase","cla_id","ordenesData","fetchOrdenes","claseId","orden","ord_id","familiasData","fetchFamilias","ordenId","familia","fam_id","generosData","fetchGeneros","familiaId","genero","gen_id","especiesData","fetchEspecies","generoId","especie","esp_id","handleReinoClick","nodeId","split","find","toString","handleFiloClick","handleClaseClick","handleOrdenClick","handleFamiliaClick","handleGeneroClick","renderReinos","map","label","children","component","style","fileName","_jsxFileName","lineNumber","columnNumber","rei_nombre","trim","onClick","some","renderFilos","filosOfReino","filter","fil_nombre","renderClases","clasesOfFilo","cla_nombre","renderOrdenes","ordenesOfClase","ord_nombre","renderFamilias","familiasOfOrden","gen_nombre","renderGeneros","generosOfFamilia","renderEspecies","especiesOfGenero","esp_nombre","container","spacing","item","xs","variant","onChange","placeholder","size","fullWidth","InputProps","endAdornment","defaultCollapseIcon","defaultExpandIcon","sx","height","flexGrow","_c3","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/Inicio.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport { Grid, Typography, Box, TextField, IconButton } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axios from \"axios\";\n\nconst StyledTreeItem = styled(TreeItem)(({ rootNode, hasData }) => {\n  const borderColor = \"gray\";\n\n  return {\n    position: \"relative\",\n    \"&:before\": {\n      pointerEvents: \"none\",\n      content: '\"\"',\n      position: \"absolute\",\n      width: 32,\n      left: -23,\n      top: 12,\n      borderBottom: !rootNode ? `1px solid ${borderColor}` : \"none\",\n    },\n    [`& .${treeItemClasses.group}`]: {\n      marginLeft: 16,\n      paddingLeft: 23,\n      borderLeft: `1px solid ${borderColor}`,\n    },\n    \"& .MuiTreeItem-content\": {\n      color: hasData ? \"black\" : \"inherit\",\n      fontWeight: hasData ? \"bold\" : \"inherit\",\n      fontSize: \"30px\",\n    },\n    \"& .MuiTreeItem-iconContainer\": {\n      color: hasData ? \"black\" : \"inherit\",\n    },\n  };\n});\n\nconst StyledBox = styled(Box)({\n  width: \"90%\",\n  fontSize: \"1.2em\",\n  margin: \"20px auto\",\n  textAlign: \"center\",\n  \"& p\": {\n    textAlign: \"justify\",\n    color: \"#000000\",\n    fontFamily: \"Helvetica Neue\",\n    margin: \"20px 10px\"\n  },\n  maxWidth: \"350px\",\n  color: \"#000000\" // Cambia el color del texto a negro\n});\n\nexport default function FileSystemNavigator() {\n  const [searchText, setSearchText] = useState(\"\");\n\n  const handleSearchChange = (event) => {\n    setSearchText(event.target.value);\n  };\n\n  const [colorNiveles, setColorNiveles] = useState({});\n  const [colorItems, setColorItems] = useState({});\n\n\n\n  const [reinos, setReinos] = useState([]);\n  const [filos, setFilos] = useState([]);\n  const [clases, setClases] = useState([]);\n  const [ordenes, setOrdenes] = useState([]);\n  const [familias, setFamilias] = useState([]);\n  const [generos, setGeneros] = useState([]);\n  const [especies, setEspecies] = useState([]);\n\n  const [reinoElementCounts, setReinoElementCounts] = useState({});\n  const [filoElementCounts, setFiloElementCounts] = useState({});\n  const [claseElementCounts, setClaseElementCounts] = useState({});\n  const [ordenElementCounts, setOrdenElementCounts] = useState({});\n  const [familiaElementCounts, setFamiliaElementCounts] = useState({});\n  const [generoElementCounts, setGeneroElementCounts] = useState({});\n  const [originalColorNiveles, setOriginalColorNiveles] = useState({});\n\n  const colorNivel = \"#808080\"\n  const colorItem = \"#1890FF\"\n  const tamanoNivel = \"18px\"\n  const tamanoItem = \"18px\"\n  const tipoLetra = \"Helvetica Neue\"\n\n\n  useEffect(() => {\n    // Obtener los reinos al cargar el componente\n    fetchReinos();\n  }, []);\n\n\n  const fetchReinos = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/reinos\");\n      const reinosData = response.data;\n\n      // Asignar el nivel \"Reino\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      const originalesNiveles = {}; // Colores originales de los reinos\n      for (const reino of reinosData) {\n        coloresNiveles[reino.rei_id] = colorNivel; // Color gris para el nivel \"Reino\"\n        coloresItems[reino.rei_id] = colorItem; // Color azul celeste para el nombre del elemento\n        originalesNiveles[reino.rei_id] = colorNivel; // Almacena el color original\n      }\n\n      // Obtener el número de elementos de cada reino\n      const elementCounts = {};\n\n      for (const reino of reinosData) {\n        const response = await axios.get(`http://localhost:4000/filos/${reino.rei_id}`);\n        const filosData = response.data;\n        elementCounts[reino.rei_id] = filosData.length;\n      }\n\n      setReinos(reinosData);\n      setReinoElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n      setOriginalColorNiveles(originalesNiveles); // Actualiza el estado de los colores originales\n    } catch (error) {\n      console.error(\"Error fetching reinos data: \", error);\n    }\n  };\n\n  // ...\n\n\n  const fetchFilos = async (reinoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/filos/${reinoId}`);\n      const filosData = response.data;\n\n\n      // Asignar el nivel \"Filo\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const filo of filosData) {\n        coloresNiveles[filo.fil_id] = colorNivel;\n        coloresItems[filo.fil_id] = colorItem;\n      }\n\n\n      // Obtener el número de elementos de cada filo\n      const elementCounts = {};\n\n      for (const filo of filosData) {\n        const response = await axios.get(`http://localhost:4000/clases/${filo.fil_id}`);\n        const clasesData = response.data;\n        elementCounts[filo.fil_id] = clasesData.length;\n      }\n\n      setFilos(filosData);\n      setFiloElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching filos data: \", error);\n    }\n  };\n\n\n  const fetchClases = async (filoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/clases/${filoId}`);\n      const clasesData = response.data;\n\n\n      // Asignar el nivel \"Clase\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const clase of clasesData) {\n        coloresNiveles[clase.cla_id] = colorNivel; // Color gris para el nivel \"Clase\"\n        coloresItems[clase.cla_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada clase\n      const elementCounts = {};\n\n      for (const clase of clasesData) {\n        const response = await axios.get(`http://localhost:4000/ordenes/${clase.cla_id}`);\n        const ordenesData = response.data;\n        elementCounts[clase.cla_id] = ordenesData.length;\n      }\n\n      setClases(clasesData);\n      setClaseElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching clases data: \", error);\n    }\n  };\n\n\n  const fetchOrdenes = async (claseId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/ordenes/${claseId}`);\n      const ordenesData = response.data;\n\n\n      // Asignar el nivel \"Orden\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const orden of ordenesData) {\n        coloresNiveles[orden.ord_id] = colorNivel; // Color gris para el nivel \"Orden\"\n        coloresItems[orden.ord_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada orden\n      const elementCounts = {};\n\n      for (const orden of ordenesData) {\n        const response = await axios.get(`http://localhost:4000/familias/${orden.ord_id}`);\n        const familiasData = response.data;\n        elementCounts[orden.ord_id] = familiasData.length;\n      }\n\n      setOrdenes(ordenesData);\n      setOrdenElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching ordenes data: \", error);\n    }\n  };\n\n\n  const fetchFamilias = async (ordenId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/familias/${ordenId}`);\n      const familiasData = response.data;\n\n      // Asignar el nivel \"Familia\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const familia of familiasData) {\n        coloresNiveles[familia.fam_id] = colorNivel; // Color gris para el nivel \"Familia\"\n        coloresItems[familia.fam_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada familia\n      const elementCounts = {};\n\n      for (const familia of familiasData) {\n        const response = await axios.get(`http://localhost:4000/generos/${familia.fam_id}`);\n        const generosData = response.data;\n        elementCounts[familia.fam_id] = generosData.length;\n      }\n\n      setFamilias(familiasData);\n      setFamiliaElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching familias data: \", error);\n    }\n  };\n\n  const fetchGeneros = async (familiaId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/generos/${familiaId}`);\n      const generosData = response.data;\n\n      // Asignar el nivel \"Género\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const genero of generosData) {\n        coloresNiveles[genero.gen_id] = colorNivel; // Color gris para el nivel \"Género\"\n        coloresItems[genero.gen_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n      // Obtener el número de elementos de cada género\n      const elementCounts = {};\n\n      for (const genero of generosData) {\n        const response = await axios.get(`http://localhost:4000/especies/${genero.gen_id}`);\n        const especiesData = response.data;\n        elementCounts[genero.gen_id] = especiesData.length;\n      }\n\n      setGeneros(generosData);\n      setGeneroElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching generos data: \", error);\n    }\n  };\n\n\n  const fetchEspecies = async (generoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/especies/${generoId}`);\n      const especiesData = response.data;\n      // Asignar el nivel \"Especie\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const especie of especiesData) {\n        coloresNiveles[especie.esp_id] = colorNivel; // Color gris para el nivel \"Especie\"\n        coloresItems[especie.esp_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      setEspecies(response.data);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching especies data: \", error);\n    }\n  };\n\n  const handleReinoClick = (event, nodeId) => {\n    if (nodeId) {\n      const reinoId = nodeId.split(\"-\")[1];\n      const reino = reinos.find((reino) => reino.rei_id.toString() === reinoId);\n      if (reino) {\n        fetchFilos(reinoId);\n        setClases([]); // Reiniciar las clases cuando se cambia de reino\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n\n        // Restaurar los colores originales al hacer clic en un reino diferente\n        setColorNiveles({ ...originalColorNiveles });\n      }\n    }\n  };\n\n  const handleFiloClick = (event, nodeId) => {\n    if (nodeId) {\n      const filoId = nodeId.split(\"-\")[1];\n      const filo = filos.find((filo) => filo.fil_id.toString() === filoId);\n      if (filo) {\n        fetchClases(filoId);\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleClaseClick = (event, nodeId) => {\n    if (nodeId) {\n      const claseId = nodeId.split(\"-\")[1];\n      const clase = clases.find((clase) => clase.cla_id.toString() === claseId);\n      if (clase) {\n        fetchOrdenes(claseId);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleOrdenClick = (event, nodeId) => {\n    if (nodeId) {\n      const ordenId = nodeId.split(\"-\")[1];\n      const orden = ordenes.find((orden) => orden.ord_id.toString() === ordenId);\n      if (orden) {\n        fetchFamilias(ordenId);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleFamiliaClick = (event, nodeId) => {\n    if (nodeId) {\n      const familiaId = nodeId.split(\"-\")[1];\n      const familia = familias.find((familia) => familia.fam_id.toString() === familiaId);\n      if (familia) {\n        fetchGeneros(familiaId);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleGeneroClick = (event, nodeId) => {\n    if (nodeId) {\n      const generoId = nodeId.split(\"-\")[1];\n      const genero = generos.find((genero) => genero.gen_id.toString() === generoId);\n      if (genero) {\n        fetchEspecies(generoId);\n      }\n    }\n  };\n\n  const renderReinos = () => {\n    return reinos.map((reino) => (\n      <StyledTreeItem\n        key={reino.rei_id}\n        nodeId={`reino-${reino.rei_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[reino.rei_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Reino:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[reino.rei_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{reino.rei_nombre.trim()} ({reinoElementCounts[reino.rei_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleReinoClick(event, `reino-${reino.rei_id}`)}\n        hasData={filos.some((filo) => filo.rei_id === reino.rei_id)}\n      >\n        {/* Renderizar los filos */}\n        {renderFilos(reino.rei_id)}\n      </StyledTreeItem>\n    ));\n  }\n\n  const renderFilos = (reinoId) => {\n    const filosOfReino = filos.filter((filo) => filo.rei_id === reinoId);\n\n    return filosOfReino.map((filo) => (\n      <StyledTreeItem\n        key={filo.fil_id}\n        nodeId={`filo-${filo.fil_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[filo.fil_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Filo:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[filo.fil_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{filo.fil_nombre.trim()} ({filoElementCounts[filo.fil_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleFiloClick(event, `filo-${filo.fil_id}`)}\n        hasData={clases.some((clase) => clase.fil_id === filo.fil_id)}\n      >\n        {/* Renderizar las clases */}\n        {renderClases(filo.fil_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n\n\n  const renderClases = (filoId) => {\n    const clasesOfFilo = clases.filter((clase) => clase.fil_id === filoId);\n\n    return clasesOfFilo.map((clase) => (\n      <StyledTreeItem\n        key={clase.cla_id}\n        nodeId={`clase-${clase.cla_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[clase.cla_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Clase:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[clase.cla_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{clase.cla_nombre.trim()} ({claseElementCounts[clase.cla_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleClaseClick(event, `clase-${clase.cla_id}`)}\n        hasData={ordenes.some((orden) => orden.cla_id === clase.cla_id)}\n      >\n        {/* Renderizar las órdenes */}\n        {renderOrdenes(clase.cla_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n\n\n  const renderOrdenes = (claseId) => {\n    const ordenesOfClase = ordenes.filter((orden) => orden.cla_id === claseId);\n\n    return ordenesOfClase.map((orden) => (\n      <StyledTreeItem\n        key={orden.ord_id}\n        nodeId={`orden-${orden.ord_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[orden.ord_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Orden:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[orden.ord_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{orden.ord_nombre.trim()} ({ordenElementCounts[orden.ord_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleOrdenClick(event, `orden-${orden.ord_id}`)}\n        hasData={familias.some((familia) => familia.ord_id === orden.ord_id)}\n      >\n        {/* Renderizar las familias */}\n        {renderFamilias(orden.ord_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n\n  const renderFamilias = (ordenId) => {\n    const familiasOfOrden = familias.filter((familia) => familia.ord_id === ordenId);\n\n    return familiasOfOrden.map((familia) => (\n      <StyledTreeItem\n        key={familia.fam_id}\n        nodeId={`familia-${familia.fam_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[familia.fam_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Familia:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[familia.fam_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{familia.gen_nombre.trim()}  ({familiaElementCounts[familia.fam_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleFamiliaClick(event, `familia-${familia.fam_id}`)}\n        hasData={generos.some((genero) => genero.fam_id === familia.fam_id)}\n      >\n        {/* Renderizar los géneros */}\n        {renderGeneros(familia.fam_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n\n  const renderGeneros = (familiaId) => {\n    const generosOfFamilia = generos.filter((genero) => genero.fam_id === familiaId);\n\n    return generosOfFamilia.map((genero) => (\n      <StyledTreeItem\n        key={genero.gen_id}\n        nodeId={`genero-${genero.gen_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[genero.gen_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Género:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[genero.gen_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{genero.gen_nombre.trim()} ({generoElementCounts[genero.gen_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleGeneroClick(event, `genero-${genero.gen_id}`)}\n        hasData={especies.some((especie) => especie.gen_id === genero.gen_id)}\n      >\n        {/* Renderizar las especies */}\n        {renderEspecies(genero.gen_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n\n  const renderEspecies = (generoId) => {\n    const especiesOfGenero = especies.filter((especie) => especie.gen_id === generoId);\n\n    return especiesOfGenero.map((especie) => (\n      <StyledTreeItem\n        key={especie.esp_id}\n        nodeId={`especie-${especie.esp_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[especie.esp_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Especie:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[especie.esp_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{especie.esp_nombre.trim()}</span>\n          </>\n        }\n      />\n    ));\n  };\n\n\n\n\n  return (\n    <Box >\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {/* Descripción */}\n          <StyledBox>\n            <Typography variant=\"h5\">Descripción</Typography>\n            <Typography variant=\"body1\" fontFamily=\"Helvetica Neue\">\n              Nuestro sitio web es una plataforma diseñada para facilitar la\n              georreferenciación de datos de especies. Con su interfaz fácil de usar\n              y su funcionalidad avanzada, permite a los investigadores,\n              administradores y usuarios administrar y analizar de manera eficiente\n              la información sobre especies.\n            </Typography>\n          </StyledBox>\n        </Grid>\n        <Grid item xs={12}>\n          {/* Contenedor del Árbol y Trabajo académico */}\n          <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <StyledBox>\n                <Typography variant=\"h6\">Árbol filogenético</Typography>\n                <TextField\n                  value={searchText}\n                  onChange={handleSearchChange}\n                  placeholder=\"Buscar...\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  fullWidth\n                  InputProps={{\n                    endAdornment: (\n                      <IconButton>\n                        <SearchIcon />\n                      </IconButton>\n                    )\n                  }}\n                />\n              </StyledBox>\n              {/* Árbol filogenético */}\n              <TreeView\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n                sx={{ height: 240, flexGrow: 1, marginLeft: \"60px\" }}\n              >\n                {/* Renderizar los reinos */}\n                {renderReinos()}\n              </TreeView>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}