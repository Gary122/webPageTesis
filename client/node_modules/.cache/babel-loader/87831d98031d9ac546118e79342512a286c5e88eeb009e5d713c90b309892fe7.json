{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\Inicio.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport { Grid, Typography, Box, TextField, IconButton, Button } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axios from \"axios\";\nimport { Link } from 'react-router-dom';\nimport { Autocomplete } from '@mui/lab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledTreeItem = _s(styled(TreeItem)(_s(_ref => {\n  _s();\n  let {\n    rootNode,\n    hasData\n  } = _ref;\n  const borderColor = \"gray\";\n  const nivelColor = \"#808080\"; // Color para el nivel \"Reino\"\n  const itemColor = \"#1890FF\"; // Color para el nombre del elemento\n\n  const [selectedSpecies, setSelectedSpecies] = useState(null);\n  return {\n    position: \"relative\",\n    \"&:before\": {\n      pointerEvents: \"none\",\n      content: '\"\"',\n      position: \"absolute\",\n      width: 32,\n      left: -23,\n      top: 12,\n      borderBottom: !rootNode ? `1px solid ${borderColor}` : \"none\"\n    },\n    [`& .${treeItemClasses.group}`]: {\n      marginLeft: 16,\n      paddingLeft: 23,\n      borderLeft: `1px solid ${borderColor}`\n    },\n    \"& .MuiTreeItem-content\": {\n      color: nivelColor,\n      fontWeight: hasData ? \"bold\" : \"inherit\",\n      fontSize: \"30px\"\n    },\n    \"& .MuiTreeItem-iconContainer\": {\n      color: itemColor\n    },\n    \"& .MuiTreeItem-label\": {\n      whiteSpace: \"nowrap\"\n    },\n    \"& .doi-row\": {\n      cursor: \"text\",\n      userSelect: \"text\"\n    },\n    \"& .doi-text\": {\n      display: \"inline-block\"\n    }\n  };\n}, \"j6OZxWxiQ9xGuk2TOTzLwMmrn2k=\")), \"j6OZxWxiQ9xGuk2TOTzLwMmrn2k=\");\n_c = StyledTreeItem;\nconst StyledBox = styled(Box)({\n  width: \"90%\",\n  fontSize: \"1.2em\",\n  margin: \"20px auto\",\n  textAlign: \"center\",\n  \"& p\": {\n    textAlign: \"justify\",\n    color: \"#000000\",\n    fontFamily: \"Helvetica Neue\",\n    margin: \"20px 10px\"\n  },\n  maxWidth: \"600px\",\n  color: \"#000000\" // Cambia el color del texto a negro\n});\n_c2 = StyledBox;\nexport default function FileSystemNavigator() {\n  _s2();\n  const [searchText, setSearchText] = useState(\"\");\n  const [searchTextCountry, setSearchTextCountry] = useState(\"\");\n  const [showContent, setShowContent] = useState(false);\n  const [colorNiveles, setColorNiveles] = useState({});\n  const [colorItems, setColorItems] = useState({});\n  const [reinos, setReinos] = useState([]);\n  const [filos, setFilos] = useState([]);\n  const [clases, setClases] = useState([]);\n  const [ordenes, setOrdenes] = useState([]);\n  const [familias, setFamilias] = useState([]);\n  const [generos, setGeneros] = useState([]);\n  const [especies, setEspecies] = useState([]);\n  const [reinoElementCounts, setReinoElementCounts] = useState({});\n  const [filoElementCounts, setFiloElementCounts] = useState({});\n  const [claseElementCounts, setClaseElementCounts] = useState({});\n  const [ordenElementCounts, setOrdenElementCounts] = useState({});\n  const [familiaElementCounts, setFamiliaElementCounts] = useState({});\n  const [generoElementCounts, setGeneroElementCounts] = useState({});\n  const [noticias, setNoticias] = useState([]);\n  const [speciesOptions, setSpeciesOptions] = useState([]);\n  const colorNivel = \"#00000073\";\n  const colorItem = \"#1890FF\";\n  const tamanoNivel = \"14px\";\n  const tamanoItem = \"12px\";\n  const tipoLetra = \"Helvetica Neue\";\n  useEffect(() => {\n    // Obtener los reinos al cargar el componente\n    fetchReinos();\n  }, []);\n\n  ///////////////////////////////////   LOGICA ////////////////////////////////////////////////////////\n\n  const fetchReinos = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/reinos\");\n      const reinosData = response.data;\n\n      // Asignar el nivel \"Reino\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const reino of reinosData) {\n        coloresNiveles[reino.rei_id] = colorNivel; // Color gris para el nivel \"Reino\"\n        coloresItems[reino.rei_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada reino\n      const elementCounts = {};\n      for (const reino of reinosData) {\n        const response = await axios.get(`http://localhost:4000/filos/${reino.rei_id}`);\n        const filosData = response.data;\n        elementCounts[reino.rei_id] = filosData.length;\n      }\n      setReinos(reinosData);\n      setReinoElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching reinos data: \", error);\n    }\n  };\n  const fetchFilos = async reinoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/filos/${reinoId}`);\n      const filosData = response.data;\n\n      // Asignar el nivel \"Filo\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const filo of filosData) {\n        coloresNiveles[filo.fil_id] = colorNivel;\n        coloresItems[filo.fil_id] = colorItem;\n      }\n\n      // Obtener el número de elementos de cada filo\n      const elementCounts = {};\n      for (const filo of filosData) {\n        const response = await axios.get(`http://localhost:4000/clases/${filo.fil_id}`);\n        const clasesData = response.data;\n        elementCounts[filo.fil_id] = clasesData.length;\n      }\n      setFilos(filosData);\n      setFiloElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching filos data: \", error);\n    }\n  };\n  const fetchClases = async filoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/clases/${filoId}`);\n      const clasesData = response.data;\n\n      // Asignar el nivel \"Clase\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const clase of clasesData) {\n        coloresNiveles[clase.cla_id] = colorNivel; // Color gris para el nivel \"Clase\"\n        coloresItems[clase.cla_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada clase\n      const elementCounts = {};\n      for (const clase of clasesData) {\n        const response = await axios.get(`http://localhost:4000/ordenes/${clase.cla_id}`);\n        const ordenesData = response.data;\n        elementCounts[clase.cla_id] = ordenesData.length;\n      }\n      setClases(clasesData);\n      setClaseElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching clases data: \", error);\n    }\n  };\n  const fetchOrdenes = async claseId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/ordenes/${claseId}`);\n      const ordenesData = response.data;\n\n      // Asignar el nivel \"Orden\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const orden of ordenesData) {\n        coloresNiveles[orden.ord_id] = colorNivel; // Color gris para el nivel \"Orden\"\n        coloresItems[orden.ord_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada orden\n      const elementCounts = {};\n      for (const orden of ordenesData) {\n        const response = await axios.get(`http://localhost:4000/familias/${orden.ord_id}`);\n        const familiasData = response.data;\n        elementCounts[orden.ord_id] = familiasData.length;\n      }\n      setOrdenes(ordenesData);\n      setOrdenElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching ordenes data: \", error);\n    }\n  };\n  const fetchFamilias = async ordenId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/familias/${ordenId}`);\n      const familiasData = response.data;\n\n      // Asignar el nivel \"Familia\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const familia of familiasData) {\n        coloresNiveles[familia.fam_id] = colorNivel; // Color gris para el nivel \"Familia\"\n        coloresItems[familia.fam_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada familia\n      const elementCounts = {};\n      for (const familia of familiasData) {\n        const response = await axios.get(`http://localhost:4000/generos/${familia.fam_id}`);\n        const generosData = response.data;\n        elementCounts[familia.fam_id] = generosData.length;\n      }\n      setFamilias(familiasData);\n      setFamiliaElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching familias data: \", error);\n    }\n  };\n  const fetchGeneros = async familiaId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/generos/${familiaId}`);\n      const generosData = response.data;\n\n      // Asignar el nivel \"Género\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const genero of generosData) {\n        coloresNiveles[genero.gen_id] = colorNivel; // Color gris para el nivel \"Género\"\n        coloresItems[genero.gen_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n      // Obtener el número de elementos de cada género\n      const elementCounts = {};\n      for (const genero of generosData) {\n        const response = await axios.get(`http://localhost:4000/especies/${genero.gen_id}`);\n        const especiesData = response.data;\n        elementCounts[genero.gen_id] = especiesData.length;\n      }\n      setGeneros(generosData);\n      setGeneroElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching generos data: \", error);\n    }\n  };\n  const fetchEspecies = async generoId => {\n    try {\n      const response = await axios.get(`http://localhost:4000/especies/${generoId}`);\n      const especiesData = response.data;\n      // Asignar el nivel \"Especie\" y su color correspondiente\n      const coloresNiveles = {\n        ...colorNiveles\n      };\n      const coloresItems = {\n        ...colorItems\n      };\n      for (const especie of especiesData) {\n        coloresNiveles[especie.esp_id] = colorNivel; // Color gris para el nivel \"Especie\"\n        coloresItems[especie.esp_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      setEspecies(response.data);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching especies data: \", error);\n    }\n  };\n\n  ///////////////////////////////////     EVENTOS  ////////////////////////////////////////////////////////\n\n  const handleReinoClick = (event, nodeId) => {\n    if (nodeId) {\n      const reinoId = nodeId.split(\"-\")[1];\n      const reino = reinos.find(reino => reino.rei_id.toString() === reinoId);\n      if (reino) {\n        fetchFilos(reinoId);\n        setClases([]); // Reiniciar las clases cuando se cambia de reino\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleFiloClick = (event, nodeId) => {\n    if (nodeId) {\n      const filoId = nodeId.split(\"-\")[1];\n      const filo = filos.find(filo => filo.fil_id.toString() === filoId);\n      if (filo) {\n        fetchClases(filoId);\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleClaseClick = (event, nodeId) => {\n    if (nodeId) {\n      const claseId = nodeId.split(\"-\")[1];\n      const clase = clases.find(clase => clase.cla_id.toString() === claseId);\n      if (clase) {\n        fetchOrdenes(claseId);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleOrdenClick = (event, nodeId) => {\n    if (nodeId) {\n      const ordenId = nodeId.split(\"-\")[1];\n      const orden = ordenes.find(orden => orden.ord_id.toString() === ordenId);\n      if (orden) {\n        fetchFamilias(ordenId);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleFamiliaClick = (event, nodeId) => {\n    if (nodeId) {\n      const familiaId = nodeId.split(\"-\")[1];\n      const familia = familias.find(familia => familia.fam_id.toString() === familiaId);\n      if (familia) {\n        fetchGeneros(familiaId);\n        setEspecies([]);\n      }\n    }\n  };\n  const handleGeneroClick = (event, nodeId) => {\n    if (nodeId) {\n      const generoId = nodeId.split(\"-\")[1];\n      const genero = generos.find(genero => genero.gen_id.toString() === generoId);\n      if (genero && selectedSpecies && selectedSpecies.gen_id === genero.gen_id) {\n        // Establecer la especie seleccionada como la rama activa del árbol\n        setSelectedNode(`especie-${selectedSpecies.esp_id}`);\n      }\n    }\n  };\n  const handleSpeciesSearch = async (event, value) => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/taxonEspecie\");\n      const speciesData = response.data;\n      setSpeciesOptions(speciesData.map(species => species.esp_nombre.trim()));\n\n      // Buscar la especie seleccionada\n      const selectedSpecies = speciesData.find(species => species.esp_nombre.trim() === value);\n      setSelectedSpecies(selectedSpecies);\n    } catch (error) {\n      console.error(\"Error fetching species data: \", error);\n    }\n  };\n\n  ///////////////////////////////////   RENDERS  ////////////////////////////////////////////////////////\n\n  const renderReinos = () => {\n    return reinos.map(reino => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `reino-${reino.rei_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[reino.rei_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Reino:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[reino.rei_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [reino.rei_nombre.trim(), \" (\", reinoElementCounts[reino.rei_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleReinoClick(event, `reino-${reino.rei_id}`),\n      hasData: filos.some(filo => filo.rei_id === reino.rei_id),\n      children: renderFilos(reino.rei_id)\n    }, reino.rei_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this));\n  };\n  const renderFilos = reinoId => {\n    const filosOfReino = filos.filter(filo => filo.rei_id === reinoId);\n    return filosOfReino.map(filo => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `filo-${filo.fil_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[filo.fil_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Filo:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[filo.fil_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [filo.fil_nombre.trim(), \" (\", filoElementCounts[filo.fil_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleFiloClick(event, `filo-${filo.fil_id}`),\n      hasData: clases.some(clase => clase.fil_id === filo.fil_id),\n      children: renderClases(filo.fil_id)\n    }, filo.fil_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this));\n  };\n  const renderClases = filoId => {\n    const clasesOfFilo = clases.filter(clase => clase.fil_id === filoId);\n    return clasesOfFilo.map(clase => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `clase-${clase.cla_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[clase.cla_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Clase:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[clase.cla_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [clase.cla_nombre.trim(), \" (\", claseElementCounts[clase.cla_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleClaseClick(event, `clase-${clase.cla_id}`),\n      hasData: ordenes.some(orden => orden.cla_id === clase.cla_id),\n      children: renderOrdenes(clase.cla_id)\n    }, clase.cla_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }, this));\n  };\n  const renderOrdenes = claseId => {\n    const ordenesOfClase = ordenes.filter(orden => orden.cla_id === claseId);\n    return ordenesOfClase.map(orden => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `orden-${orden.ord_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[orden.ord_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Orden:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[orden.ord_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [orden.ord_nombre.trim(), \" (\", ordenElementCounts[orden.ord_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleOrdenClick(event, `orden-${orden.ord_id}`),\n      hasData: familias.some(familia => familia.ord_id === orden.ord_id),\n      children: renderFamilias(orden.ord_id)\n    }, orden.ord_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 7\n    }, this));\n  };\n  const renderFamilias = ordenId => {\n    const familiasOfOrden = familias.filter(familia => familia.ord_id === ordenId);\n    return familiasOfOrden.map(familia => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `familia-${familia.fam_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[familia.fam_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"Familia:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[familia.fam_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [familia.gen_nombre.trim(), \"  (\", familiaElementCounts[familia.fam_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleFamiliaClick(event, `familia-${familia.fam_id}`),\n      hasData: generos.some(genero => genero.fam_id === familia.fam_id),\n      children: renderGeneros(familia.fam_id)\n    }, familia.fam_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }, this));\n  };\n  const renderGeneros = familiaId => {\n    const generosOfFamilia = generos.filter(genero => genero.fam_id === familiaId);\n    return generosOfFamilia.map(genero => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `genero-${genero.gen_id}`,\n      label: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          style: {\n            color: colorNiveles[genero.gen_id],\n            fontSize: tamanoNivel,\n            fontFamily: tipoLetra\n          },\n          children: \"G\\xE9nero:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: colorItems[genero.gen_id],\n            fontSize: tamanoItem,\n            fontFamily: tipoLetra\n          },\n          children: [genero.gen_nombre.trim(), \" (\", generoElementCounts[genero.gen_id] || 0, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      onClick: event => handleGeneroClick(event, `genero-${genero.gen_id}`),\n      hasData: especies.some(especie => especie.gen_id === genero.gen_id),\n      children: renderEspecies(genero.gen_id)\n    }, genero.gen_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 7\n    }, this));\n  };\n  const renderEspecies = generoId => {\n    const especiesOfGenero = especies.filter(especie => especie.gen_id === generoId);\n    return especiesOfGenero.map(especie => /*#__PURE__*/_jsxDEV(StyledTreeItem, {\n      nodeId: `especie-${especie.esp_id}`,\n      label: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            style: {\n              color: colorNiveles[especie.esp_id],\n              fontSize: tamanoNivel,\n              fontFamily: tipoLetra\n            },\n            children: \"Especie:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Link, {\n            to: `https://doi.org/${especie.ref_doi.trim()}`,\n            target: \"_blank\",\n            style: {\n              color: colorItems[especie.esp_id],\n              fontSize: tamanoItem,\n              fontFamily: tipoLetra\n            },\n            children: especie.esp_nombre.trim()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"doi-row\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            style: {\n              color: colorNiveles[especie.esp_id],\n              fontSize: tamanoNivel,\n              fontFamily: tipoLetra\n            },\n            children: \"DOI:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"doi-text\",\n            style: {\n              color: colorItems[especie.esp_id],\n              fontSize: tamanoItem,\n              fontFamily: tipoLetra\n            },\n            children: especie.ref_doi.trim()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 11\n      }, this),\n      selected: selectedNode === `especie-${especie.esp_id}`\n    }, especie.esp_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this));\n  };\n\n  ///////////////////////////////////   GRAFICA  ////////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(StyledBox, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: \"Descripci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            fontFamily: \"Helvetica Neue\",\n            children: \"Nuestro sitio web es una plataforma dise\\xF1ada para facilitar la georreferenciaci\\xF3n de datos de especies. Con su interfaz f\\xE1cil de usar y su funcionalidad avanzada, permite a los investigadores, administradores y usuarios administrar y analizar de manera eficiente la informaci\\xF3n sobre especies.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: [/*#__PURE__*/_jsxDEV(StyledBox, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"\\xC1rbol Filogen\\xE9tico\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                options: speciesOptions,\n                getOptionLabel: option => option,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                  ...params,\n                  label: \"Especie\",\n                  variant: \"outlined\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 646,\n                  columnNumber: 21\n                }, this),\n                onInputChange: handleSpeciesSearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TreeView, {\n              defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 38\n              }, this),\n              defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 36\n              }, this),\n              sx: {\n                height: 240,\n                flexGrow: 1,\n                marginLeft: \"60px\"\n              },\n              children: renderReinos()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 621,\n    columnNumber: 5\n  }, this);\n}\n_s2(FileSystemNavigator, \"7mjC619oqMSO7XWJh3H/4D2REL0=\");\n_c3 = FileSystemNavigator;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledTreeItem\");\n$RefreshReg$(_c2, \"StyledBox\");\n$RefreshReg$(_c3, \"FileSystemNavigator\");","map":{"version":3,"names":["React","useState","useEffect","TreeView","styled","ExpandMoreIcon","ChevronRightIcon","TreeItem","treeItemClasses","Grid","Typography","Box","TextField","IconButton","Button","SearchIcon","axios","Link","Autocomplete","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledTreeItem","_s","_ref","rootNode","hasData","borderColor","nivelColor","itemColor","selectedSpecies","setSelectedSpecies","position","pointerEvents","content","width","left","top","borderBottom","group","marginLeft","paddingLeft","borderLeft","color","fontWeight","fontSize","whiteSpace","cursor","userSelect","display","_c","StyledBox","margin","textAlign","fontFamily","maxWidth","_c2","FileSystemNavigator","_s2","searchText","setSearchText","searchTextCountry","setSearchTextCountry","showContent","setShowContent","colorNiveles","setColorNiveles","colorItems","setColorItems","reinos","setReinos","filos","setFilos","clases","setClases","ordenes","setOrdenes","familias","setFamilias","generos","setGeneros","especies","setEspecies","reinoElementCounts","setReinoElementCounts","filoElementCounts","setFiloElementCounts","claseElementCounts","setClaseElementCounts","ordenElementCounts","setOrdenElementCounts","familiaElementCounts","setFamiliaElementCounts","generoElementCounts","setGeneroElementCounts","noticias","setNoticias","speciesOptions","setSpeciesOptions","colorNivel","colorItem","tamanoNivel","tamanoItem","tipoLetra","fetchReinos","response","get","reinosData","data","coloresNiveles","coloresItems","reino","rei_id","elementCounts","filosData","length","error","console","fetchFilos","reinoId","filo","fil_id","clasesData","fetchClases","filoId","clase","cla_id","ordenesData","fetchOrdenes","claseId","orden","ord_id","familiasData","fetchFamilias","ordenId","familia","fam_id","generosData","fetchGeneros","familiaId","genero","gen_id","especiesData","fetchEspecies","generoId","especie","esp_id","handleReinoClick","event","nodeId","split","find","toString","handleFiloClick","handleClaseClick","handleOrdenClick","handleFamiliaClick","handleGeneroClick","setSelectedNode","handleSpeciesSearch","value","speciesData","map","species","esp_nombre","trim","renderReinos","label","children","component","style","fileName","_jsxFileName","lineNumber","columnNumber","rei_nombre","onClick","some","renderFilos","filosOfReino","filter","fil_nombre","renderClases","clasesOfFilo","cla_nombre","renderOrdenes","ordenesOfClase","ord_nombre","renderFamilias","familiasOfOrden","gen_nombre","renderGeneros","generosOfFamilia","renderEspecies","especiesOfGenero","to","ref_doi","target","className","selected","selectedNode","container","spacing","item","xs","variant","options","getOptionLabel","option","renderInput","params","onInputChange","defaultCollapseIcon","defaultExpandIcon","sx","height","flexGrow","_c3","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/Inicio.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport { Grid, Typography, Box, TextField, IconButton, Button } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport axios from \"axios\";\nimport { Link } from 'react-router-dom';\nimport { Autocomplete } from '@mui/lab';\n\nconst StyledTreeItem = styled(TreeItem)(({ rootNode, hasData }) => {\n  const borderColor = \"gray\";\n  const nivelColor = \"#808080\"; // Color para el nivel \"Reino\"\n  const itemColor = \"#1890FF\"; // Color para el nombre del elemento\n\n  const [selectedSpecies, setSelectedSpecies] = useState(null);\n\n  return {\n    position: \"relative\",\n    \"&:before\": {\n      pointerEvents: \"none\",\n      content: '\"\"',\n      position: \"absolute\",\n      width: 32,\n      left: -23,\n      top: 12,\n      borderBottom: !rootNode ? `1px solid ${borderColor}` : \"none\",\n    },\n    [`& .${treeItemClasses.group}`]: {\n      marginLeft: 16,\n      paddingLeft: 23,\n      borderLeft: `1px solid ${borderColor}`,\n    },\n    \"& .MuiTreeItem-content\": {\n      color: nivelColor,\n      fontWeight: hasData ? \"bold\" : \"inherit\",\n      fontSize: \"30px\",\n    },\n    \"& .MuiTreeItem-iconContainer\": {\n      color: itemColor,\n    },\n    \"& .MuiTreeItem-label\": {\n      whiteSpace: \"nowrap\",\n    },\n    \"& .doi-row\": {\n      cursor: \"text\",\n      userSelect: \"text\",\n    },\n    \"& .doi-text\": {\n      display: \"inline-block\",\n    },\n  };\n});\n\nconst StyledBox = styled(Box)({\n  width: \"90%\",\n  fontSize: \"1.2em\",\n  margin: \"20px auto\",\n  textAlign: \"center\",\n  \"& p\": {\n    textAlign: \"justify\",\n    color: \"#000000\",\n    fontFamily: \"Helvetica Neue\",\n    margin: \"20px 10px\"\n  },\n  maxWidth: \"600px\",\n  color: \"#000000\" // Cambia el color del texto a negro\n});\n\nexport default function FileSystemNavigator() {\n  const [searchText, setSearchText] = useState(\"\");\n  const [searchTextCountry, setSearchTextCountry] = useState(\"\");\n\n  const [showContent, setShowContent] = useState(false);\n\n  const [colorNiveles, setColorNiveles] = useState({});\n  const [colorItems, setColorItems] = useState({});\n\n  const [reinos, setReinos] = useState([]);\n  const [filos, setFilos] = useState([]);\n  const [clases, setClases] = useState([]);\n  const [ordenes, setOrdenes] = useState([]);\n  const [familias, setFamilias] = useState([]);\n  const [generos, setGeneros] = useState([]);\n  const [especies, setEspecies] = useState([]);\n\n  const [reinoElementCounts, setReinoElementCounts] = useState({});\n  const [filoElementCounts, setFiloElementCounts] = useState({});\n  const [claseElementCounts, setClaseElementCounts] = useState({});\n  const [ordenElementCounts, setOrdenElementCounts] = useState({});\n  const [familiaElementCounts, setFamiliaElementCounts] = useState({});\n  const [generoElementCounts, setGeneroElementCounts] = useState({});\n\n  const [noticias, setNoticias] = useState([]);\n\n\n  const [speciesOptions, setSpeciesOptions] = useState([]);\n\n\n\n  const colorNivel = \"#00000073\"\n  const colorItem = \"#1890FF\"\n  const tamanoNivel = \"14px\"\n  const tamanoItem = \"12px\"\n  const tipoLetra = \"Helvetica Neue\"\n\n\n  useEffect(() => {\n    // Obtener los reinos al cargar el componente\n    fetchReinos();\n  }, []);\n\n  ///////////////////////////////////   LOGICA ////////////////////////////////////////////////////////\n\n  const fetchReinos = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/reinos\");\n      const reinosData = response.data;\n\n      // Asignar el nivel \"Reino\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const reino of reinosData) {\n        coloresNiveles[reino.rei_id] = colorNivel; // Color gris para el nivel \"Reino\"\n        coloresItems[reino.rei_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada reino\n      const elementCounts = {};\n\n      for (const reino of reinosData) {\n        const response = await axios.get(`http://localhost:4000/filos/${reino.rei_id}`);\n        const filosData = response.data;\n        elementCounts[reino.rei_id] = filosData.length;\n      }\n\n\n      setReinos(reinosData);\n      setReinoElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching reinos data: \", error);\n    }\n  };\n\n  const fetchFilos = async (reinoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/filos/${reinoId}`);\n      const filosData = response.data;\n\n\n      // Asignar el nivel \"Filo\" y su color correspondiente\n      const coloresNiveles = {};\n      const coloresItems = {};\n      for (const filo of filosData) {\n        coloresNiveles[filo.fil_id] = colorNivel;\n        coloresItems[filo.fil_id] = colorItem;\n      }\n\n\n      // Obtener el número de elementos de cada filo\n      const elementCounts = {};\n\n      for (const filo of filosData) {\n        const response = await axios.get(`http://localhost:4000/clases/${filo.fil_id}`);\n        const clasesData = response.data;\n        elementCounts[filo.fil_id] = clasesData.length;\n      }\n\n      setFilos(filosData);\n      setFiloElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching filos data: \", error);\n    }\n  };\n\n\n  const fetchClases = async (filoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/clases/${filoId}`);\n      const clasesData = response.data;\n\n\n      // Asignar el nivel \"Clase\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const clase of clasesData) {\n        coloresNiveles[clase.cla_id] = colorNivel; // Color gris para el nivel \"Clase\"\n        coloresItems[clase.cla_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada clase\n      const elementCounts = {};\n\n      for (const clase of clasesData) {\n        const response = await axios.get(`http://localhost:4000/ordenes/${clase.cla_id}`);\n        const ordenesData = response.data;\n        elementCounts[clase.cla_id] = ordenesData.length;\n      }\n\n      setClases(clasesData);\n      setClaseElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching clases data: \", error);\n    }\n  };\n\n\n  const fetchOrdenes = async (claseId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/ordenes/${claseId}`);\n      const ordenesData = response.data;\n\n\n      // Asignar el nivel \"Orden\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const orden of ordenesData) {\n        coloresNiveles[orden.ord_id] = colorNivel; // Color gris para el nivel \"Orden\"\n        coloresItems[orden.ord_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada orden\n      const elementCounts = {};\n\n      for (const orden of ordenesData) {\n        const response = await axios.get(`http://localhost:4000/familias/${orden.ord_id}`);\n        const familiasData = response.data;\n        elementCounts[orden.ord_id] = familiasData.length;\n      }\n\n      setOrdenes(ordenesData);\n      setOrdenElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching ordenes data: \", error);\n    }\n  };\n\n\n  const fetchFamilias = async (ordenId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/familias/${ordenId}`);\n      const familiasData = response.data;\n\n      // Asignar el nivel \"Familia\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const familia of familiasData) {\n        coloresNiveles[familia.fam_id] = colorNivel; // Color gris para el nivel \"Familia\"\n        coloresItems[familia.fam_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      // Obtener el número de elementos de cada familia\n      const elementCounts = {};\n\n      for (const familia of familiasData) {\n        const response = await axios.get(`http://localhost:4000/generos/${familia.fam_id}`);\n        const generosData = response.data;\n        elementCounts[familia.fam_id] = generosData.length;\n      }\n\n      setFamilias(familiasData);\n      setFamiliaElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching familias data: \", error);\n    }\n  };\n\n  const fetchGeneros = async (familiaId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/generos/${familiaId}`);\n      const generosData = response.data;\n\n      // Asignar el nivel \"Género\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const genero of generosData) {\n        coloresNiveles[genero.gen_id] = colorNivel; // Color gris para el nivel \"Género\"\n        coloresItems[genero.gen_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n      // Obtener el número de elementos de cada género\n      const elementCounts = {};\n\n      for (const genero of generosData) {\n        const response = await axios.get(`http://localhost:4000/especies/${genero.gen_id}`);\n        const especiesData = response.data;\n        elementCounts[genero.gen_id] = especiesData.length;\n      }\n\n      setGeneros(generosData);\n      setGeneroElementCounts(elementCounts);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching generos data: \", error);\n    }\n  };\n\n\n  const fetchEspecies = async (generoId) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/especies/${generoId}`);\n      const especiesData = response.data;\n      // Asignar el nivel \"Especie\" y su color correspondiente\n      const coloresNiveles = { ...colorNiveles };\n      const coloresItems = { ...colorItems };\n      for (const especie of especiesData) {\n        coloresNiveles[especie.esp_id] = colorNivel; // Color gris para el nivel \"Especie\"\n        coloresItems[especie.esp_id] = colorItem; // Color azul celeste para el nombre del elemento\n      }\n\n      setEspecies(response.data);\n      setColorNiveles(coloresNiveles);\n      setColorItems(coloresItems);\n    } catch (error) {\n      console.error(\"Error fetching especies data: \", error);\n    }\n  };\n\n\n\n\n  ///////////////////////////////////     EVENTOS  ////////////////////////////////////////////////////////\n\n\n\n\n  const handleReinoClick = (event, nodeId) => {\n    if (nodeId) {\n      const reinoId = nodeId.split(\"-\")[1];\n      const reino = reinos.find((reino) => reino.rei_id.toString() === reinoId);\n      if (reino) {\n        fetchFilos(reinoId);\n        setClases([]); // Reiniciar las clases cuando se cambia de reino\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleFiloClick = (event, nodeId) => {\n    if (nodeId) {\n      const filoId = nodeId.split(\"-\")[1];\n      const filo = filos.find((filo) => filo.fil_id.toString() === filoId);\n      if (filo) {\n        fetchClases(filoId);\n        setOrdenes([]);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleClaseClick = (event, nodeId) => {\n    if (nodeId) {\n      const claseId = nodeId.split(\"-\")[1];\n      const clase = clases.find((clase) => clase.cla_id.toString() === claseId);\n      if (clase) {\n        fetchOrdenes(claseId);\n        setFamilias([]);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleOrdenClick = (event, nodeId) => {\n    if (nodeId) {\n      const ordenId = nodeId.split(\"-\")[1];\n      const orden = ordenes.find((orden) => orden.ord_id.toString() === ordenId);\n      if (orden) {\n        fetchFamilias(ordenId);\n        setGeneros([]);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleFamiliaClick = (event, nodeId) => {\n    if (nodeId) {\n      const familiaId = nodeId.split(\"-\")[1];\n      const familia = familias.find((familia) => familia.fam_id.toString() === familiaId);\n      if (familia) {\n        fetchGeneros(familiaId);\n        setEspecies([]);\n      }\n    }\n  };\n\n  const handleGeneroClick = (event, nodeId) => {\n    if (nodeId) {\n      const generoId = nodeId.split(\"-\")[1];\n      const genero = generos.find((genero) => genero.gen_id.toString() === generoId);\n      if (genero && selectedSpecies && selectedSpecies.gen_id === genero.gen_id) {\n        // Establecer la especie seleccionada como la rama activa del árbol\n        setSelectedNode(`especie-${selectedSpecies.esp_id}`);\n      }\n    }\n  };\n\n\n\n\n  const handleSpeciesSearch = async (event, value) => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/taxonEspecie\");\n      const speciesData = response.data;\n      setSpeciesOptions(speciesData.map((species) => species.esp_nombre.trim()));\n\n      // Buscar la especie seleccionada\n      const selectedSpecies = speciesData.find((species) => species.esp_nombre.trim() === value);\n      setSelectedSpecies(selectedSpecies);\n    } catch (error) {\n      console.error(\"Error fetching species data: \", error);\n    }\n  };\n\n\n\n\n  ///////////////////////////////////   RENDERS  ////////////////////////////////////////////////////////\n\n\n  const renderReinos = () => {\n    return reinos.map((reino) => (\n      <StyledTreeItem\n        key={reino.rei_id}\n        nodeId={`reino-${reino.rei_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[reino.rei_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Reino:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[reino.rei_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{reino.rei_nombre.trim()} ({reinoElementCounts[reino.rei_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleReinoClick(event, `reino-${reino.rei_id}`)}\n        hasData={filos.some((filo) => filo.rei_id === reino.rei_id)}\n      >\n        {/* Renderizar los filos */}\n        {renderFilos(reino.rei_id)}\n      </StyledTreeItem>\n    ));\n  }\n\n  const renderFilos = (reinoId) => {\n    const filosOfReino = filos.filter((filo) => filo.rei_id === reinoId);\n\n    return filosOfReino.map((filo) => (\n      <StyledTreeItem\n        key={filo.fil_id}\n        nodeId={`filo-${filo.fil_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[filo.fil_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Filo:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[filo.fil_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{filo.fil_nombre.trim()} ({filoElementCounts[filo.fil_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleFiloClick(event, `filo-${filo.fil_id}`)}\n        hasData={clases.some((clase) => clase.fil_id === filo.fil_id)}\n      >\n        {/* Renderizar las clases */}\n        {renderClases(filo.fil_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderClases = (filoId) => {\n    const clasesOfFilo = clases.filter((clase) => clase.fil_id === filoId);\n\n    return clasesOfFilo.map((clase) => (\n      <StyledTreeItem\n        key={clase.cla_id}\n        nodeId={`clase-${clase.cla_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[clase.cla_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Clase:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[clase.cla_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{clase.cla_nombre.trim()} ({claseElementCounts[clase.cla_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleClaseClick(event, `clase-${clase.cla_id}`)}\n        hasData={ordenes.some((orden) => orden.cla_id === clase.cla_id)}\n      >\n        {/* Renderizar las órdenes */}\n        {renderOrdenes(clase.cla_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderOrdenes = (claseId) => {\n    const ordenesOfClase = ordenes.filter((orden) => orden.cla_id === claseId);\n\n    return ordenesOfClase.map((orden) => (\n      <StyledTreeItem\n        key={orden.ord_id}\n        nodeId={`orden-${orden.ord_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[orden.ord_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Orden:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[orden.ord_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{orden.ord_nombre.trim()} ({ordenElementCounts[orden.ord_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleOrdenClick(event, `orden-${orden.ord_id}`)}\n        hasData={familias.some((familia) => familia.ord_id === orden.ord_id)}\n      >\n        {/* Renderizar las familias */}\n        {renderFamilias(orden.ord_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderFamilias = (ordenId) => {\n    const familiasOfOrden = familias.filter((familia) => familia.ord_id === ordenId);\n\n    return familiasOfOrden.map((familia) => (\n      <StyledTreeItem\n        key={familia.fam_id}\n        nodeId={`familia-${familia.fam_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[familia.fam_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Familia:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[familia.fam_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{familia.gen_nombre.trim()}  ({familiaElementCounts[familia.fam_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleFamiliaClick(event, `familia-${familia.fam_id}`)}\n        hasData={generos.some((genero) => genero.fam_id === familia.fam_id)}\n      >\n        {/* Renderizar los géneros */}\n        {renderGeneros(familia.fam_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderGeneros = (familiaId) => {\n    const generosOfFamilia = generos.filter((genero) => genero.fam_id === familiaId);\n\n    return generosOfFamilia.map((genero) => (\n      <StyledTreeItem\n        key={genero.gen_id}\n        nodeId={`genero-${genero.gen_id}`}\n        label={\n          <>\n            <Typography component=\"span\" style={{ color: colorNiveles[genero.gen_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n              Género:\n            </Typography>{\" \"}\n            <span style={{ color: colorItems[genero.gen_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{genero.gen_nombre.trim()} ({generoElementCounts[genero.gen_id] || 0})</span>\n          </>\n        }\n        onClick={(event) => handleGeneroClick(event, `genero-${genero.gen_id}`)}\n        hasData={especies.some((especie) => especie.gen_id === genero.gen_id)}\n      >\n        {/* Renderizar las especies */}\n        {renderEspecies(genero.gen_id)}\n      </StyledTreeItem>\n    ));\n  };\n\n  const renderEspecies = (generoId) => {\n    const especiesOfGenero = especies.filter((especie) => especie.gen_id === generoId);\n\n    return especiesOfGenero.map((especie) => (\n      <StyledTreeItem\n        key={especie.esp_id}\n        nodeId={`especie-${especie.esp_id}`}\n        label={\n          <div>\n            <div>\n              <Typography component=\"span\" style={{ color: colorNiveles[especie.esp_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n                Especie:\n              </Typography>{\" \"}\n              <Link\n                to={`https://doi.org/${especie.ref_doi.trim()}`}\n                target=\"_blank\"\n                style={{ color: colorItems[especie.esp_id], fontSize: tamanoItem, fontFamily: tipoLetra }}\n              >\n                {especie.esp_nombre.trim()}\n              </Link>\n            </div>\n            <div className=\"doi-row\">\n              <Typography component=\"span\" style={{ color: colorNiveles[especie.esp_id], fontSize: tamanoNivel, fontFamily: tipoLetra }}>\n                DOI:\n              </Typography>{\" \"}\n              <span className=\"doi-text\" style={{ color: colorItems[especie.esp_id], fontSize: tamanoItem, fontFamily: tipoLetra }}>{especie.ref_doi.trim()}</span>\n            </div>\n          </div>\n        }\n        selected={selectedNode === `especie-${especie.esp_id}`}\n      />\n\n    ));\n\n  };\n\n\n  ///////////////////////////////////   GRAFICA  ////////////////////////////////////////////////////////\n\n\n  return (\n    <Box >\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {/* Descripción */}\n          <StyledBox>\n            <Typography variant=\"h5\">Descripción</Typography>\n            <Typography variant=\"body1\" fontFamily=\"Helvetica Neue\">\n              Nuestro sitio web es una plataforma diseñada para facilitar la\n              georreferenciación de datos de especies. Con su interfaz fácil de usar\n              y su funcionalidad avanzada, permite a los investigadores,\n              administradores y usuarios administrar y analizar de manera eficiente\n              la información sobre especies.\n            </Typography>\n          </StyledBox>\n        </Grid>\n        <Grid item xs={12}>\n          {/* Contenedor del Árbol y Trabajo académico */}\n          <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <StyledBox>\n                <Typography variant=\"h6\">Árbol Filogenético</Typography>\n                <Autocomplete\n                  options={speciesOptions}\n                  getOptionLabel={(option) => option}\n                  renderInput={(params) => (\n                    <TextField {...params} label=\"Especie\" variant=\"outlined\" />\n                  )}\n                  onInputChange={handleSpeciesSearch}\n                />\n              </StyledBox>\n              {/* Árbol filogenético */}\n              <TreeView\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n                sx={{ height: 240, flexGrow: 1, marginLeft: \"60px\" }}\n              >\n                {/* Renderizar los reinos */}\n                {renderReinos()}\n              </TreeView>\n            </Grid>\n\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Box>\n  );\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}