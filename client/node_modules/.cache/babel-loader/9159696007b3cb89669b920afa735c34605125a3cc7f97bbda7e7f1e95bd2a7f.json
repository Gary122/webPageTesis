{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\TaskForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem from '@mui/lab/TreeItem';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#000000' // Aquí puedes poner el color que desees para el texto y los iconos\n    }\n  }\n});\n\nfunction TaxonomyTree() {\n  _s();\n  const [treeData, setTreeData] = useState([]);\n\n  // Crear un objeto de nodo\n  function createTreeNode(id, name, children, level) {\n    return {\n      id: id.toString(),\n      name: name.trim(),\n      children,\n      level\n    };\n  }\n\n  // Cargar hijos de un nodo\n  async function loadNodeChildren(node, level) {\n    let url = '';\n    let responseData = []; // Renamed from data\n\n    switch (level) {\n      case 'reino':\n        url = `http://localhost:4000/filos/${node.id}`;\n        break;\n      case 'filo':\n        url = `http://localhost:4000/clases/${node.id}`;\n        break;\n      case 'clase':\n        url = `http://localhost:4000/ordenes/${node.id}`;\n        break;\n      case 'orden':\n        url = `http://localhost:4000/familias/${node.id}`;\n        break;\n      case 'familia':\n        url = `http://localhost:4000/generos/${node.id}`;\n        break;\n      case 'genero':\n        url = `http://localhost:4000/especies/${node.id}`;\n        break;\n      default:\n        break;\n    }\n    try {\n      const response = await fetch(url);\n      responseData = await response.json(); // Renamed from data\n      console.log(responseData);\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n    const childNodes = responseData.map(item => {\n      const newNode = createTreeNode(item.id, item.nombre, [], level);\n      node.children.push(newNode);\n      return newNode;\n    });\n    return childNodes;\n  }\n\n  // Manejar evento de expansión de nodo\n  const handleNodeToggle = async (nodeId, nodeState) => {\n    if (nodeState.expanded) {\n      const nodeIndex = treeData.findIndex(node => node.id === nodeId);\n      if (nodeIndex !== -1 && !treeData[nodeIndex].children.length) {\n        const nodeLevel = treeData[nodeIndex].level;\n        await loadNodeChildren(treeData[nodeIndex], nodeLevel);\n        setTreeData([...treeData]);\n      }\n    }\n  };\n\n  // Obtener datos iniciales\n  async function fetchData() {\n    let responseData = []; // Renamed from data\n\n    try {\n      const response = await fetch('http://localhost:4000/reinos');\n      responseData = await response.json(); // Renamed from data\n      console.log(responseData);\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n    const nodes = responseData.map(item => createTreeNode(item.rei_id, item.rei_nombre, [], 'reino'));\n    setTreeData(nodes);\n  }\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Renderizar los nodos del árbol de forma recursiva\n  const renderTree = nodes => {\n    return nodes.map(node => /*#__PURE__*/_jsxDEV(TreeItem, {\n      nodeId: node.id,\n      label: node.name,\n      onToggle: handleNodeToggle,\n      children: Array.isArray(node.children) ? renderTree(node.children) : null\n    }, node.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(TreeView, {\n      defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 38\n      }, this),\n      defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 36\n      }, this),\n      children: renderTree(treeData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n_s(TaxonomyTree, \"beijQgCEr4PaHJnyDg4mOCdZI4w=\");\n_c = TaxonomyTree;\nexport default TaxonomyTree;\nvar _c;\n$RefreshReg$(_c, \"TaxonomyTree\");","map":{"version":3,"names":["React","useState","useEffect","TreeView","TreeItem","ExpandMoreIcon","ChevronRightIcon","createTheme","ThemeProvider","jsxDEV","_jsxDEV","theme","palette","primary","main","TaxonomyTree","_s","treeData","setTreeData","createTreeNode","id","name","children","level","toString","trim","loadNodeChildren","node","url","responseData","response","fetch","json","console","log","error","childNodes","map","item","newNode","nombre","push","handleNodeToggle","nodeId","nodeState","expanded","nodeIndex","findIndex","length","nodeLevel","fetchData","nodes","rei_id","rei_nombre","renderTree","label","onToggle","Array","isArray","fileName","_jsxFileName","lineNumber","columnNumber","defaultCollapseIcon","defaultExpandIcon","_c","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/TaskForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem from '@mui/lab/TreeItem';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: '#000000',  // Aquí puedes poner el color que desees para el texto y los iconos\n        },\n    },\n});\n\n\nfunction TaxonomyTree() {\n    const [treeData, setTreeData] = useState([]);\n\n    // Crear un objeto de nodo\n    function createTreeNode(id, name, children, level) {\n        return { id: id.toString(), name: name.trim(), children, level };\n    }\n\n    // Cargar hijos de un nodo\n    async function loadNodeChildren(node, level) {\n        let url = '';\n        let responseData = [];  // Renamed from data\n\n        switch (level) {\n            case 'reino':\n                url = `http://localhost:4000/filos/${node.id}`;\n                break;\n            case 'filo':\n                url = `http://localhost:4000/clases/${node.id}`;\n                break;\n            case 'clase':\n                url = `http://localhost:4000/ordenes/${node.id}`;\n                break;\n            case 'orden':\n                url = `http://localhost:4000/familias/${node.id}`;\n                break;\n            case 'familia':\n                url = `http://localhost:4000/generos/${node.id}`;\n                break;\n            case 'genero':\n                url = `http://localhost:4000/especies/${node.id}`;\n                break;\n            default:\n                break;\n        }\n\n        try {\n            const response = await fetch(url);\n            responseData = await response.json();  // Renamed from data\n            console.log(responseData);\n        } catch (error) {\n            console.error('Error fetching data: ', error);\n        }\n\n        const childNodes = responseData.map((item) => {\n            const newNode = createTreeNode(item.id, item.nombre, [], level);\n            node.children.push(newNode);\n            return newNode;\n        });\n\n        return childNodes;\n    }\n\n    // Manejar evento de expansión de nodo\n    const handleNodeToggle = async (nodeId, nodeState) => {\n        if (nodeState.expanded) {\n            const nodeIndex = treeData.findIndex(node => node.id === nodeId);\n            if (nodeIndex !== -1 && !treeData[nodeIndex].children.length) {\n                const nodeLevel = treeData[nodeIndex].level;\n                await loadNodeChildren(treeData[nodeIndex], nodeLevel);\n                setTreeData([...treeData]);\n            }\n        }\n    };\n\n    // Obtener datos iniciales\n    async function fetchData() {\n        let responseData = [];  // Renamed from data\n\n        try {\n            const response = await fetch('http://localhost:4000/reinos');\n            responseData = await response.json();  // Renamed from data\n            console.log(responseData);\n        } catch (error) {\n            console.error('Error fetching data: ', error);\n        }\n\n        const nodes = responseData.map((item) => createTreeNode(item.rei_id, item.rei_nombre, [], 'reino'));\n        setTreeData(nodes);\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    // Renderizar los nodos del árbol de forma recursiva\n    const renderTree = (nodes) => {\n        return nodes.map((node) => (\n            <TreeItem key={node.id} nodeId={node.id} label={node.name} onToggle={handleNodeToggle}>\n                {Array.isArray(node.children) ? renderTree(node.children) : null}\n            </TreeItem>\n        ));\n    };\n\n    return (\n\n        <ThemeProvider theme={theme}>\n            <TreeView\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n            >\n                {renderTree(treeData)}\n            </TreeView>\n        </ThemeProvider>\n\n    );\n}\n\nexport default TaxonomyTree;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}