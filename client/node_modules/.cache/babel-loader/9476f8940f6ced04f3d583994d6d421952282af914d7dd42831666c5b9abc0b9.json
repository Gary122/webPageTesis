{"ast":null,"code":"import { Dimensions } from 'react-native';\n/**\n * Return true when the tooltip center x-coordinate relative to the wrapped element is negative.\n * The tooltip will be placed at the starting x-coordinate from the wrapped element.\n */\nconst overflowLeft = center => {\n  return center < 0;\n};\n\n/**\n * Return true when the tooltip center x-coordinate + tooltip width is greater than the layout width\n * The tooltip width will grow from right to left relative to the wrapped element.\n */\nconst overflowRight = (center, tooltipWidth) => {\n  const {\n    width: layoutWidth\n  } = Dimensions.get('window');\n  return center + tooltipWidth > layoutWidth;\n};\n\n/**\n * Return true when the children y-coordinate + its height + tooltip height is greater than the layout height.\n * The tooltip will be placed at the top of the wrapped element.\n */\nconst overflowBottom = (childrenY, childrenHeight, tooltipHeight) => {\n  const {\n    height: layoutHeight\n  } = Dimensions.get('window');\n  return childrenY + childrenHeight + tooltipHeight > layoutHeight;\n};\nconst getTooltipXPosition = (_ref, _ref2) => {\n  let {\n    pageX: childrenX,\n    width: childrenWidth\n  } = _ref;\n  let {\n    width: tooltipWidth\n  } = _ref2;\n  const center = childrenX + (childrenWidth - tooltipWidth) / 2;\n  if (overflowLeft(center)) return childrenX;\n  if (overflowRight(center, tooltipWidth)) return childrenX + childrenWidth - tooltipWidth;\n  return center;\n};\nconst getTooltipYPosition = (_ref3, _ref4) => {\n  let {\n    pageY: childrenY,\n    height: childrenHeight\n  } = _ref3;\n  let {\n    height: tooltipHeight\n  } = _ref4;\n  if (overflowBottom(childrenY, childrenHeight, tooltipHeight)) return childrenY - tooltipHeight;\n  return childrenY + childrenHeight;\n};\nexport const getTooltipPosition = _ref5 => {\n  let {\n    children,\n    tooltip,\n    measured\n  } = _ref5;\n  if (!measured) return {};\n  return {\n    left: getTooltipXPosition(children, tooltip),\n    top: getTooltipYPosition(children, tooltip)\n  };\n};","map":{"version":3,"names":["Dimensions","overflowLeft","center","overflowRight","tooltipWidth","width","layoutWidth","get","overflowBottom","childrenY","childrenHeight","tooltipHeight","height","layoutHeight","getTooltipXPosition","_ref","_ref2","pageX","childrenX","childrenWidth","getTooltipYPosition","_ref3","_ref4","pageY","getTooltipPosition","_ref5","children","tooltip","measured","left","top"],"sources":["C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\node_modules\\react-native-paper\\src\\components\\Tooltip\\utils.ts"],"sourcesContent":["import { Dimensions, LayoutRectangle } from 'react-native';\n\ntype ChildrenMeasurement = {\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n};\n\ntype TooltipLayout = LayoutRectangle;\n\nexport type Measurement = {\n  children: ChildrenMeasurement;\n  tooltip: TooltipLayout;\n  measured: boolean;\n};\n\n/**\n * Return true when the tooltip center x-coordinate relative to the wrapped element is negative.\n * The tooltip will be placed at the starting x-coordinate from the wrapped element.\n */\nconst overflowLeft = (center: number): boolean => {\n  return center < 0;\n};\n\n/**\n * Return true when the tooltip center x-coordinate + tooltip width is greater than the layout width\n * The tooltip width will grow from right to left relative to the wrapped element.\n */\nconst overflowRight = (center: number, tooltipWidth: number): boolean => {\n  const { width: layoutWidth } = Dimensions.get('window');\n\n  return center + tooltipWidth > layoutWidth;\n};\n\n/**\n * Return true when the children y-coordinate + its height + tooltip height is greater than the layout height.\n * The tooltip will be placed at the top of the wrapped element.\n */\nconst overflowBottom = (\n  childrenY: number,\n  childrenHeight: number,\n  tooltipHeight: number\n): boolean => {\n  const { height: layoutHeight } = Dimensions.get('window');\n\n  return childrenY + childrenHeight + tooltipHeight > layoutHeight;\n};\n\nconst getTooltipXPosition = (\n  { pageX: childrenX, width: childrenWidth }: ChildrenMeasurement,\n  { width: tooltipWidth }: TooltipLayout\n): number => {\n  const center = childrenX + (childrenWidth - tooltipWidth) / 2;\n\n  if (overflowLeft(center)) return childrenX;\n\n  if (overflowRight(center, tooltipWidth))\n    return childrenX + childrenWidth - tooltipWidth;\n\n  return center;\n};\n\nconst getTooltipYPosition = (\n  { pageY: childrenY, height: childrenHeight }: ChildrenMeasurement,\n  { height: tooltipHeight }: TooltipLayout\n): number => {\n  if (overflowBottom(childrenY, childrenHeight, tooltipHeight))\n    return childrenY - tooltipHeight;\n\n  return childrenY + childrenHeight;\n};\n\nexport const getTooltipPosition = ({\n  children,\n  tooltip,\n  measured,\n}: Measurement): {} | { left: number; top: number } => {\n  if (!measured) return {};\n\n  return {\n    left: getTooltipXPosition(children, tooltip),\n    top: getTooltipYPosition(children, tooltip),\n  };\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAyB,cAAc;AAiB1D;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAIC,MAAc,IAAc;EAChD,OAAOA,MAAM,GAAG,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGA,CAACD,MAAc,EAAEE,YAAoB,KAAc;EACvE,MAAM;IAAEC,KAAK,EAAEC;EAAY,CAAC,GAAGN,UAAU,CAACO,GAAG,CAAC,QAAQ,CAAC;EAEvD,OAAOL,MAAM,GAAGE,YAAY,GAAGE,WAAW;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAME,cAAc,GAAGA,CACrBC,SAAiB,EACjBC,cAAsB,EACtBC,aAAqB,KACT;EACZ,MAAM;IAAEC,MAAM,EAAEC;EAAa,CAAC,GAAGb,UAAU,CAACO,GAAG,CAAC,QAAQ,CAAC;EAEzD,OAAOE,SAAS,GAAGC,cAAc,GAAGC,aAAa,GAAGE,YAAY;AAClE,CAAC;AAED,MAAMC,mBAAmB,GAAGA,CAAAC,IAAA,EAAAC,KAAA,KAGf;EAAA,IAFX;IAAEC,KAAK,EAAEC,SAAS;IAAEb,KAAK,EAAEc;EAAmC,CAAC,GAAAJ,IAAA;EAAA,IAC/D;IAAEV,KAAK,EAAED;EAA4B,CAAC,GAAAY,KAAA;EAEtC,MAAMd,MAAM,GAAGgB,SAAS,GAAG,CAACC,aAAa,GAAGf,YAAY,IAAI,CAAC;EAE7D,IAAIH,YAAY,CAACC,MAAM,CAAC,EAAE,OAAOgB,SAAS;EAE1C,IAAIf,aAAa,CAACD,MAAM,EAAEE,YAAY,CAAC,EACrC,OAAOc,SAAS,GAAGC,aAAa,GAAGf,YAAY;EAEjD,OAAOF,MAAM;AACf,CAAC;AAED,MAAMkB,mBAAmB,GAAGA,CAAAC,KAAA,EAAAC,KAAA,KAGf;EAAA,IAFX;IAAEC,KAAK,EAAEd,SAAS;IAAEG,MAAM,EAAEF;EAAoC,CAAC,GAAAW,KAAA;EAAA,IACjE;IAAET,MAAM,EAAED;EAA6B,CAAC,GAAAW,KAAA;EAExC,IAAId,cAAc,CAACC,SAAS,EAAEC,cAAc,EAAEC,aAAa,CAAC,EAC1D,OAAOF,SAAS,GAAGE,aAAa;EAElC,OAAOF,SAAS,GAAGC,cAAc;AACnC,CAAC;AAED,OAAO,MAAMc,kBAAkB,GAAGC,KAAA,IAIqB;EAAA,IAJpB;IACjCC,QAAQ;IACRC,OAAO;IACPC;EACW,CAAC,GAAAH,KAAA;EACZ,IAAI,CAACG,QAAQ,EAAE,OAAO,CAAC,CAAC;EAExB,OAAO;IACLC,IAAI,EAAEf,mBAAmB,CAACY,QAAQ,EAAEC,OAAO,CAAC;IAC5CG,GAAG,EAAEV,mBAAmB,CAACM,QAAQ,EAAEC,OAAO;EAC5C,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}