{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\TaskForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem from '@mui/lab/TreeItem';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaxonomyTree() {\n  _s();\n  const [treeData, setTreeData] = useState([]);\n\n  // Crear un objeto de nodo\n  function createTreeNode(id, name, children, level) {\n    return {\n      id,\n      name,\n      children,\n      level\n    };\n  }\n\n  // Cargar hijos de un nodo\n  async function loadNodeChildren(node, level) {\n    let url = '';\n    let data = [];\n    switch (level) {\n      case 'reino':\n        url = `/filos/${node.id}`;\n        break;\n      case 'filo':\n        url = `/clases/${node.id}`;\n        break;\n      case 'clase':\n        url = `/ordenes/${node.id}`;\n        break;\n      case 'orden':\n        url = `/familias/${node.id}`;\n        break;\n      case 'familia':\n        url = `/generos/${node.id}`;\n        break;\n      case 'genero':\n        url = `/especies/${node.id}`;\n        break;\n      default:\n        break;\n    }\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      data = await response.json();\n    } catch (e) {\n      console.log('A network problem or an error occurred during fetch operation: ' + e.message);\n    }\n    const childNodes = data.map(item => {\n      const newNode = createTreeNode(item.id, item.nombre, [], level);\n      node.children.push(newNode);\n      return newNode;\n    });\n    return childNodes;\n  }\n\n  // Manejar evento de expansión de nodo\n  const handleNodeToggle = async (nodeId, nodeState) => {\n    // Buscamos el nodo específico por 'id'\n    const node = treeData.find(n => n.id === nodeId);\n    if (node && nodeState.expanded && !node.children.length) {\n      const nodeLevel = node.level;\n      await loadNodeChildren(node, nodeLevel);\n      setTreeData([...treeData]);\n    }\n  };\n\n  // Obtener datos iniciales\n  async function fetchData() {\n    try {\n      const response = await fetch('/reinos');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const nodes = data.map(item => createTreeNode(item.id, item.nombre, [], 'reino'));\n      setTreeData(nodes);\n    } catch (e) {\n      console.log('A network problem or an error occurred during fetch operation: ' + e.message);\n    }\n  }\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Renderizar los nodos del árbol de forma recursiva\n  const renderTree = nodes => {\n    return nodes.map(node => /*#__PURE__*/_jsxDEV(TreeItem, {\n      nodeId: node.id,\n      label: node.name,\n      onToggle: handleNodeToggle,\n      children: Array.isArray(node.children) ? renderTree(node.children) : null\n    }, node.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(TreeView, {\n    defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 34\n    }, this),\n    defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 32\n    }, this),\n    children: renderTree(treeData)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n_s(TaxonomyTree, \"beijQgCEr4PaHJnyDg4mOCdZI4w=\");\n_c = TaxonomyTree;\nexport default TaxonomyTree;\nvar _c;\n$RefreshReg$(_c, \"TaxonomyTree\");","map":{"version":3,"names":["React","useState","useEffect","TreeView","TreeItem","ExpandMoreIcon","ChevronRightIcon","jsxDEV","_jsxDEV","TaxonomyTree","_s","treeData","setTreeData","createTreeNode","id","name","children","level","loadNodeChildren","node","url","data","response","fetch","ok","Error","status","json","e","console","log","message","childNodes","map","item","newNode","nombre","push","handleNodeToggle","nodeId","nodeState","find","n","expanded","length","nodeLevel","fetchData","nodes","renderTree","label","onToggle","Array","isArray","fileName","_jsxFileName","lineNumber","columnNumber","defaultCollapseIcon","defaultExpandIcon","_c","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/TaskForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem from '@mui/lab/TreeItem';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\n\nfunction TaxonomyTree() {\n    const [treeData, setTreeData] = useState([]);\n\n    // Crear un objeto de nodo\n    function createTreeNode(id, name, children, level) {\n        return { id, name, children, level };\n    }\n\n    // Cargar hijos de un nodo\n    async function loadNodeChildren(node, level) {\n        let url = '';\n        let data = [];\n\n        switch (level) {\n            case 'reino':\n                url = `/filos/${node.id}`;\n                break;\n            case 'filo':\n                url = `/clases/${node.id}`;\n                break;\n            case 'clase':\n                url = `/ordenes/${node.id}`;\n                break;\n            case 'orden':\n                url = `/familias/${node.id}`;\n                break;\n            case 'familia':\n                url = `/generos/${node.id}`;\n                break;\n            case 'genero':\n                url = `/especies/${node.id}`;\n                break;\n            default:\n                break;\n        }\n\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            data = await response.json();\n        } catch (e) {\n            console.log('A network problem or an error occurred during fetch operation: ' + e.message);\n        }\n\n        const childNodes = data.map((item) => {\n            const newNode = createTreeNode(item.id, item.nombre, [], level);\n            node.children.push(newNode);\n            return newNode;\n        });\n\n        return childNodes;\n    }\n\n    // Manejar evento de expansión de nodo\n    const handleNodeToggle = async (nodeId, nodeState) => {\n        // Buscamos el nodo específico por 'id'\n        const node = treeData.find(n => n.id === nodeId);\n\n        if (node && nodeState.expanded && !node.children.length) {\n            const nodeLevel = node.level;\n            await loadNodeChildren(node, nodeLevel);\n            setTreeData([...treeData]);\n        }\n    };\n\n    // Obtener datos iniciales\n    async function fetchData() {\n        try {\n            const response = await fetch('/reinos');\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            const nodes = data.map((item) => createTreeNode(item.id, item.nombre, [], 'reino'));\n            setTreeData(nodes);\n        } catch (e) {\n            console.log('A network problem or an error occurred during fetch operation: ' + e.message);\n        }\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    // Renderizar los nodos del árbol de forma recursiva\n    const renderTree = (nodes) => {\n        return nodes.map((node) => (\n            <TreeItem key={node.id} nodeId={node.id} label={node.name} onToggle={handleNodeToggle}>\n                {Array.isArray(node.children) ? renderTree(node.children) : null}\n            </TreeItem>\n        ));\n    };\n\n    return (\n        <TreeView\n            defaultCollapseIcon={<ExpandMoreIcon />}\n            defaultExpandIcon={<ChevronRightIcon />}\n        >\n            {renderTree(treeData)}\n        </TreeView>\n    );\n}\n\nexport default TaxonomyTree;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,cAAc,MAAM,gCAAgC;AAC3D,OAAOC,gBAAgB,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,SAASY,cAAcA,CAACC,EAAE,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAE;IAC/C,OAAO;MAAEH,EAAE;MAAEC,IAAI;MAAEC,QAAQ;MAAEC;IAAM,CAAC;EACxC;;EAEA;EACA,eAAeC,gBAAgBA,CAACC,IAAI,EAAEF,KAAK,EAAE;IACzC,IAAIG,GAAG,GAAG,EAAE;IACZ,IAAIC,IAAI,GAAG,EAAE;IAEb,QAAQJ,KAAK;MACT,KAAK,OAAO;QACRG,GAAG,GAAI,UAASD,IAAI,CAACL,EAAG,EAAC;QACzB;MACJ,KAAK,MAAM;QACPM,GAAG,GAAI,WAAUD,IAAI,CAACL,EAAG,EAAC;QAC1B;MACJ,KAAK,OAAO;QACRM,GAAG,GAAI,YAAWD,IAAI,CAACL,EAAG,EAAC;QAC3B;MACJ,KAAK,OAAO;QACRM,GAAG,GAAI,aAAYD,IAAI,CAACL,EAAG,EAAC;QAC5B;MACJ,KAAK,SAAS;QACVM,GAAG,GAAI,YAAWD,IAAI,CAACL,EAAG,EAAC;QAC3B;MACJ,KAAK,QAAQ;QACTM,GAAG,GAAI,aAAYD,IAAI,CAACL,EAAG,EAAC;QAC5B;MACJ;QACI;IACR;IAEA,IAAI;MACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;MACjC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC7D;MACAL,IAAI,GAAG,MAAMC,QAAQ,CAACK,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,CAAC,EAAE;MACRC,OAAO,CAACC,GAAG,CAAC,iEAAiE,GAAGF,CAAC,CAACG,OAAO,CAAC;IAC9F;IAEA,MAAMC,UAAU,GAAGX,IAAI,CAACY,GAAG,CAAEC,IAAI,IAAK;MAClC,MAAMC,OAAO,GAAGtB,cAAc,CAACqB,IAAI,CAACpB,EAAE,EAAEoB,IAAI,CAACE,MAAM,EAAE,EAAE,EAAEnB,KAAK,CAAC;MAC/DE,IAAI,CAACH,QAAQ,CAACqB,IAAI,CAACF,OAAO,CAAC;MAC3B,OAAOA,OAAO;IAClB,CAAC,CAAC;IAEF,OAAOH,UAAU;EACrB;;EAEA;EACA,MAAMM,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,SAAS,KAAK;IAClD;IACA,MAAMrB,IAAI,GAAGR,QAAQ,CAAC8B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC5B,EAAE,KAAKyB,MAAM,CAAC;IAEhD,IAAIpB,IAAI,IAAIqB,SAAS,CAACG,QAAQ,IAAI,CAACxB,IAAI,CAACH,QAAQ,CAAC4B,MAAM,EAAE;MACrD,MAAMC,SAAS,GAAG1B,IAAI,CAACF,KAAK;MAC5B,MAAMC,gBAAgB,CAACC,IAAI,EAAE0B,SAAS,CAAC;MACvCjC,WAAW,CAAC,CAAC,GAAGD,QAAQ,CAAC,CAAC;IAC9B;EACJ,CAAC;;EAED;EACA,eAAemC,SAASA,CAAA,EAAG;IACvB,IAAI;MACA,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,CAAC;MACvC,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC7D;MACA,MAAML,IAAI,GAAG,MAAMC,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,MAAMoB,KAAK,GAAG1B,IAAI,CAACY,GAAG,CAAEC,IAAI,IAAKrB,cAAc,CAACqB,IAAI,CAACpB,EAAE,EAAEoB,IAAI,CAACE,MAAM,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;MACnFxB,WAAW,CAACmC,KAAK,CAAC;IACtB,CAAC,CAAC,OAAOnB,CAAC,EAAE;MACRC,OAAO,CAACC,GAAG,CAAC,iEAAiE,GAAGF,CAAC,CAACG,OAAO,CAAC;IAC9F;EACJ;EAEA7B,SAAS,CAAC,MAAM;IACZ4C,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,UAAU,GAAID,KAAK,IAAK;IAC1B,OAAOA,KAAK,CAACd,GAAG,CAAEd,IAAI,iBAClBX,OAAA,CAACJ,QAAQ;MAAemC,MAAM,EAAEpB,IAAI,CAACL,EAAG;MAACmC,KAAK,EAAE9B,IAAI,CAACJ,IAAK;MAACmC,QAAQ,EAAEZ,gBAAiB;MAAAtB,QAAA,EACjFmC,KAAK,CAACC,OAAO,CAACjC,IAAI,CAACH,QAAQ,CAAC,GAAGgC,UAAU,CAAC7B,IAAI,CAACH,QAAQ,CAAC,GAAG;IAAI,GADrDG,IAAI,CAACL,EAAE;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CACb,CAAC;EACN,CAAC;EAED,oBACIhD,OAAA,CAACL,QAAQ;IACLsD,mBAAmB,eAAEjD,OAAA,CAACH,cAAc;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAE;IACxCE,iBAAiB,eAAElD,OAAA,CAACF,gBAAgB;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAE;IAAAxC,QAAA,EAEvCgC,UAAU,CAACrC,QAAQ;EAAC;IAAA0C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEnB;AAAC9C,EAAA,CAvGQD,YAAY;AAAAkD,EAAA,GAAZlD,YAAY;AAyGrB,eAAeA,YAAY;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}