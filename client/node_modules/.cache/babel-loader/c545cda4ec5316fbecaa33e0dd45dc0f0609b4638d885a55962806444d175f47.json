{"ast":null,"code":"import color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nexport const getCardCoverStyle = _ref => {\n  let {\n    theme,\n    index,\n    total\n  } = _ref;\n  const {\n    isV3,\n    roundness\n  } = theme;\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness\n    };\n  }\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness\n      };\n    }\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness\n    };\n  }\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness\n    };\n  }\n  return undefined;\n};\nconst getBorderColor = _ref2 => {\n  let {\n    theme\n  } = _ref2;\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\nconst getBackgroundColor = _ref3 => {\n  let {\n    theme,\n    isMode\n  } = _ref3;\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n  return undefined;\n};\nexport const getCardColors = _ref4 => {\n  let {\n    theme,\n    mode\n  } = _ref4;\n  const isMode = modeToCompare => {\n    return mode === modeToCompare;\n  };\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode\n    }),\n    borderColor: getBorderColor({\n      theme\n    })\n  };\n};","map":{"version":3,"names":["color","black","white","getCardCoverStyle","_ref","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","_ref2","colors","outline","dark","alpha","rgb","string","getBackgroundColor","_ref3","isMode","surfaceVariant","surface","getCardColors","_ref4","mode","modeToCompare","backgroundColor","borderColor"],"sources":["C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\node_modules\\react-native-paper\\src\\components\\Card\\utils.tsx"],"sourcesContent":["import color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: InternalTheme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness,\n    };\n  }\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: InternalTheme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: InternalTheme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,KAAK,EAAEC,KAAK,QAAQ,+BAA+B;AAK5D,OAAO,MAAMC,iBAAiB,GAAGC,IAAA,IAQ3B;EAAA,IAR4B;IAChCC,KAAK;IACLC,KAAK;IACLC;EAKF,CAAC,GAAAH,IAAA;EACC,MAAM;IAAEI,IAAI;IAAEC;EAAU,CAAC,GAAGJ,KAAK;EAEjC,IAAIG,IAAI,EAAE;IACR,OAAO;MACLE,YAAY,EAAE,CAAC,GAAGD;IACpB,CAAC;EACH;EAEA,IAAIH,KAAK,KAAK,CAAC,EAAE;IACf,IAAIC,KAAK,KAAK,CAAC,EAAE;MACf,OAAO;QACLG,YAAY,EAAED;MAChB,CAAC;IACH;IAEA,OAAO;MACLE,mBAAmB,EAAEF,SAAS;MAC9BG,oBAAoB,EAAEH;IACxB,CAAC;EACH;EAEA,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAID,KAAK,KAAKC,KAAK,GAAG,CAAC,EAAE;IACpD,OAAO;MACLM,sBAAsB,EAAEJ;IAC1B,CAAC;EACH;EAEA,OAAOK,SAAS;AAClB,CAAC;AAED,MAAMC,cAAc,GAAGC,KAAA,IAAyC;EAAA,IAAxC;IAAEX;EAAgC,CAAC,GAAAW,KAAA;EACzD,IAAIX,KAAK,CAACG,IAAI,EAAE;IACd,OAAOH,KAAK,CAACY,MAAM,CAACC,OAAO;EAC7B;EAEA,IAAIb,KAAK,CAACc,IAAI,EAAE;IACd,OAAOnB,KAAK,CAACE,KAAK,CAAC,CAACkB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;EAChD;EACA,OAAOtB,KAAK,CAACC,KAAK,CAAC,CAACmB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;AAChD,CAAC;AAED,MAAMC,kBAAkB,GAAGC,KAAA,IAMrB;EAAA,IANsB;IAC1BnB,KAAK;IACLoB;EAIF,CAAC,GAAAD,KAAA;EACC,IAAInB,KAAK,CAACG,IAAI,EAAE;IACd,IAAIiB,MAAM,CAAC,WAAW,CAAC,EAAE;MACvB,OAAOpB,KAAK,CAACY,MAAM,CAACS,cAAc;IACpC;IACA,IAAID,MAAM,CAAC,UAAU,CAAC,EAAE;MACtB,OAAOpB,KAAK,CAACY,MAAM,CAACU,OAAO;IAC7B;EACF;EACA,OAAOb,SAAS;AAClB,CAAC;AAED,OAAO,MAAMc,aAAa,GAAGC,KAAA,IAMvB;EAAA,IANwB;IAC5BxB,KAAK;IACLyB;EAIF,CAAC,GAAAD,KAAA;EACC,MAAMJ,MAAM,GAAIM,aAAuB,IAAK;IAC1C,OAAOD,IAAI,KAAKC,aAAa;EAC/B,CAAC;EAED,OAAO;IACLC,eAAe,EAAET,kBAAkB,CAAC;MAClClB,KAAK;MACLoB;IACF,CAAC,CAAC;IACFQ,WAAW,EAAElB,cAAc,CAAC;MAAEV;IAAM,CAAC;EACvC,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}