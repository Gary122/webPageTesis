{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Animated, TextInput as NativeTextInput } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { forwardRef } from '../../utils/forwardRef';\nimport { roundLayoutSize } from '../../utils/roundLayoutSize';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputOutlined from './TextInputOutlined';\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\nconst DefaultRenderer = props => /*#__PURE__*/React.createElement(NativeTextInput, props);\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\nconst TextInput = forwardRef((_ref, ref) => {\n  let {\n    mode = 'flat',\n    dense = false,\n    disabled = false,\n    error: errorProp = false,\n    multiline = false,\n    editable = true,\n    contentStyle,\n    render = DefaultRenderer,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const isControlled = rest.value !== undefined;\n  const validInputValue = isControlled ? rest.value : rest.defaultValue;\n  const {\n    current: labeled\n  } = React.useRef(new Animated.Value(validInputValue ? 0 : 1));\n  const {\n    current: error\n  } = React.useRef(new Animated.Value(errorProp ? 1 : 0));\n  const [focused, setFocused] = React.useState(false);\n  const [placeholder, setPlaceholder] = React.useState(' ');\n  const [uncontrolledValue, setUncontrolledValue] = React.useState(validInputValue);\n  // Use value from props instead of local state when input is controlled\n  const value = isControlled ? rest.value : uncontrolledValue;\n  const [labelLayout, setLabelLayout] = React.useState({\n    measured: false,\n    width: 0,\n    height: 0\n  });\n  const [leftLayout, setLeftLayout] = React.useState({\n    width: null,\n    height: null\n  });\n  const [rightLayout, setRightLayout] = React.useState({\n    width: null,\n    height: null\n  });\n  const timer = React.useRef();\n  const root = React.useRef();\n  const {\n    scale\n  } = theme.animation;\n  React.useImperativeHandle(ref, () => ({\n    focus: () => {\n      var _root$current;\n      return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();\n    },\n    clear: () => {\n      var _root$current2;\n      return (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear();\n    },\n    setNativeProps: args => {\n      var _root$current3;\n      return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n    },\n    isFocused: () => {\n      var _root$current4;\n      return ((_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused()) || false;\n    },\n    blur: () => {\n      var _root$current5;\n      return (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur();\n    },\n    forceFocus: () => {\n      var _root$current6;\n      return (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.focus();\n    }\n  }));\n  React.useEffect(() => {\n    // When the input has an error, we wiggle the label and apply error styles\n    if (errorProp) {\n      // show error\n      Animated.timing(error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    } else {\n      // hide error\n      {\n        Animated.timing(error, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [errorProp, scale, error]);\n  React.useEffect(() => {\n    // Show placeholder text only if the input is focused, or there's no label\n    // We don't show placeholder if there's a label because the label acts as placeholder\n    // When focused, the label moves up, so we can show a placeholder\n    if (focused || !rest.label) {\n      // If the user wants to use the contextMenu, when changing the placeholder, the contextMenu is closed\n      // This is a workaround to mitigate this behavior in scenarios where the placeholder is not specified.\n      if (rest.placeholder) {\n        // Set the placeholder in a delay to offset the label animation\n        // If we show it immediately, they'll overlap and look ugly\n        timer.current = setTimeout(() => setPlaceholder(rest.placeholder), 50);\n      }\n    } else {\n      // hidePlaceholder\n\n      // Issue: https://github.com/callstack/react-native-paper/issues/3138\n      // Description:   Changing the placeholder text value dynamically,\n      //                within multiline input on iOS, doesn't work properly â€“\n      //                the placeholder is not displayed initially.\n      // Root cause:    Placeholder initial value, which has length 0.\n      // More context:  The issue was also reproduced in react-native, using its own TextInput.\n      // Workaround:    Set an empty space character in the default value.\n      setPlaceholder(' ');\n    }\n    return () => {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [focused, rest.label, rest.placeholder]);\n  React.useEffect(() => {\n    labeled.stopAnimation();\n    // The label should be minimized if the text input is focused, or has text\n    // In minimized mode, the label moves up and becomes small\n    // workaround for animated regression for react native > 0.61\n    // https://github.com/callstack/react-native-paper/pull/1440\n    if (value || focused) {\n      // minimize label\n      Animated.timing(labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    } else {\n      // restore label\n      Animated.timing(labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    }\n  }, [focused, value, labeled, scale]);\n  const onLeftAffixLayoutChange = React.useCallback(event => {\n    const height = roundLayoutSize(event.nativeEvent.layout.height);\n    const width = roundLayoutSize(event.nativeEvent.layout.width);\n    if (width !== leftLayout.width || height !== leftLayout.height) {\n      setLeftLayout({\n        width,\n        height\n      });\n    }\n  }, [leftLayout.height, leftLayout.width]);\n  const onRightAffixLayoutChange = React.useCallback(event => {\n    const width = roundLayoutSize(event.nativeEvent.layout.width);\n    const height = roundLayoutSize(event.nativeEvent.layout.height);\n    if (width !== rightLayout.width || height !== rightLayout.height) {\n      setRightLayout({\n        width,\n        height\n      });\n    }\n  }, [rightLayout.height, rightLayout.width]);\n  const handleFocus = args => {\n    var _rest$onFocus;\n    if (disabled || !editable) {\n      return;\n    }\n    setFocused(true);\n    (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest, args);\n  };\n  const handleBlur = args => {\n    var _rest$onBlur;\n    if (!editable) {\n      return;\n    }\n    setFocused(false);\n    (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 ? void 0 : _rest$onBlur.call(rest, args);\n  };\n  const handleChangeText = value => {\n    var _rest$onChangeText;\n    if (!editable || disabled) {\n      return;\n    }\n    if (!isControlled) {\n      // Keep track of value in local state when input is not controlled\n      setUncontrolledValue(value);\n    }\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, value);\n  };\n  const handleLayoutAnimatedText = React.useCallback(e => {\n    const width = roundLayoutSize(e.nativeEvent.layout.width);\n    const height = roundLayoutSize(e.nativeEvent.layout.height);\n    if (width !== labelLayout.width || height !== labelLayout.height) {\n      setLabelLayout({\n        width,\n        height,\n        measured: true\n      });\n    }\n  }, [labelLayout.height, labelLayout.width]);\n  const forceFocus = React.useCallback(() => {\n    var _root$current7;\n    return (_root$current7 = root.current) === null || _root$current7 === void 0 ? void 0 : _root$current7.focus();\n  }, []);\n  const {\n    maxFontSizeMultiplier = 1.5\n  } = rest;\n  if (mode === 'outlined') {\n    return /*#__PURE__*/React.createElement(TextInputOutlined, _extends({\n      dense: dense,\n      disabled: disabled,\n      error: errorProp,\n      multiline: multiline,\n      editable: editable,\n      render: render\n    }, rest, {\n      theme: theme,\n      value: value,\n      parentState: {\n        labeled,\n        error,\n        focused,\n        placeholder,\n        value,\n        labelLayout,\n        leftLayout,\n        rightLayout\n      },\n      innerRef: ref => {\n        root.current = ref;\n      },\n      onFocus: handleFocus,\n      forceFocus: forceFocus,\n      onBlur: handleBlur,\n      onChangeText: handleChangeText,\n      onLayoutAnimatedText: handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: onRightAffixLayoutChange,\n      maxFontSizeMultiplier: maxFontSizeMultiplier,\n      contentStyle: contentStyle\n    }));\n  }\n  return /*#__PURE__*/React.createElement(TextInputFlat, _extends({\n    dense: dense,\n    disabled: disabled,\n    error: errorProp,\n    multiline: multiline,\n    editable: editable,\n    render: render\n  }, rest, {\n    theme: theme,\n    value: value,\n    parentState: {\n      labeled,\n      error,\n      focused,\n      placeholder,\n      value,\n      labelLayout,\n      leftLayout,\n      rightLayout\n    },\n    innerRef: ref => {\n      root.current = ref;\n    },\n    onFocus: handleFocus,\n    forceFocus: forceFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChangeText,\n    onLayoutAnimatedText: handleLayoutAnimatedText,\n    onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n    onRightAffixLayoutChange: onRightAffixLayoutChange,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    contentStyle: contentStyle\n  }));\n});\n// @component ./Adornment/TextInputIcon.tsx\nTextInput.Icon = TextInputIcon;\n\n// @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\nTextInput.Affix = TextInputAffix;\nexport default TextInput;","map":{"version":3,"names":["React","Animated","TextInput","NativeTextInput","useInternalTheme","forwardRef","roundLayoutSize","TextInputAffix","TextInputIcon","TextInputFlat","TextInputOutlined","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","DefaultRenderer","props","createElement","_ref","ref","mode","dense","disabled","error","errorProp","multiline","editable","contentStyle","render","theme","themeOverrides","rest","isControlled","value","undefined","validInputValue","defaultValue","current","labeled","useRef","Value","focused","setFocused","useState","placeholder","setPlaceholder","uncontrolledValue","setUncontrolledValue","labelLayout","setLabelLayout","measured","width","height","leftLayout","setLeftLayout","rightLayout","setRightLayout","timer","root","scale","animation","useImperativeHandle","focus","_root$current","clear","_root$current2","setNativeProps","args","_root$current3","isFocused","_root$current4","blur","_root$current5","forceFocus","_root$current6","useEffect","timing","toValue","duration","useNativeDriver","start","label","setTimeout","clearTimeout","stopAnimation","onLeftAffixLayoutChange","useCallback","event","nativeEvent","layout","onRightAffixLayoutChange","handleFocus","_rest$onFocus","onFocus","call","handleBlur","_rest$onBlur","onBlur","handleChangeText","_rest$onChangeText","onChangeText","handleLayoutAnimatedText","e","_root$current7","maxFontSizeMultiplier","_extends","parentState","innerRef","onLayoutAnimatedText","Icon","Affix"],"sources":["C:\\Users\\Cristobal\\Desktop\\proyectoTesis\\client\\node_modules\\react-native-paper\\src\\components\\TextInput\\TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  StyleProp,\n  TextInput as NativeTextInput,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport { roundLayoutSize } from '../../utils/roundLayoutSize';\nimport TextInputAffix, {\n  Props as TextInputAffixProps,\n} from './Adornment/TextInputAffix';\nimport TextInputIcon, {\n  Props as TextInputIconProps,\n} from './Adornment/TextInputIcon';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputOutlined from './TextInputOutlined';\nimport type { RenderProps, TextInputLabelProp } from './types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeTextInput> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors?.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text or component to use for the floating label.\n   */\n  label?: TextInputLabelProp;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input.\n   */\n  selectionColor?: string;\n  /**\n   * Inactive underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Active underline color of the input.\n   */\n  activeUnderlineColor?: string;\n  /**\n   * Inactive outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Active outline color of the input.\n   */\n  activeOutlineColor?: string;\n  /**\n   * Color of the text in the input.\n   */\n  textColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `height` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Pass custom style directly to the input itself.\n   * Overrides input style\n   * Example: `paddingLeft`, `backgroundColor`\n   */\n  contentStyle?: StyleProp<TextStyle>;\n  /**\n   * Pass style to override the default style of outlined wrapper.\n   * Overrides style when mode is set to `outlined`\n   * Example: `borderRadius`, `borderColor`\n   */\n  outlineStyle?: StyleProp<ViewStyle>;\n  /**\n   * Pass style to override the default style of underlined wrapper.\n   * Overrides style when mode is set to `flat`\n   * Example: `borderRadius`, `borderColor`\n   */\n  underlineStyle?: StyleProp<ViewStyle>;\n};\n\ninterface CompoundedComponent\n  extends React.ForwardRefExoticComponent<\n    Props & React.RefAttributes<TextInputHandles>\n  > {\n  Icon: React.FunctionComponent<TextInputIconProps>;\n  Affix: React.FunctionComponent<Partial<TextInputAffixProps>>;\n}\n\ntype TextInputHandles = Pick<\n  NativeTextInput,\n  'focus' | 'clear' | 'blur' | 'isFocused' | 'setNativeProps'\n>;\n\nconst DefaultRenderer = (props: RenderProps) => <NativeTextInput {...props} />;\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\nconst TextInput = forwardRef<TextInputHandles, Props>(\n  (\n    {\n      mode = 'flat',\n      dense = false,\n      disabled = false,\n      error: errorProp = false,\n      multiline = false,\n      editable = true,\n      contentStyle,\n      render = DefaultRenderer,\n      theme: themeOverrides,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n    const isControlled = rest.value !== undefined;\n    const validInputValue = isControlled ? rest.value : rest.defaultValue;\n\n    const { current: labeled } = React.useRef<Animated.Value>(\n      new Animated.Value(validInputValue ? 0 : 1)\n    );\n    const { current: error } = React.useRef<Animated.Value>(\n      new Animated.Value(errorProp ? 1 : 0)\n    );\n    const [focused, setFocused] = React.useState<boolean>(false);\n    const [placeholder, setPlaceholder] = React.useState<string | undefined>(\n      ' '\n    );\n    const [uncontrolledValue, setUncontrolledValue] = React.useState<\n      string | undefined\n    >(validInputValue);\n    // Use value from props instead of local state when input is controlled\n    const value = isControlled ? rest.value : uncontrolledValue;\n\n    const [labelLayout, setLabelLayout] = React.useState<{\n      measured: boolean;\n      width: number;\n      height: number;\n    }>({\n      measured: false,\n      width: 0,\n      height: 0,\n    });\n    const [leftLayout, setLeftLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n    const [rightLayout, setRightLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n\n    const timer = React.useRef<NodeJS.Timeout | undefined>();\n\n    const root = React.useRef<NativeTextInput | undefined | null>();\n\n    const { scale } = theme.animation;\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => root.current?.focus(),\n      clear: () => root.current?.clear(),\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      isFocused: () => root.current?.isFocused() || false,\n      blur: () => root.current?.blur(),\n      forceFocus: () => root.current?.focus(),\n    }));\n\n    React.useEffect(() => {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (errorProp) {\n        // show error\n        Animated.timing(error, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // hide error\n        {\n          Animated.timing(error, {\n            toValue: 0,\n            duration: BLUR_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [errorProp, scale, error]);\n\n    React.useEffect(() => {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (focused || !rest.label) {\n        // If the user wants to use the contextMenu, when changing the placeholder, the contextMenu is closed\n        // This is a workaround to mitigate this behavior in scenarios where the placeholder is not specified.\n        if (rest.placeholder) {\n          // Set the placeholder in a delay to offset the label animation\n          // If we show it immediately, they'll overlap and look ugly\n          timer.current = setTimeout(\n            () => setPlaceholder(rest.placeholder),\n            50\n          ) as unknown as NodeJS.Timeout;\n        }\n      } else {\n        // hidePlaceholder\n\n        // Issue: https://github.com/callstack/react-native-paper/issues/3138\n        // Description:   Changing the placeholder text value dynamically,\n        //                within multiline input on iOS, doesn't work properly â€“\n        //                the placeholder is not displayed initially.\n        // Root cause:    Placeholder initial value, which has length 0.\n        // More context:  The issue was also reproduced in react-native, using its own TextInput.\n        // Workaround:    Set an empty space character in the default value.\n        setPlaceholder(' ');\n      }\n\n      return () => {\n        if (timer.current) {\n          clearTimeout(timer.current);\n        }\n      };\n    }, [focused, rest.label, rest.placeholder]);\n\n    React.useEffect(() => {\n      labeled.stopAnimation();\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      if (value || focused) {\n        // minimize label\n        Animated.timing(labeled, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // restore label\n        Animated.timing(labeled, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      }\n    }, [focused, value, labeled, scale]);\n\n    const onLeftAffixLayoutChange = React.useCallback(\n      (event: LayoutChangeEvent) => {\n        const height = roundLayoutSize(event.nativeEvent.layout.height);\n        const width = roundLayoutSize(event.nativeEvent.layout.width);\n\n        if (width !== leftLayout.width || height !== leftLayout.height) {\n          setLeftLayout({\n            width,\n            height,\n          });\n        }\n      },\n      [leftLayout.height, leftLayout.width]\n    );\n\n    const onRightAffixLayoutChange = React.useCallback(\n      (event: LayoutChangeEvent) => {\n        const width = roundLayoutSize(event.nativeEvent.layout.width);\n        const height = roundLayoutSize(event.nativeEvent.layout.height);\n\n        if (width !== rightLayout.width || height !== rightLayout.height) {\n          setRightLayout({\n            width,\n            height,\n          });\n        }\n      },\n      [rightLayout.height, rightLayout.width]\n    );\n\n    const handleFocus = (args: any) => {\n      if (disabled || !editable) {\n        return;\n      }\n\n      setFocused(true);\n\n      rest.onFocus?.(args);\n    };\n\n    const handleBlur = (args: Object) => {\n      if (!editable) {\n        return;\n      }\n\n      setFocused(false);\n      rest.onBlur?.(args);\n    };\n\n    const handleChangeText = (value: string) => {\n      if (!editable || disabled) {\n        return;\n      }\n\n      if (!isControlled) {\n        // Keep track of value in local state when input is not controlled\n        setUncontrolledValue(value);\n      }\n      rest.onChangeText?.(value);\n    };\n\n    const handleLayoutAnimatedText = React.useCallback(\n      (e: LayoutChangeEvent) => {\n        const width = roundLayoutSize(e.nativeEvent.layout.width);\n        const height = roundLayoutSize(e.nativeEvent.layout.height);\n\n        if (width !== labelLayout.width || height !== labelLayout.height) {\n          setLabelLayout({\n            width,\n            height,\n            measured: true,\n          });\n        }\n      },\n      [labelLayout.height, labelLayout.width]\n    );\n\n    const forceFocus = React.useCallback(() => root.current?.focus(), []);\n\n    const { maxFontSizeMultiplier = 1.5 } = rest;\n\n    if (mode === 'outlined') {\n      return (\n        <TextInputOutlined\n          dense={dense}\n          disabled={disabled}\n          error={errorProp}\n          multiline={multiline}\n          editable={editable}\n          render={render}\n          {...rest}\n          theme={theme}\n          value={value}\n          parentState={{\n            labeled,\n            error,\n            focused,\n            placeholder,\n            value,\n            labelLayout,\n            leftLayout,\n            rightLayout,\n          }}\n          innerRef={(ref) => {\n            root.current = ref;\n          }}\n          onFocus={handleFocus}\n          forceFocus={forceFocus}\n          onBlur={handleBlur}\n          onChangeText={handleChangeText}\n          onLayoutAnimatedText={handleLayoutAnimatedText}\n          onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n          onRightAffixLayoutChange={onRightAffixLayoutChange}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n          contentStyle={contentStyle}\n        />\n      );\n    }\n\n    return (\n      <TextInputFlat\n        dense={dense}\n        disabled={disabled}\n        error={errorProp}\n        multiline={multiline}\n        editable={editable}\n        render={render}\n        {...rest}\n        theme={theme}\n        value={value}\n        parentState={{\n          labeled,\n          error,\n          focused,\n          placeholder,\n          value,\n          labelLayout,\n          leftLayout,\n          rightLayout,\n        }}\n        innerRef={(ref) => {\n          root.current = ref;\n        }}\n        onFocus={handleFocus}\n        forceFocus={forceFocus}\n        onBlur={handleBlur}\n        onChangeText={handleChangeText}\n        onLayoutAnimatedText={handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={onRightAffixLayoutChange}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        contentStyle={contentStyle}\n      />\n    );\n  }\n) as CompoundedComponent;\n// @component ./Adornment/TextInputIcon.tsx\nTextInput.Icon = TextInputIcon;\n\n// @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\nTextInput.Affix = TextInputAffix;\n\nexport default TextInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}