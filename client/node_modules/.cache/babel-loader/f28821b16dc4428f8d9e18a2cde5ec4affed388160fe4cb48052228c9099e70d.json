{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristobal\\\\Desktop\\\\proyectoTesis\\\\client\\\\src\\\\components\\\\TaskForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem from '@mui/lab/TreeItem';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaxonomyTree() {\n  _s();\n  const [treeData, setTreeData] = useState([]);\n  function createTreeNode(id, name, children, level) {\n    return {\n      id: id.toString(),\n      name,\n      children,\n      level\n    }; // Convertir el id a cadena\n  }\n\n  // El resto de tu código...\n\n  // Manejar evento de expansión de nodo\n  const handleNodeToggle = async (event, nodeId) => {\n    const targetNode = treeData.find(node => node.id === nodeId);\n    if (!targetNode.children.length) {\n      const nodeLevel = getNextLevel(targetNode.level);\n      const children = await loadNodeChildren(targetNode, nodeLevel);\n      targetNode.children = children;\n      setTreeData([...treeData]);\n    }\n  };\n\n  // Renderizar los nodos del árbol de forma recursiva\n  const renderTree = nodes => {\n    return nodes.map(node => /*#__PURE__*/_jsxDEV(TreeItem, {\n      nodeId: node.id,\n      label: node.name,\n      onToggle: handleNodeToggle,\n      children: Array.isArray(node.children) ? renderTree(node.children) : null\n    }, node.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(TreeView, {\n    defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 34\n    }, this),\n    defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 32\n    }, this),\n    children: renderTree(treeData)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(TaxonomyTree, \"7XjS31fw1YpL4k7VDRowk1XjlPs=\");\n_c = TaxonomyTree;\nexport default TaxonomyTree;\nvar _c;\n$RefreshReg$(_c, \"TaxonomyTree\");","map":{"version":3,"names":["React","useState","useEffect","TreeView","TreeItem","ExpandMoreIcon","ChevronRightIcon","jsxDEV","_jsxDEV","TaxonomyTree","_s","treeData","setTreeData","createTreeNode","id","name","children","level","toString","handleNodeToggle","event","nodeId","targetNode","find","node","length","nodeLevel","getNextLevel","loadNodeChildren","renderTree","nodes","map","label","onToggle","Array","isArray","fileName","_jsxFileName","lineNumber","columnNumber","defaultCollapseIcon","defaultExpandIcon","_c","$RefreshReg$"],"sources":["C:/Users/Cristobal/Desktop/proyectoTesis/client/src/components/TaskForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TreeView from '@mui/lab/TreeView';\nimport TreeItem from '@mui/lab/TreeItem';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\n\nfunction TaxonomyTree() {\n    const [treeData, setTreeData] = useState([]);\n\n    function createTreeNode(id, name, children, level) {\n        return { id: id.toString(), name, children, level };  // Convertir el id a cadena\n    }\n\n    // El resto de tu código...\n\n    // Manejar evento de expansión de nodo\n    const handleNodeToggle = async (event, nodeId) => {\n        const targetNode = treeData.find(node => node.id === nodeId);\n        if (!targetNode.children.length) {\n            const nodeLevel = getNextLevel(targetNode.level);\n            const children = await loadNodeChildren(targetNode, nodeLevel);\n            targetNode.children = children;\n            setTreeData([...treeData]);\n        }\n    };\n\n    // Renderizar los nodos del árbol de forma recursiva\n    const renderTree = (nodes) => {\n        return nodes.map((node) => (\n            <TreeItem key={node.id} nodeId={node.id} label={node.name} onToggle={handleNodeToggle}>\n                {Array.isArray(node.children) ? renderTree(node.children) : null}\n            </TreeItem>\n        ));\n    };\n\n    return (\n        <TreeView\n            defaultCollapseIcon={<ExpandMoreIcon />}\n            defaultExpandIcon={<ChevronRightIcon />}\n        >\n            {renderTree(treeData)}\n        </TreeView>\n    );\n}\n\nexport default TaxonomyTree;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,cAAc,MAAM,gCAAgC;AAC3D,OAAOC,gBAAgB,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5C,SAASY,cAAcA,CAACC,EAAE,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAE;IAC/C,OAAO;MAAEH,EAAE,EAAEA,EAAE,CAACI,QAAQ,CAAC,CAAC;MAAEH,IAAI;MAAEC,QAAQ;MAAEC;IAAM,CAAC,CAAC,CAAE;EAC1D;;EAEA;;EAEA;EACA,MAAME,gBAAgB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,MAAM,KAAK;IAC9C,MAAMC,UAAU,GAAGX,QAAQ,CAACY,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACV,EAAE,KAAKO,MAAM,CAAC;IAC5D,IAAI,CAACC,UAAU,CAACN,QAAQ,CAACS,MAAM,EAAE;MAC7B,MAAMC,SAAS,GAAGC,YAAY,CAACL,UAAU,CAACL,KAAK,CAAC;MAChD,MAAMD,QAAQ,GAAG,MAAMY,gBAAgB,CAACN,UAAU,EAAEI,SAAS,CAAC;MAC9DJ,UAAU,CAACN,QAAQ,GAAGA,QAAQ;MAC9BJ,WAAW,CAAC,CAAC,GAAGD,QAAQ,CAAC,CAAC;IAC9B;EACJ,CAAC;;EAED;EACA,MAAMkB,UAAU,GAAIC,KAAK,IAAK;IAC1B,OAAOA,KAAK,CAACC,GAAG,CAAEP,IAAI,iBAClBhB,OAAA,CAACJ,QAAQ;MAAeiB,MAAM,EAAEG,IAAI,CAACV,EAAG;MAACkB,KAAK,EAAER,IAAI,CAACT,IAAK;MAACkB,QAAQ,EAAEd,gBAAiB;MAAAH,QAAA,EACjFkB,KAAK,CAACC,OAAO,CAACX,IAAI,CAACR,QAAQ,CAAC,GAAGa,UAAU,CAACL,IAAI,CAACR,QAAQ,CAAC,GAAG;IAAI,GADrDQ,IAAI,CAACV,EAAE;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CACb,CAAC;EACN,CAAC;EAED,oBACI/B,OAAA,CAACL,QAAQ;IACLqC,mBAAmB,eAAEhC,OAAA,CAACH,cAAc;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAE;IACxCE,iBAAiB,eAAEjC,OAAA,CAACF,gBAAgB;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAE;IAAAvB,QAAA,EAEvCa,UAAU,CAAClB,QAAQ;EAAC;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEnB;AAAC7B,EAAA,CArCQD,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAuCrB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}